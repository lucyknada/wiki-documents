"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[54078],{15680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>p});var a=t(96540);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var m=a.createContext({}),o=function(e){var n=a.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=o(e.components);return a.createElement(m.Provider,{value:n},e.children)},l="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,r=e.originalType,m=e.parentName,d=u(e,["components","mdxType","originalType","parentName"]),l=o(t),c=s,p=l["".concat(m,".").concat(c)]||l[c]||g[c]||r;return t?a.createElement(p,i(i({ref:n},d),{},{components:t})):a.createElement(p,i({ref:n},d))}));function p(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=t.length,i=new Array(r);i[0]=c;var u={};for(var m in n)hasOwnProperty.call(n,m)&&(u[m]=n[m]);u.originalType=e,u[l]="string"==typeof e?e:s,i[1]=u;for(var o=2;o<r;o++)i[o]=t[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},17571:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>i,default:()=>g,frontMatter:()=>r,metadata:()=>u,toc:()=>o});var a=t(58168),s=(t(96540),t(15680));const r={description:"Lambda location code",keywords:["Tracker","Wio"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/location_lambda_code",last_update:{date:"11/24/2023",author:"Jessie"}},i=void 0,u={unversionedId:"Sensor/SenseCAP/SenseCAP_T1000_Tracker/Lambda_code",id:"Sensor/SenseCAP/SenseCAP_T1000_Tracker/Lambda_code",title:"Lambda_code",description:"Lambda location code",source:"@site/docs/Sensor/SenseCAP/SenseCAP_T1000_Tracker/Lambda_code.md",sourceDirName:"Sensor/SenseCAP/SenseCAP_T1000_Tracker",slug:"/location_lambda_code",permalink:"/location_lambda_code",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/Sensor/SenseCAP/SenseCAP_T1000_Tracker/Lambda_code.md",tags:[],version:"current",lastUpdatedBy:"Jessie",lastUpdatedAt:1700784e3,formattedLastUpdatedAt:"Nov 24, 2023",frontMatter:{description:"Lambda location code",keywords:["Tracker","Wio"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/location_lambda_code",last_update:{date:"11/24/2023",author:"Jessie"}}},m={},o=[],d={toc:o},l="wrapper";function g(e){let{components:n,...t}=e;return(0,s.yg)(l,(0,a.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-cpp"},"const {IoTDataPlaneClient, PublishCommand} = require(\"@aws-sdk/client-iot-data-plane\");\nconst { IoTWirelessClient, UpdateResourcePositionCommand, GetPositionEstimateCommand } = require(\"@aws-sdk/client-iot-wireless\");\nconst client = new IoTDataPlaneClient({\n    \"region\": \"us-east-1\"\n});\nconst wireless_client = new IoTWirelessClient({\n    \"region\": \"us-east-1\"\n});\n\nconst device_id = \"cf6beffc-6c7e-4a55-800c-7e97d72e0eeb\"\n\nfunction decodeUplink(input, fport) {\n    const bytes = Buffer.from(input, 'base64');\n    const bytesString = bytes2HexString(bytes)\n    const originMessage = bytesString.toLocaleUpperCase()\n    const decoded = {\n        valid: true,\n        err: 0,\n        payload: bytesString,\n        messages: []\n    }\n    if (fport === 199 || fport === 192) {\n        decoded.messages.push({fport: fport, payload: bytesString})\n        return {data: decoded}\n    }\n    if (fport !== 5) {\n        decoded.valid = false\n        return {data: decoded}\n    }\n    let measurement = messageAnalyzed(originMessage)\n    console.log(measurement)\n    if (measurement.length === 0) {\n        decoded.valid = false\n        return {data: decoded}\n    }\n\n    for (let message of measurement) {\n        if (message.length === 0) {\n            continue\n        }\n        let elements = []\n        for (let element of message) {\n            if (element.errorCode) {\n                decoded.err = element.errorCode\n                decoded.errMessage = element.error\n            } else {\n                elements.push(element)\n            }\n        }\n        if (elements.length > 0) {\n            decoded.messages.push(elements)\n        }\n    }\n    // decoded.messages = measurement\n    return {data: decoded}\n}\n\nfunction messageAnalyzed(messageValue) {\n    try {\n        let frames = unpack(messageValue)\n        let measurementResultArray = []\n        for (let i = 0; i < frames.length; i++) {\n            let item = frames[i]\n            let dataId = item.dataId\n            let dataValue = item.dataValue\n            let measurementArray = deserialize(dataId, dataValue)\n            measurementResultArray.push(measurementArray)\n        }\n        return measurementResultArray\n    } catch (e) {\n        return e.toString()\n    }\n}\n\nfunction unpack(messageValue) {\n    let frameArray = []\n\n    for (let i = 0; i < messageValue.length; i++) {\n        let remainMessage = messageValue\n        let dataId = remainMessage.substring(0, 2).toUpperCase()\n        let dataValue\n        let dataObj = {}\n        let packageLen\n        switch (dataId) {\n            case '01':\n                packageLen = 94\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '02':\n                packageLen = 32\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '03':\n                packageLen = 64\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '04':\n                packageLen = 20\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '05':\n                packageLen = 10\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '06':\n                packageLen = 44\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '07':\n                packageLen = 84\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '08':\n                packageLen = 70\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '09':\n                packageLen = 36\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '0A':\n                packageLen = 76\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '0B':\n                packageLen = 62\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '0C':\n                packageLen = 2\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                break\n            case '0D':\n                packageLen = 10\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '0E':\n                packageLen = getInt(remainMessage.substring(8, 10)) * 2 + 10\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, 8) + remainMessage.substring(10, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '0F':\n                packageLen = 34\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '10':\n                packageLen = 26\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '11':\n                packageLen = 28\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            default:\n                return frameArray\n        }\n        if (dataValue.length < 2) {\n            break\n        }\n        frameArray.push(dataObj)\n    }\n    return frameArray\n}\n\nfunction deserialize(dataId, dataValue) {\n    let measurementArray = []\n    let eventList = []\n    let measurement = {}\n    let collectTime = 0\n    let groupId = 0\n    let shardFlag = {}\n    let payload = ''\n    let result = []\n    let dataArr = []\n    switch (dataId) {\n        case '01':\n            measurementArray = getUpShortInfo(dataValue)\n            measurementArray.push(...getMotionSetting(dataValue.substring(30, 40)))\n            measurementArray.push(...getStaticSetting(dataValue.substring(40, 46)))\n            measurementArray.push(...getShockSetting(dataValue.substring(46, 52)))\n            measurementArray.push(...getTempSetting(dataValue.substring(52, 72)))\n            measurementArray.push(...getLightSetting(dataValue.substring(72, 92)))\n            break\n        case '02':\n            measurementArray = getUpShortInfo(dataValue)\n            break\n        case '03':\n            measurementArray.push(...getMotionSetting(dataValue.substring(0, 10)))\n            measurementArray.push(...getStaticSetting(dataValue.substring(10, 16)))\n            measurementArray.push(...getShockSetting(dataValue.substring(16, 22)))\n            measurementArray.push(...getTempSetting(dataValue.substring(22, 42)))\n            measurementArray.push(...getLightSetting(dataValue.substring(42, 62)))\n            break\n        case '04':\n            let interval = 0\n            let workMode = getInt(dataValue.substring(0, 2))\n            let heartbeatInterval = getMinsByMin(dataValue.substring(4, 8))\n            let periodicInterval = getMinsByMin(dataValue.substring(8, 12))\n            let eventInterval = getMinsByMin(dataValue.substring(12, 16))\n            switch (workMode) {\n                case 0:\n                    interval = heartbeatInterval\n                    break\n                case 1:\n                    interval = periodicInterval\n                    break\n                case 2:\n                    interval = eventInterval\n                    break\n            }\n            measurementArray = [\n                {measurementId: '3940', type: 'Work Mode', measurementValue: workMode},\n                {measurementId: '3942', type: 'Heartbeat Interval', measurementValue: heartbeatInterval},\n                {measurementId: '3943', type: 'Periodic Interval', measurementValue: periodicInterval},\n                {measurementId: '3944', type: 'Event Interval', measurementValue: eventInterval},\n                {measurementId: '3941', type: 'SOS Mode', measurementValue: getSOSMode(dataValue.substring(16, 18))},\n                {measurementId: '3900', type: 'Uplink Interval', measurementValue: interval}\n            ]\n            break;\n        case '05':\n            measurementArray = [\n                {measurementId: '3000', type: 'Battery', measurementValue: getBattery(dataValue.substring(0, 2))},\n                {measurementId: '3940', type: 'Work Mode', measurementValue: getWorkingMode(dataValue.substring(2, 4))},\n                {\n                    measurementId: '3965',\n                    type: 'Positioning Strategy',\n                    measurementValue: getPositioningStrategy(dataValue.substring(4, 6))\n                },\n                {measurementId: '3941', type: 'SOS Mode', measurementValue: getSOSMode(dataValue.substring(6, 8))}\n            ]\n            break\n        case '06':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray = [\n                {\n                    measurementId: '4200',\n                    timestamp: collectTime,\n                    motionId: getMotionId(dataValue.substring(6, 8)),\n                    type: 'Event Status',\n                    measurementValue: getEventStatus(dataValue.substring(0, 6))\n                },\n                {\n                    measurementId: '4197',\n                    timestamp: collectTime,\n                    motionId: getMotionId(dataValue.substring(6, 8)),\n                    type: 'Longitude',\n                    measurementValue: parseFloat(getSensorValue(dataValue.substring(16, 24), 1000000))\n                },\n                {\n                    measurementId: '4198',\n                    timestamp: collectTime,\n                    motionId: getMotionId(dataValue.substring(6, 8)),\n                    type: 'Latitude',\n                    measurementValue: parseFloat(getSensorValue(dataValue.substring(24, 32), 1000000))\n                },\n                {\n                    measurementId: '4097',\n                    timestamp: collectTime,\n                    motionId: getMotionId(dataValue.substring(6, 8)),\n                    type: 'Air Temperature',\n                    measurementValue: getSensorValue(dataValue.substring(32, 36), 10)\n                },\n                {\n                    measurementId: '4199',\n                    timestamp: collectTime,\n                    motionId: getMotionId(dataValue.substring(6, 8)),\n                    type: 'Light',\n                    measurementValue: getSensorValue(dataValue.substring(36, 40))\n                },\n                {\n                    measurementId: '3000',\n                    timestamp: collectTime,\n                    motionId: getMotionId(dataValue.substring(6, 8)),\n                    type: 'Battery',\n                    measurementValue: getBattery(dataValue.substring(40, 42))\n                }\n            ]\n            break\n        case '07':\n            eventList = getEventStatus(dataValue.substring(0, 6))\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray = [\n                {\n                    measurementId: '4200',\n                    timestamp: collectTime,\n                    motionId: getMotionId(dataValue.substring(6, 8)),\n                    type: 'Event Status',\n                    measurementValue: getEventStatus(dataValue.substring(0, 6))\n                },\n                {\n                    measurementId: '5001',\n                    timestamp: collectTime,\n                    motionId: getMotionId(dataValue.substring(6, 8)),\n                    type: 'Wi-Fi Scan',\n                    measurementValue: getMacAndRssiObj(dataValue.substring(16, 72))\n                },\n                {\n                    measurementId: '4097',\n                    timestamp: collectTime,\n                    motionId: getMotionId(dataValue.substring(6, 8)),\n                    type: 'Air Temperature',\n                    measurementValue: getSensorValue(dataValue.substring(72, 76), 10)\n                },\n                {\n                    measurementId: '4199',\n                    timestamp: collectTime,\n                    motionId: getMotionId(dataValue.substring(6, 8)),\n                    type: 'Light',\n                    measurementValue: getSensorValue(dataValue.substring(76, 80))\n                },\n                {\n                    measurementId: '3000',\n                    timestamp: collectTime,\n                    motionId: getMotionId(dataValue.substring(6, 8)),\n                    type: 'Battery',\n                    measurementValue: getBattery(dataValue.substring(80, 82))\n                }\n            ]\n            break\n        case '08':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray = [\n                {\n                    measurementId: '4200',\n                    timestamp: collectTime,\n                    motionId: getMotionId(dataValue.substring(6, 8)),\n                    type: 'Event Status',\n                    measurementValue: getEventStatus(dataValue.substring(0, 6))\n                },\n                {\n                    measurementId: '5002',\n                    timestamp: collectTime,\n                    motionId: getMotionId(dataValue.substring(6, 8)),\n                    type: 'BLE Scan',\n                    measurementValue: getMacAndRssiObj(dataValue.substring(16, 58))\n                },\n                {\n                    measurementId: '4097',\n                    timestamp: collectTime,\n                    motionId: getMotionId(dataValue.substring(6, 8)),\n                    type: 'Air Temperature',\n                    measurementValue: getSensorValue(dataValue.substring(58, 62), 10)\n                },\n                {\n                    measurementId: '4199',\n                    timestamp: collectTime,\n                    motionId: getMotionId(dataValue.substring(6, 8)),\n                    type: 'Light',\n                    measurementValue: getSensorValue(dataValue.substring(62, 66))\n                },\n                {\n                    measurementId: '3000',\n                    timestamp: collectTime,\n                    motionId: getMotionId(dataValue.substring(6, 8)),\n                    type: 'Battery',\n                    measurementValue: getBattery(dataValue.substring(66, 68))\n                }\n            ]\n            break\n        case '09':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray = [\n                {\n                    measurementId: '4200',\n                    timestamp: collectTime,\n                    motionId: getMotionId(dataValue.substring(6, 8)),\n                    type: 'Event Status',\n                    measurementValue: getEventStatus(dataValue.substring(0, 6))\n                },\n                {\n                    measurementId: '4197',\n                    timestamp: collectTime,\n                    motionId: getMotionId(dataValue.substring(6, 8)),\n                    type: 'Longitude',\n                    measurementValue: parseFloat(getSensorValue(dataValue.substring(16, 24), 1000000))\n                },\n                {\n                    measurementId: '4198',\n                    timestamp: collectTime,\n                    motionId: getMotionId(dataValue.substring(6, 8)),\n                    type: 'Latitude',\n                    measurementValue: parseFloat(getSensorValue(dataValue.substring(24, 32), 1000000))\n                },\n                {\n                    measurementId: '3000',\n                    timestamp: collectTime,\n                    motionId: getMotionId(dataValue.substring(6, 8)),\n                    type: 'Battery',\n                    measurementValue: getBattery(dataValue.substring(32, 34))\n                }\n            ]\n            break\n        case '0A':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray = [\n                {\n                    measurementId: '4200',\n                    timestamp: collectTime,\n                    motionId: getMotionId(dataValue.substring(6, 8)),\n                    type: 'Event Status',\n                    measurementValue: getEventStatus(dataValue.substring(0, 6))\n                },\n                {\n                    measurementId: '5001',\n                    timestamp: collectTime,\n                    motionId: getMotionId(dataValue.substring(6, 8)),\n                    type: 'Wi-Fi Scan',\n                    measurementValue: getMacAndRssiObj(dataValue.substring(16, 72))\n                },\n                {\n                    measurementId: '3000',\n                    timestamp: collectTime,\n                    motionId: getMotionId(dataValue.substring(6, 8)),\n                    type: 'Battery',\n                    measurementValue: getBattery(dataValue.substring(72, 74))\n                }\n            ]\n            break\n        case '0B':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray = [\n                {\n                    measurementId: '4200',\n                    timestamp: collectTime,\n                    motionId: getMotionId(dataValue.substring(6, 8)),\n                    type: 'Event Status',\n                    measurementValue: getEventStatus(dataValue.substring(0, 6))\n                },\n                {\n                    measurementId: '5002',\n                    timestamp: collectTime,\n                    motionId: getMotionId(dataValue.substring(6, 8)),\n                    type: 'BLE Scan',\n                    measurementValue: getMacAndRssiObj(dataValue.substring(16, 58))\n                },\n                {\n                    measurementId: '3000',\n                    timestamp: collectTime,\n                    motionId: getMotionId(dataValue.substring(6, 8)),\n                    type: 'Battery',\n                    measurementValue: getBattery(dataValue.substring(58, 60))\n                },\n            ]\n            break\n        case '0D':\n            let errorCode = getInt(dataValue)\n            let error = ''\n            switch (errorCode) {\n                case 1:\n                    error = 'FAILED TO OBTAIN THE UTC TIMESTAMP'\n                    break\n                case 2:\n                    error = 'ALMANAC TOO OLD'\n                    break\n                case 3:\n                    error = 'DOPPLER ERROR'\n                    break\n            }\n            measurementArray.push({errorCode, error})\n            break\n        case '0E':\n            shardFlag = getShardFlag(dataValue.substring(0, 2))\n            groupId = getInt(dataValue.substring(2, 6))\n            payload = dataValue.substring(6)\n            measurement = {\n                measurementId: '6152',\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'gnss-ng payload',\n                measurementValue: payload\n            }\n            measurementArray.push(measurement)\n            break\n        case '0F':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            shardFlag = getShardFlag(dataValue.substring(26, 28))\n            groupId = getInt(dataValue.substring(28, 32))\n            measurementArray.push({\n                measurementId: '4200',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'Event Status',\n                measurementValue: getEventStatus(dataValue.substring(0, 6))\n            })\n            measurementArray.push({\n                measurementId: '4097',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'Air Temperature',\n                measurementValue: '' + getSensorValue(dataValue.substring(16, 20), 10)\n            })\n            measurementArray.push({\n                measurementId: '4199',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'Light',\n                measurementValue: '' + getSensorValue(dataValue.substring(20, 24))\n            })\n            measurementArray.push({\n                measurementId: '3000',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'Battery',\n                measurementValue: '' + getBattery(dataValue.substring(24, 26))\n            })\n            break\n        case '10':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            shardFlag = getShardFlag(dataValue.substring(18, 20))\n            groupId = getInt(dataValue.substring(20, 24))\n            measurementArray.push({\n                measurementId: '4200',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'Event Status',\n                measurementValue: getEventStatus(dataValue.substring(0, 6))\n            })\n            measurementArray.push({\n                measurementId: '3000',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'Battery',\n                measurementValue: '' + getBattery(dataValue.substring(16, 18))\n            })\n            break\n        case '11':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray.push({\n                measurementId: '3576',\n                timestamp: collectTime,\n                type: 'Positioning Status',\n                measurementValue: getPositingStatus(dataValue.substring(0, 2))\n            })\n            measurementArray.push({\n                timestamp: collectTime,\n                measurementId: '4200',\n                type: 'Event Status',\n                measurementValue: getEventStatus(dataValue.substring(2, 8))\n            })\n            if (!isNaN(parseFloat(getSensorValue(dataValue.substring(16, 20), 10)))) {\n                measurementArray.push({\n                    timestamp: collectTime,\n                    measurementId: '4097',\n                    type: 'Air Temperature',\n                    measurementValue: '' + getSensorValue(dataValue.substring(16, 20), 10)\n                })\n            }\n            if (!isNaN(parseFloat(getSensorValue(dataValue.substring(20, 24))))) {\n                measurementArray.push({\n                    timestamp: collectTime,\n                    measurementId: '4199',\n                    type: 'Light',\n                    measurementValue: '' + getSensorValue(dataValue.substring(20, 24))\n                })\n            }\n            measurementArray.push({\n                timestamp: collectTime,\n                measurementId: '3000',\n                type: 'Battery',\n                measurementValue: '' + getBattery(dataValue.substring(24, 26))\n            })\n            break\n    }\n    return measurementArray\n}\n\nfunction getMotionId(str) {\n    return getInt(str)\n}\n\nfunction getPositingStatus(str) {\n    let status = getInt(str)\n    switch (status) {\n        case 0:\n            return {id: status, statusName: \"Positioning successful.\"}\n        case 1:\n            return {id: status, statusName: \"The GNSS scan timed out and failed to obtain the location.\"}\n        case 2:\n            return {id: status, statusName: \"The Wi-Fi scan timed out and failed to obtain the location.\"}\n        case 3:\n            return {id: status, statusName: \"The Wi-Fi + GNSS scan timed out and failed to obtain the location.\"}\n        case 4:\n            return {id: status, statusName: \"The GNSS + Wi-Fi scan timed out and failed to obtain the location.\"}\n        case 5:\n            return {id: status, statusName: \"The Bluetooth scan timed out and failed to obtain the location.\"}\n        case 6:\n            return {id: status, statusName: \"The Bluetooth + Wi-Fi scan timed out and failed to obtain the location.\"}\n        case 7:\n            return {id: status, statusName: \"The Bluetooth + GNSS scan timed out and failed to obtain the location.\"}\n        case 8:\n            return {\n                id: status,\n                statusName: \"The Bluetooth + Wi-Fi + GNSS scan timed out and failed to obtain the location.\"\n            }\n        case 9:\n            return {id: status, statusName: \"Location Server failed to parse the GNSS location.\"}\n        case 10:\n            return {id: status, statusName: \"Location Server failed to parse the Wi-Fi location.\"}\n        case 11:\n            return {id: status, statusName: \"Location Server failed to parse the Bluetooth location.\"}\n        case 12:\n            return {id: status, statusName: \"Failed to parse the GNSS location due to the poor accuracy.\"}\n        case 13:\n            return {id: status, statusName: \"Time synchronization failed.\"}\n        case 14:\n            return {id: status, statusName: \"Failed to obtain location due to the old Almanac.\"}\n    }\n    return getInt(str)\n}\n\nfunction getUpShortInfo(messageValue) {\n    return [\n        {\n            measurementId: '3000', type: 'Battery', measurementValue: getBattery(messageValue.substring(0, 2))\n        }, {\n            measurementId: '3502',\n            type: 'Firmware Version',\n            measurementValue: getSoftVersion(messageValue.substring(2, 6))\n        }, {\n            measurementId: '3001',\n            type: 'Hardware Version',\n            measurementValue: getHardVersion(messageValue.substring(6, 10))\n        }, {\n            measurementId: '3940', type: 'Work Mode', measurementValue: getWorkingMode(messageValue.substring(10, 12))\n        }, {\n            measurementId: '3965',\n            type: 'Positioning Strategy',\n            measurementValue: getPositioningStrategy(messageValue.substring(12, 14))\n        }, {\n            measurementId: '3942',\n            type: 'Heartbeat Interval',\n            measurementValue: getMinsByMin(messageValue.substring(14, 18))\n        }, {\n            measurementId: '3943',\n            type: 'Periodic Interval',\n            measurementValue: getMinsByMin(messageValue.substring(18, 22))\n        }, {\n            measurementId: '3944',\n            type: 'Event Interval',\n            measurementValue: getMinsByMin(messageValue.substring(22, 26))\n        }, {\n            measurementId: '3945', type: 'Sensor Enable', measurementValue: getInt(messageValue.substring(26, 28))\n        }, {\n            measurementId: '3941', type: 'SOS Mode', measurementValue: getSOSMode(messageValue.substring(28, 30))\n        }\n    ]\n}\n\nfunction getMotionSetting(str) {\n    return [\n        {measurementId: '3946', type: 'Motion Enable', measurementValue: getInt(str.substring(0, 2))},\n        {measurementId: '3947', type: 'Any Motion Threshold', measurementValue: getSensorValue(str.substring(2, 6), 1)},\n        {measurementId: '3948', type: 'Motion Start Interval', measurementValue: getMinsByMin(str.substring(6, 10))},\n    ]\n}\n\nfunction getStaticSetting(str) {\n    return [\n        {measurementId: '3949', type: 'Static Enable', measurementValue: getInt(str.substring(0, 2))},\n        {measurementId: '3950', type: 'Device Static Timeout', measurementValue: getMinsByMin(str.substring(2, 6))}\n    ]\n}\n\nfunction getShockSetting(str) {\n    return [\n        {measurementId: '3951', type: 'Shock Enable', measurementValue: getInt(str.substring(0, 2))},\n        {measurementId: '3952', type: 'Shock Threshold', measurementValue: getInt(str.substring(2, 6))}\n    ]\n}\n\nfunction getTempSetting(str) {\n    return [\n        {measurementId: '3953', type: 'Temp Enable', measurementValue: getInt(str.substring(0, 2))},\n        {measurementId: '3954', type: 'Event Temp Interval', measurementValue: getMinsByMin(str.substring(2, 6))},\n        {\n            measurementId: '3955',\n            type: 'Event Temp Sample Interval',\n            measurementValue: getSecondsByInt(str.substring(6, 10))\n        },\n        {measurementId: '3956', type: 'Temp ThMax', measurementValue: getSensorValue(str.substring(10, 14), 10)},\n        {measurementId: '3957', type: 'Temp ThMin', measurementValue: getSensorValue(str.substring(14, 18), 10)},\n        {measurementId: '3958', type: 'Temp Warning Type', measurementValue: getInt(str.substring(18, 20))}\n    ]\n}\n\nfunction getLightSetting(str) {\n    return [\n        {measurementId: '3959', type: 'Light Enable', measurementValue: getInt(str.substring(0, 2))},\n        {measurementId: '3960', type: 'Event Light Interval', measurementValue: getMinsByMin(str.substring(2, 6))},\n        {\n            measurementId: '3961',\n            type: 'Event Light Sample Interval',\n            measurementValue: getSecondsByInt(str.substring(6, 10))\n        },\n        {measurementId: '3962', type: 'Light ThMax', measurementValue: getSensorValue(str.substring(10, 14), 10)},\n        {measurementId: '3963', type: 'Light ThMin', measurementValue: getSensorValue(str.substring(14, 18), 10)},\n        {measurementId: '3964', type: 'Light Warning Type', measurementValue: getInt(str.substring(18, 20))}\n    ]\n}\n\nfunction getShardFlag(str) {\n    let bitStr = getByteArray(str)\n    return {\n        count: parseInt(bitStr.substring(0, 4), 2),\n        index: parseInt(bitStr.substring(4), 2)\n    }\n}\n\nfunction getBattery(batteryStr) {\n    return loraWANV2DataFormat(batteryStr)\n}\n\nfunction getSoftVersion(softVersion) {\n    return `${loraWANV2DataFormat(softVersion.substring(0, 2))}.${loraWANV2DataFormat(softVersion.substring(2, 4))}`\n}\n\nfunction getHardVersion(hardVersion) {\n    return `${loraWANV2DataFormat(hardVersion.substring(0, 2))}.${loraWANV2DataFormat(hardVersion.substring(2, 4))}`\n}\n\nfunction getSecondsByInt(str) {\n    return getInt(str)\n}\n\nfunction getMinsByMin(str) {\n    return getInt(str)\n}\n\nfunction getSensorValue(str, dig) {\n    if (str === '8000') {\n        return null\n    } else {\n        return loraWANV2DataFormat(str, dig)\n    }\n}\n\nfunction bytes2HexString(arrBytes) {\n    var str = ''\n    for (var i = 0; i < arrBytes.length; i++) {\n        var tmp\n        var num = arrBytes[i]\n        if (num < 0) {\n            tmp = (255 + num + 1).toString(16)\n        } else {\n            tmp = num.toString(16)\n        }\n        if (tmp.length === 1) {\n            tmp = '0' + tmp\n        }\n        str += tmp\n    }\n    return str\n}\n\nfunction loraWANV2DataFormat(str, divisor = 1) {\n    let strReverse = bigEndianTransform(str)\n    let str2 = toBinary(strReverse)\n    if (str2.substring(0, 1) === '1') {\n        let arr = str2.split('')\n        let reverseArr = arr.map((item) => {\n            if (parseInt(item) === 1) {\n                return 0\n            } else {\n                return 1\n            }\n        })\n        str2 = parseInt(reverseArr.join(''), 2) + 1\n        return '-' + str2 / divisor\n    }\n    return parseInt(str2, 2) / divisor\n}\n\nfunction bigEndianTransform(data) {\n    let dataArray = []\n    for (let i = 0; i < data.length; i += 2) {\n        dataArray.push(data.substring(i, i + 2))\n    }\n    return dataArray\n}\n\nfunction toBinary(arr) {\n    let binaryData = arr.map((item) => {\n        let data = parseInt(item, 16)\n            .toString(2)\n        let dataLength = data.length\n        if (data.length !== 8) {\n            for (let i = 0; i < 8 - dataLength; i++) {\n                data = `0` + data\n            }\n        }\n        return data\n    })\n    return binaryData.toString().replace(/,/g, '')\n}\n\nfunction getSOSMode(str) {\n    return loraWANV2DataFormat(str)\n}\n\nfunction getMacAndRssiObj(pair) {\n    let pairs = []\n    if (pair.length % 14 === 0) {\n        for (let i = 0; i < pair.length; i += 14) {\n            let mac = getMacAddress(pair.substring(i, i + 12))\n            if (mac) {\n                let rssi = getInt8RSSI(pair.substring(i + 12, i + 14))\n                pairs.push({mac: mac, rssi: rssi})\n            } else {\n                continue\n            }\n        }\n    }\n    return pairs\n}\n\nfunction getMacAddress(str) {\n    if (str.toLowerCase() === 'ffffffffffff') {\n        return null\n    }\n    let macArr = []\n    for (let i = 1; i < str.length; i++) {\n        if (i % 2 === 1) {\n            macArr.push(str.substring(i - 1, i + 1))\n        }\n    }\n    let mac = ''\n    for (let i = 0; i < macArr.length; i++) {\n        mac = mac + macArr[i]\n        if (i < macArr.length - 1) {\n            mac = mac + ':'\n        }\n    }\n    return mac\n}\n\nfunction getInt8RSSI(str) {\n    return loraWANV2DataFormat(str)\n}\n\nfunction getInt(str) {\n    return parseInt(str, 16)\n}\n\nfunction getEventStatus(str) {\n    // return getInt(str)\n    let bitStr = getByteArray(str)\n    let bitArr = []\n    for (let i = 0; i < bitStr.length; i++) {\n        bitArr[i] = bitStr.substring(i, i + 1)\n    }\n    bitArr = bitArr.reverse()\n    let event = []\n    for (let i = 0; i < bitArr.length; i++) {\n        if (bitArr[i] !== '1') {\n            continue\n        }\n        switch (i) {\n            case 0:\n                event.push({id: 1, eventName: \"Start moving event.\"})\n                break\n            case 1:\n                event.push({id: 2, eventName: \"End movement event.\"})\n                break\n            case 2:\n                event.push({id: 3, eventName: \"Motionless event.\"})\n                break\n            case 3:\n                event.push({id: 4, eventName: \"Shock event.\"})\n                break\n            case 4:\n                event.push({id: 5, eventName: \"Temperature event.\"})\n                break\n            case 5:\n                event.push({id: 6, eventName: \"Light event.\"})\n                break\n            case 6:\n                event.push({id: 7, eventName: \"SOS event.\"})\n                break\n            case 7:\n                event.push({id: 8, eventName: \"Press once event.\"})\n                break\n        }\n    }\n    return event\n}\n\nfunction getByteArray(str) {\n    let bytes = []\n    for (let i = 0; i < str.length; i += 2) {\n        bytes.push(str.substring(i, i + 2))\n    }\n    return toBinary(bytes)\n}\n\nfunction getWorkingMode(workingMode) {\n    return getInt(workingMode)\n}\n\nfunction getPositioningStrategy(strategy) {\n    return getInt(strategy)\n}\n\nfunction getUTCTimestamp(str) {\n    return parseInt(loraWANV2PositiveDataFormat(str)) * 1000\n}\n\nfunction loraWANV2PositiveDataFormat(str, divisor = 1) {\n    let strReverse = bigEndianTransform(str)\n    let str2 = toBinary(strReverse)\n    return parseInt(str2, 2) / divisor\n}\n\nasync function updateDevicePosition(gps_data) {\n    const input = { // UpdateResourcePositionRequest\n        ResourceIdentifier: device_id, // required\n        ResourceType: \"WirelessDevice\", // required\n        GeoJsonPayload: JSON.stringify(gps_data),\n    };\n    const command = new UpdateResourcePositionCommand(input);\n    const wireless_response = await wireless_client.send(command);\n    console.log(wireless_response)\n}\n\nexports.handler = async (event) => {\n    try {\n        const lorawan_info = event[\"WirelessMetadata\"][\"LoRaWAN\"];\n        const lorawan_data = event[\"PayloadData\"];\n        const resolved_data = decodeUplink(lorawan_data, lorawan_info[\"FPort\"])[\"data\"];\n\n        // publish all measurement data\n        const input = { // PublishRequest\n            topic: 'tracker/measurement',\n            qos: 0,\n            retain: false,\n            payload: JSON.stringify({\n                eui: lorawan_info[\"DevEui\"],\n                timestamp: lorawan_info[\"Timestamp\"],\n                data: resolved_data\n            })\n        };\n        const command = new PublishCommand(input);\n        const response = await client.send(command);\n        console.log(\"response: \" + JSON.stringify(response));\n\n        let longitude;\n        let latitude;\n        let messages = resolved_data.messages\n        console.log(\"messages: \" + JSON.stringify(messages))\n        if (messages && messages.length > 0) {\n            for (let i = 0; i < messages.length; i++) {\n                for (let j = 0; j < messages[i].length; j++) {\n\n                    // update location from gps\n                    if (messages[i][j].measurementId === \"4197\") {\n                        longitude = messages[i][j][\"measurementValue\"];\n                    }\n                    if (messages[i][j].measurementId === \"4198\") {\n                        latitude = messages[i][j][\"measurementValue\"];\n                    }\n                    if (latitude && longitude) {\n                        try {\n                            let gps_data = {\n                                \"type\": \"Point\",\n                                \"coordinates\": [longitude, latitude]\n                                // \"coordinates\": [33.3318, -22.2155, 13.123]\n                            }\n                            await updateDevicePosition(gps_data);\n                        } catch (e) {\n                            console.log(`===>error`, e)\n                        }\n                    }\n\n                    // update location from wifi data\n                    if (messages[i][j].measurementId === \"5002\") {\n                        let WiFiAccessPoints = []\n                        for (let k = 0; k < messages[i][j][\"measurementValue\"].length; k++) {\n                            WiFiAccessPoints.push({\n                                \"MacAddress\": messages[i][j][\"measurementValue\"][k].mac,\n                                \"Rss\": parseInt(messages[i][j][\"measurementValue\"][k].rssi)\n                            })\n                        }\n\n                        const wifi_data = {\n                            \"WiFiAccessPoints\": WiFiAccessPoints\n                        }\n\n                        console.log(wifi_data)\n                        const wifi_data_command = new GetPositionEstimateCommand(wifi_data);\n                        const wifi_data_command_response = await wireless_client.send(wifi_data_command);\n                        let geo_json\n                        if (wifi_data_command_response && wifi_data_command_response.GeoJsonPayload) {\n                            geo_json = JSON.parse(new TextDecoder(\"utf-8\").decode(wifi_data_command_response.GeoJsonPayload));\n                            let gps_data = {\n                                \"type\": \"Point\",\n                                \"coordinates\": [geo_json.coordinates[0], geo_json.coordinates[1]]\n                            }\n                            await updateDevicePosition(gps_data);\n                        }\n                        console.log(\"wifi_data_command_response: \" + JSON.stringify(wifi_data_command_response));\n                        console.log(\"geo_json: \" + JSON.stringify(geo_json));\n\n                    }\n                }\n            }\n        }\n\n        return {\n            statusCode: 200,\n            body: 'Message published successfully' + JSON.stringify(event)\n        };\n    } catch (error) {\n        console.error('Error publishing message:', error);\n\n        return {\n            statusCode: 500,\n            body: 'Error publishing message'\n        };\n    }\n};\n")))}g.isMDXComponent=!0}}]);