"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[66460],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>u});var o=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},y=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),d=p(n),y=a,u=d["".concat(l,".").concat(y)]||d[y]||g[y]||i;return n?o.createElement(u,s(s({ref:t},c),{},{components:n})):o.createElement(u,s({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=y;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[d]="string"==typeof e?e:a,s[1]=r;for(var p=2;p<i;p++)s[p]=n[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}y.displayName="MDXCreateElement"},31364:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>g,frontMatter:()=>i,metadata:()=>r,toc:()=>p});var o=n(58168),a=(n(96540),n(15680));const i={description:"Use XIAO ESP32C6 and sensors collect data and send to Apache Kafka",title:"Real-time IoT Data Processing Node Powered By Apache Kafka",keywords:["xiao esp32c6"],image:"https://files.seeedstudio.com/wiki/seeed_logo/logo_2023.png",slug:"/xiao_esp32c6_kafka",last_update:{date:"05/21/2024",author:"Allen"}},s=void 0,r={unversionedId:"Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32C6/Application/xiao_esp32c6_kafka",id:"Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32C6/Application/xiao_esp32c6_kafka",title:"Real-time IoT Data Processing Node Powered By Apache Kafka",description:"Use XIAO ESP32C6 and sensors collect data and send to Apache Kafka",source:"@site/docs/Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32C6/Application/xiao_esp32c6_kafka.md",sourceDirName:"Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32C6/Application",slug:"/xiao_esp32c6_kafka",permalink:"/xiao_esp32c6_kafka",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32C6/Application/xiao_esp32c6_kafka.md",tags:[],version:"current",lastUpdatedBy:"Allen",lastUpdatedAt:1716249600,formattedLastUpdatedAt:"May 21, 2024",frontMatter:{description:"Use XIAO ESP32C6 and sensors collect data and send to Apache Kafka",title:"Real-time IoT Data Processing Node Powered By Apache Kafka",keywords:["xiao esp32c6"],image:"https://files.seeedstudio.com/wiki/seeed_logo/logo_2023.png",slug:"/xiao_esp32c6_kafka",last_update:{date:"05/21/2024",author:"Allen"}},sidebar:"ProductSidebar",previous:{title:"Empowering AI with AWS IoT Core for the XIAO ESP32C6",permalink:"/xiao_esp32c6_aws_iot"},next:{title:"Quick start with Zigbee on XIAO ESP32C6",permalink:"/xiao_esp32c6_zigbee"}},l={},p=[{value:"Materials Required",id:"materials-required",level:2},{value:"Docker Installation",id:"docker-installation",level:2},{value:"Step 1. Download Docker",id:"step-1-download-docker",level:3},{value:"Step 2. Install WSL(Windows Subsystem for Linux)",id:"step-2-install-wslwindows-subsystem-for-linux",level:3},{value:"Deploy Services",id:"deploy-services",level:2},{value:"Step 3. Deploy a Python Server",id:"step-3-deploy-a-python-server",level:3},{value:"Step 4. Deploy Jupyter Notebook",id:"step-4-deploy-jupyter-notebook",level:3},{value:"Step 5. Launch Docker Cluster",id:"step-5-launch-docker-cluster",level:3},{value:"Step 7. Test Kafka by Python",id:"step-7-test-kafka-by-python",level:3},{value:"XIAO ESP32C6 and Apache Kafka",id:"xiao-esp32c6-and-apache-kafka",level:2},{value:"Step 8. Collect Data And Send To Apache Kafka",id:"step-8-collect-data-and-send-to-apache-kafka",level:3},{value:"Resources",id:"resources",level:2},{value:"Tech Support &amp; Product Discussion",id:"tech-support--product-discussion",level:2}],c={toc:p},d="wrapper";function g(e){let{components:t,...n}=e;return(0,a.yg)(d,(0,o.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("div",{class:"table-center"},(0,a.yg)("iframe",{width:"730",height:"500",src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/kafka_xiao.mp4",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true"}," ")),(0,a.yg)("p",null,"Our cutting-edge processing node, Kafka-ESP32, combines the power of Apache Kafka and ESP32C6 microcontrollers to deliver an efficient solution for handling IoT data streams. By using the XIAO ESP32C6 with the DHT20 environmental sensor, data is collected and seamlessly sent to Apache Kafka via the ESP32C6. Kafka's high-throughput, low-latency messaging capabilities enable real-time data processing and analysis, while its distributed architecture allows for effortless scalability. Kafka-ESP32 empowers you to develop custom applications and integrations, revolutionizing the way you manage and utilize your IoT assets in today's data-driven landscape."),(0,a.yg)("h2",{id:"materials-required"},"Materials Required"),(0,a.yg)("p",null,"This example will introduce the use of XIAO ESP32C6 with Grove DHT20 temperature and humidity sensor to complete the SageMaker task of AWS IoT Core. Below are all the hardware devices needed to complete this routine."),(0,a.yg)("div",{class:"table-center"},(0,a.yg)("table",{align:"center"},(0,a.yg)("tr",null,(0,a.yg)("th",null,"XIAO ESP32C6"),(0,a.yg)("th",null,"DHT20"),(0,a.yg)("th",null,"Extension Board")),(0,a.yg)("tr",null,(0,a.yg)("td",null,(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/SeeedStudio-XIAO-ESP32C6/img/xiaoc6.jpg",style:{width:250,height:"auto"}}))),(0,a.yg)("td",null,(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/Grove-Temperature-Humidity-Sensor/Tem-humidity-sensor1.jpg",style:{width:250,height:"auto"}}))),(0,a.yg)("td",null,(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/extensionboard.jpg",style:{width:250,height:"auto"}})))),(0,a.yg)("tr",null,(0,a.yg)("td",null,(0,a.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,a.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Seeed-Studio-XIAO-ESP32C6-p-5884.html"},(0,a.yg)("strong",null,(0,a.yg)("span",null,(0,a.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))),(0,a.yg)("td",null,(0,a.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,a.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Grove-Temperature-Humidity-Sensor-V2-0-DHT20-p-4967.html"},(0,a.yg)("strong",null,(0,a.yg)("span",null,(0,a.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))),(0,a.yg)("td",null,(0,a.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,a.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Grove-Shield-for-Seeeduino-XIAO-p-4621.html"},(0,a.yg)("strong",null,(0,a.yg)("span",null,(0,a.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f"))))))))),(0,a.yg)("h2",{id:"docker-installation"},"Docker Installation"),(0,a.yg)("p",null,"Why use Docker? Because Docker can simulate the environment of multiple computers on a single machine and deploy applications with great ease. Therefore, in this project, we will use Docker to set up the environment and improve efficiency."),(0,a.yg)("h3",{id:"step-1-download-docker"},"Step 1. Download Docker"),(0,a.yg)("p",null,"According to your computer to download different types of installer. Click ",(0,a.yg)("a",{parentName:"p",href:"https://www.docker.com/products/docker-desktop/"},"here")," to jump."),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/1.png",style:{width:1e3,height:"auto"}})),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"If your computer is ",(0,a.yg)("strong",{parentName:"p"},"Windows"),", please don't install docker until you finish ",(0,a.yg)("strong",{parentName:"p"},"Step 2"),".")),(0,a.yg)("h3",{id:"step-2-install-wslwindows-subsystem-for-linux"},"Step 2. Install WSL(Windows Subsystem for Linux)"),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"This step is for ",(0,a.yg)("strong",{parentName:"p"},"Windows"),". You can skip this step if you computer is Mac or Linux.")),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"Run the following code as an administrator.")),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/3.png",style:{width:1e3,height:"auto"}})),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n")),(0,a.yg)("ol",{start:2},(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Download this tool from ",(0,a.yg)("a",{parentName:"p",href:"https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi"},"here")," and double click to install it.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Go to your ",(0,a.yg)("strong",{parentName:"p"},"Microsoft Store")," to search and download linux version you like, here I installed Ubuntu."))),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/4.png",style:{width:1e3,height:"auto"}})),(0,a.yg)("ol",{start:4},(0,a.yg)("li",{parentName:"ol"},"After installing Linux, you need to open it and set your username and password, and then need to wait a minute to initialize.")),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/5.png",style:{width:1e3,height:"auto"}})),(0,a.yg)("ol",{start:5},(0,a.yg)("li",{parentName:"ol"},"Run the following instructions to use ",(0,a.yg)("strong",{parentName:"li"},"WSL"),".")),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/6.png",style:{width:1e3,height:"auto"}})),(0,a.yg)("ol",{start:6},(0,a.yg)("li",{parentName:"ol"},"After installing WSL, now you can double click you docker installer to install it. When you see the following image that means it work.")),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/2.png",style:{width:1e3,height:"auto"}})),(0,a.yg)("h2",{id:"deploy-services"},"Deploy Services"),(0,a.yg)("p",null,"Before we start, I want to introduce every service's function in this project."),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/structure.png",style:{width:700,height:"auto"}})),(0,a.yg)("p",null,"Here is this project directory structure for your reference. I will create those files one by one in the following steps. The position of each files is very important. I strongly recommand you refer this directory structure. Create a ",(0,a.yg)("strong",{parentName:"p"},"kafka_xiao_project")," directory and include those files."),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/30.png",style:{width:1e3,height:"auto"}})),(0,a.yg)("h3",{id:"step-3-deploy-a-python-server"},"Step 3. Deploy a Python Server"),(0,a.yg)("p",null,"Because of the lack of performance of the MCU device, it cannot be used directly as a client for kafka. So you need to build a server to do data transit. This step is to build a simple server with python. The XIAO ESP32C6 is mainly to collect enviroment data from DHT20 and send it to the server."),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"First we need to create ",(0,a.yg)("strong",{parentName:"li"},"app.py")," file, which is what server do.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"from flask import Flask\nfrom kafka import KafkaProducer, KafkaConsumer\n\napp = Flask(__name__)\n\n@app.route('/favicon.ico')\ndef favicon():\n    return '', 204\n\n@app.route('/<temperature>/<humidity>')\ndef send_data(temperature, humidity):\n    producer = KafkaProducer(bootstrap_servers='kafka:9092')\n    data = f'Temperature: {temperature}, Humidity: {humidity}'\n    producer.send('my_topic', data.encode('utf-8'))\n    return f'Temperature: {temperature}, Humidity: {humidity}'\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5001)\n")),(0,a.yg)("ol",{start:2},(0,a.yg)("li",{parentName:"ol"},"Create ",(0,a.yg)("strong",{parentName:"li"},"requirements.txt"),", which is dependency library.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"flask\nkafka-python\n")),(0,a.yg)("ol",{start:3},(0,a.yg)("li",{parentName:"ol"},"Create ",(0,a.yg)("strong",{parentName:"li"},"Dockerfile"))),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "app.py"]\n')),(0,a.yg)("ol",{start:4},(0,a.yg)("li",{parentName:"ol"},"After creating that 3 files, then we can build a docker image by running the following code.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"docker build -t pyserver .\n")),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/9.png",style:{width:1e3,height:"auto"}})),(0,a.yg)("h3",{id:"step-4-deploy-jupyter-notebook"},"Step 4. Deploy Jupyter Notebook"),(0,a.yg)("p",null,"Jupyter Notebook is mainly used for debugging, and it's a very good tool to use. As well as we can use python to operate Kafka."),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"Create ",(0,a.yg)("strong",{parentName:"li"},"Dockerfile")," first.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'FROM python:3.9\n\nRUN pip install jupyter\n\nWORKDIR /notebook\n\nEXPOSE 8888\n\nCMD ["jupyter", "notebook", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root"]\n')),(0,a.yg)("ol",{start:2},(0,a.yg)("li",{parentName:"ol"},"Build jupyter docker image.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"docker build -t jupyter .\n")),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/8.png",style:{width:1e3,height:"auto"}})),(0,a.yg)("h3",{id:"step-5-launch-docker-cluster"},"Step 5. Launch Docker Cluster"),(0,a.yg)("p",null,"We can use ",(0,a.yg)("strong",{parentName:"p"},"docker-compose.yml")," to build docker cluster. Each service in docker-compose stands for a independent computer and we use ",(0,a.yg)("em",{parentName:"p"},"kafka-net")," to connect them each other."),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"So first we need to create ",(0,a.yg)("strong",{parentName:"li"},"docker-compose.yml"),".")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'services:\n  zookeeper:\n    container_name: zookeeper\n    hostname: zookeeper\n    image: docker.io/bitnami/zookeeper\n    ports:\n      - "2181:2181"\n    environment:\n      - ALLOW_ANONYMOUS_LOGIN=yes\n    networks:\n      - kafka-net\n\n  kafka:\n    container_name: kafka\n    hostname: kafka\n    image: docker.io/bitnami/kafka\n    ports:\n      - "9092:9092"\n      - "9093:9093"\n    environment:\n      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181\n      - KAFKA_CFG_BROKER_ID=0\n      - ALLOW_PLAINTEXT_LISTENER=yes\n      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT\n      - KAFKA_CFG_LISTENERS=INTERNAL://kafka:9092,EXTERNAL://localhost:9093\n      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:9092,EXTERNAL://localhost:9093\n      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL\n    depends_on:\n      - zookeeper\n    networks:\n      - kafka-net\n      \n  jupyter:\n    image: jupyter:latest\n    depends_on:\n      - kafka\n    volumes:\n      - ./myjupyter:/notebook\n    ports:\n      - "8888:8888"\n    environment:\n      - JUPYTER_ENABLE_LAB=yes\n    networks:\n      - kafka-net\n      \n  pyserver:\n    image: pyserver:latest\n    depends_on:\n      - kafka\n    volumes:\n      - ./myserver/app.py:/app/app.py\n    ports:\n      - "5001:5001"\n    networks:\n      - kafka-net\n\nnetworks:\n  kafka-net:\n    driver: bridge\n')),(0,a.yg)("ol",{start:2},(0,a.yg)("li",{parentName:"ol"},"And then we launch this docker cluster by running the following command. ")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"docker-compose up -d\n")),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"It is possible that the port is occupied, you can change the port from 5001 to 5002 etc, or close the application that occupies the port.")),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/10.png",style:{width:1e3,height:"auto"}})),(0,a.yg)("ol",{start:3},(0,a.yg)("li",{parentName:"ol"},"In next several operations we are going to test if it works well. First we open software ",(0,a.yg)("strong",{parentName:"li"},"docker desktop")," and click into ",(0,a.yg)("strong",{parentName:"li"},"pyserver"),".")),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/11.png",style:{width:1e3,height:"auto"}})),(0,a.yg)("ol",{start:4},(0,a.yg)("li",{parentName:"ol"},"Now the server is running on ",(0,a.yg)("a",{parentName:"li",href:"http://127.0.0.1:5001"},"http://127.0.0.1:5001"),". Click this link to open it.")),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/12.png",style:{width:800,height:"auto"}})),(0,a.yg)("ol",{start:5},(0,a.yg)("li",{parentName:"ol"},"And then input two parameter like this format to test if docker cluster is working well.")),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/13.png",style:{width:700,height:"auto"}})),(0,a.yg)("ol",{start:6},(0,a.yg)("li",{parentName:"ol"},"We go inside Kafka to take a look if the data were send Kafka.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"docker exec -it kafka bash\n\ncd opt/bitnami/kafka/bin/\n\nkafka-console-consumer.sh --bootstrap-server localhost:9093 --topic my_topic --from-beginning\n")),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/14.png",style:{width:1e3,height:"auto"}})),(0,a.yg)("ol",{start:7},(0,a.yg)("li",{parentName:"ol"},"We can try again with different parameter and you can see the data was send to Kafka immediately. Now, Congratulations! You docker cluster is working perfectly.")),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/15.png",style:{width:1e3,height:"auto"}})),(0,a.yg)("h3",{id:"step-7-test-kafka-by-python"},"Step 7. Test Kafka by Python"),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"This step is mainly about how to use Python manipulate Kafka. You also can skip this step. No impact on overall project operations.")),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"Open docker desktop and click into jupyter.")),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/16.png",style:{width:1e3,height:"auto"}})),(0,a.yg)("ol",{start:2},(0,a.yg)("li",{parentName:"ol"},"click this link to access jupyter.")),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/17.png",style:{width:1e3,height:"auto"}})),(0,a.yg)("ol",{start:3},(0,a.yg)("li",{parentName:"ol"},"when you access jupyter successfully, you will see this page.")),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/18.png",style:{width:1e3,height:"auto"}})),(0,a.yg)("ol",{start:4},(0,a.yg)("li",{parentName:"ol"},"Click the right mouse button and create ",(0,a.yg)("strong",{parentName:"li"},"New Notebook"),", using Python3(ipykernel).")),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/19.png",style:{width:800,height:"auto"}})),(0,a.yg)("ol",{start:5},(0,a.yg)("li",{parentName:"ol"},"Install kafka-python library by running ",(0,a.yg)("inlineCode",{parentName:"li"},"pip install kafka-python"),".")),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/21.png",style:{width:1e3,height:"auto"}})),(0,a.yg)("ol",{start:6},(0,a.yg)("li",{parentName:"ol"},"After installing that library, we need to restart jupyter.")),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/22.png",style:{width:1e3,height:"auto"}})),(0,a.yg)("ol",{start:7},(0,a.yg)("li",{parentName:"ol"},"Now running the following code to send some data to Kafka by Python.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"from kafka import KafkaProducer, KafkaConsumer\n\n#initialize producer\nproducer = KafkaProducer(bootstrap_servers='localhost:9093')\n#send message\nproducer.send('my_topic', b'Hello, Kafka2')\n")),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/23.png",style:{width:1e3,height:"auto"}})),(0,a.yg)("ol",{start:8},(0,a.yg)("li",{parentName:"ol"},"Also you can check those data in kafka.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"from kafka import KafkaConsumer\n\n# initialize consumer\nconsumer = KafkaConsumer(\n    'my_topic',\n    bootstrap_servers='localhost:9093',\n    auto_offset_reset='earliest',\n    enable_auto_commit=True,\n    group_id='group1'\n)\n\n# receive data and print\nfor message in consumer:\n    print(f\"Received message: {message.value.decode('utf-8')}\")\n")),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/25.png",style:{width:1e3,height:"auto"}})),(0,a.yg)("h2",{id:"xiao-esp32c6-and-apache-kafka"},"XIAO ESP32C6 and Apache Kafka"),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://kafka.apache.org/"},"Kafka")," is a distributed streaming platform that enables the real-time processing of data streams at scale. It allows for the publish-subscribe messaging of data between systems, providing fault tolerance, persistence, and high throughput. Kafka is widely used for building real-time data pipelines and streaming applications across various domains."),(0,a.yg)("p",null,"Now, we are going to use XIAO ESP32C6 and DHT20 temperature and humidity sensor to collect data and send to Kafka in real time."),(0,a.yg)("h3",{id:"step-8-collect-data-and-send-to-apache-kafka"},"Step 8. Collect Data And Send To Apache Kafka"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"Copy the following code to your Arduino IDE.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <WiFi.h>\n#include <HTTPClient.h>\n\n//Change to your wifi name and password here.\nconst char* ssid = "Maker_2.4G";\nconst char* password = "15935700";\n\n//Change to your computer IP address and server port here.\nconst char* serverUrl = "http://192.168.1.175:5001";\n\nvoid setup() {\n  Serial.begin(115200);\n  \n  WiFi.begin(ssid, password);\n  \n  while (WiFi.status() != WL_CONNECTED) {\n    delay(1000);\n    Serial.println("Connecting to WiFi...");\n  }\n  \n  Serial.println("Connected to WiFi");\n}\n\nvoid loop() {\n  if (WiFi.status() == WL_CONNECTED) {\n    HTTPClient http;\n    \n    //Create access link\n    String url = serverUrl;\n    url += "/";\n    url += "30.532";  // tempertature\n    url += "/";\n    url += "60.342";  // humidity\n    \n    http.begin(url);\n    \n    int httpResponseCode = http.GET();\n    \n    //Get http response and print\n    if (httpResponseCode == 200) {\n      String response = http.getString();\n      Serial.println("Server response:");\n      Serial.println(response);\n    } else {\n      Serial.print("HTTP error code: ");\n      Serial.println(httpResponseCode);\n    }\n    \n    http.end();\n  } else {\n    Serial.println("WiFi disconnected");\n  }\n  \n  delay(5000);  // access server in every 5s.\n}\n')),(0,a.yg)("p",null,"If you don't know what is your computer IP address. You can run ",(0,a.yg)("inlineCode",{parentName:"p"},"ipconfig"),"(Windows) or ",(0,a.yg)("inlineCode",{parentName:"p"},"ifconfig | grep net"),"(Mac or Linux) to check it."),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/26.png",style:{width:600,height:"auto"}})),(0,a.yg)("ol",{start:2},(0,a.yg)("li",{parentName:"ol"},"Use Type-C cable connect your computer to C6 and use Grove cable connect XIAO extension board ",(0,a.yg)("strong",{parentName:"li"},"I2C port")," to DHT20 sensor.")),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/hardware.jpeg",style:{width:600,height:"auto"}})),(0,a.yg)("ol",{start:3},(0,a.yg)("li",{parentName:"ol"},"Choose your development board.")),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/27.png",style:{width:1e3,height:"auto"}})),(0,a.yg)("ol",{start:4},(0,a.yg)("li",{parentName:"ol"},"Upload the code and open serial monitor. ")),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/28.png",style:{width:1e3,height:"auto"}})),(0,a.yg)("ol",{start:5},(0,a.yg)("li",{parentName:"ol"},"Open your Windows PowerShell that running kafka. Now you will see enviroment data is sending to Kafka. Congratulations! You run this project successfully!")),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_esp32c6_kafka/29.png",style:{width:1e3,height:"auto"}})),(0,a.yg)("h2",{id:"resources"},"Resources"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"[Link]")," ",(0,a.yg)("a",{parentName:"li",href:"https://kafka.apache.org/"},"Apache Kafka Introduction"))),(0,a.yg)("h2",{id:"tech-support--product-discussion"},"Tech Support & Product Discussion"),(0,a.yg)("p",null,"Thank you for choosing our products! We are here to provide you with different support to ensure that your experience with our products is as smooth as possible. We offer several communication channels to cater to different preferences and needs."),(0,a.yg)("div",{class:"table-center"},(0,a.yg)("div",{class:"button_tech_support_container"},(0,a.yg)("a",{href:"https://forum.seeedstudio.com/",class:"button_forum"}),(0,a.yg)("a",{href:"https://www.seeedstudio.com/contacts",class:"button_email"})),(0,a.yg)("div",{class:"button_tech_support_container"},(0,a.yg)("a",{href:"https://discord.gg/eWkprNDMU7",class:"button_discord"}),(0,a.yg)("a",{href:"https://github.com/Seeed-Studio/wiki-documents/discussions/69",class:"button_discussion"}))))}g.isMDXComponent=!0}}]);