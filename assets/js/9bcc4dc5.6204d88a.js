"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[84804],{15680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>m});var i=n(96540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},g="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),g=c(n),u=o,m=g["".concat(l,".").concat(u)]||g[u]||p[u]||a;return n?i.createElement(m,r(r({ref:t},d),{},{components:n})):i.createElement(m,r({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,r=new Array(a);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[g]="string"==typeof e?e:o,r[1]=s;for(var c=2;c<a;c++)r[c]=n[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},51809:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var i=n(58168),o=(n(96540),n(15680));const a={description:"Getting started for the Grove Offline Voice Recognition sensor.",title:"Grove Offline Voice Recognition sensor",keywords:["gesture"],image:"https://files.seeedstudio.com/wiki/seeed_logo/logo_2023.png",slug:"/Grove-Offline-Voice-Recognition",last_update:{date:"01/02/2024",author:"Allen"}},r="Grove Offline Voice Recognition",s={unversionedId:"Sensor/Grove/Grove_Sensors/Sound/Grove-Offline-Voice-Recognition",id:"Sensor/Grove/Grove_Sensors/Sound/Grove-Offline-Voice-Recognition",title:"Grove Offline Voice Recognition sensor",description:"Getting started for the Grove Offline Voice Recognition sensor.",source:"@site/docs/Sensor/Grove/Grove_Sensors/Sound/Grove-Offline-Voice-Recognition.md",sourceDirName:"Sensor/Grove/Grove_Sensors/Sound",slug:"/Grove-Offline-Voice-Recognition",permalink:"/Grove-Offline-Voice-Recognition",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/Sensor/Grove/Grove_Sensors/Sound/Grove-Offline-Voice-Recognition.md",tags:[],version:"current",lastUpdatedBy:"Allen",lastUpdatedAt:1704153600,formattedLastUpdatedAt:"Jan 2, 2024",frontMatter:{description:"Getting started for the Grove Offline Voice Recognition sensor.",title:"Grove Offline Voice Recognition sensor",keywords:["gesture"],image:"https://files.seeedstudio.com/wiki/seeed_logo/logo_2023.png",slug:"/Grove-Offline-Voice-Recognition",last_update:{date:"01/02/2024",author:"Allen"}},sidebar:"ProductSidebar",previous:{title:"Grove - Recorder v2.0",permalink:"/Grove-Recorder_v2.0"},next:{title:"Grove - Touch Sensor",permalink:"/Grove-Touch_Sensor"}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Feature",id:"feature",level:3},{value:"Specifications",id:"specifications",level:3},{value:"Getting started",id:"getting-started",level:2},{value:"demo1: Grove offline voice recognition module with Arduino IDE",id:"demo1-grove-offline-voice-recognition-module-with-arduino-ide",level:3},{value:"Hardware setup",id:"hardware-setup",level:4},{value:"<strong>Software Setup</strong>",id:"software-setup",level:4},{value:"Offline voice recognition demo",id:"offline-voice-recognition-demo",level:4},{value:"demo2: Grove offline voice recognition with ESPHome and Home Assistant",id:"demo2-grove-offline-voice-recognition-with-esphome-and-home-assistant",level:3},{value:"Hardware setup",id:"hardware-setup-1",level:4},{value:"Software",id:"software",level:4},{value:"Offline voice recognition",id:"offline-voice-recognition",level:4},{value:"Resources",id:"resources",level:2},{value:"Tech Support &amp; Product Discussion",id:"tech-support--product-discussion",level:2}],d={toc:c},g="wrapper";function p(e){let{components:t,...n}=e;return(0,o.yg)(g,(0,i.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"grove-offline-voice-recognition"},"Grove Offline Voice Recognition"),(0,o.yg)("div",{style:{textAlign:"center"}},(0,o.yg)("img",{src:"https://files.seeedstudio.com/wiki/Offline_Voice_Recognition_Img/headPic.jpg",style:{width:600,height:"auto"}})),(0,o.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,o.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Grove-Offline-Voice-Recognition-Module-p-5861.html"},(0,o.yg)("strong",null,(0,o.yg)("span",null,(0,o.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f"))))),(0,o.yg)("h2",{id:"introduction"},"Introduction"),(0,o.yg)("p",null,"Grove - Offline Voice recognition Module is apt for low power pure-offline voice recognition, based on VC-02 module. It has up to 150 pre-programmed commands that can be used to control your smart appliances. It features an identification time less than 100ms, in a compact form factor of 18mm * 17mm. The module can communicate through the UART peripheral and provide unique Hex Code to each recognised command. All this module needs is 5V and it's ready to recognise the commands!"),(0,o.yg)("h3",{id:"feature"},"Feature"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"Supports 150 voice commands")," "),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"Low power consumption")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"ESD protected power rails")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"LED indicators for commands")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"Grove UART interface"))),(0,o.yg)("h3",{id:"specifications"},"Specifications"),(0,o.yg)("table",{align:"center"},(0,o.yg)("tbody",null,(0,o.yg)("tr",null,(0,o.yg)("td",null,(0,o.yg)("h4",null,"Parameter")),(0,o.yg)("td",null,(0,o.yg)("h4",null,"Range/Value"))),(0,o.yg)("tr",null,(0,o.yg)("td",null,"Input Voltage"),(0,o.yg)("td",null,"5V/3.3V")),(0,o.yg)("tr",null,(0,o.yg)("td",null,"Default BaudRate"),(0,o.yg)("td",null,"115200")),(0,o.yg)("tr",null,(0,o.yg)("td",null,"Default Output"),(0,o.yg)("td",null,"Hex values of detected command")))),(0,o.yg)("h2",{id:"getting-started"},"Getting started"),(0,o.yg)("h3",{id:"demo1-grove-offline-voice-recognition-module-with-arduino-ide"},"demo1: Grove offline voice recognition module with Arduino IDE"),(0,o.yg)("h4",{id:"hardware-setup"},"Hardware setup"),(0,o.yg)("p",null,"You need to prepare the following:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.seeedstudio.com/XIAO-RP2040-v1-0-p-5026.html"},"Seeed Studio XIAO RP2040")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.seeedstudio.com/Grove-Shield-for-Seeeduino-XIAO-p-4621.html"},"Grove Base for XIAO")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/Grove-Offline-Voice-Recognition"},"Grove - Offline Speech Recognizer")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.seeedstudio.com/Mono-Enclosed-Speaker-2W-6-Ohm-p-2832.html"},"Speaker"))),(0,o.yg)("admonition",{type:"tip"},(0,o.yg)("p",{parentName:"admonition"},"Some USB cables can only supply power and cannot transfer data. If you don't have a USB cable or don't know if your USB cable can transmit data, you can check ",(0,o.yg)("a",{parentName:"p",href:"https://www.seeedstudio.com/USB-3-1-Type-C-to-A-Cable-1-Meter-3-1A-p-4085.html"},"Seeed USB Type-C support USB 3.1"),".")),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Step 1.")," Connect XIAO RP2040 to your computer via a USB Type-C cable."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Step 2.")," Connect XIAO RP2040 to XIAO expension board."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Step 3.")," Connect XIAO expension board to Offline Speech Recognizer on UART port via Grove cable."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Step 4.")," Connect Offline Speech Recognizer to a speaker."),(0,o.yg)("p",null,"Here is the connecting picture for your reference."),(0,o.yg)("div",{style:{textAlign:"center"}},(0,o.yg)("img",{src:"https://files.seeedstudio.com/wiki/Offline_Voice_Recognition_Img/connection.png",style:{width:1e3,height:"auto"}})),(0,o.yg)("h4",{id:"software-setup"},(0,o.yg)("strong",{parentName:"h4"},"Software Setup")),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Step 1.")," Download and Install the latest version of Arduino IDE according to your operating system"),(0,o.yg)("p",{style:{textAlign:"center"}},(0,o.yg)("a",{href:"https://www.arduino.cc/en/software",target:"_blank"},(0,o.yg)("img",{src:"https://files.seeedstudio.com/wiki/XIAO-RP2040/img/Download_IDE.png"}))),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Step 2.")," Select your development board model and add it to the Arduino IDE. If you want to use ",(0,o.yg)("strong",{parentName:"p"},"XIAO RP2040")," for the later routines, please refer to ",(0,o.yg)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/XIAO-RP2040-with-Arduino/#software-setup"},"this tutorial")," to finish adding."),(0,o.yg)("admonition",{type:"tip"},(0,o.yg)("p",{parentName:"admonition"},"If you want to use other types of XIAO, you can refer ",(0,o.yg)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/xiao_topic_page/"},"here"),".")),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Step 3.")," Install the Arduino code library."),(0,o.yg)("p",null,"Start by getting the code base from ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/Seeed-Projects/SeeedStudio-Grove_offline_voice_recognition_sensor"},"GitHub")," and downloading it to your local computer."),(0,o.yg)("div",{style:{textAlign:"center"}},(0,o.yg)("img",{src:"https://files.seeedstudio.com/wiki/Offline_Voice_Recognition_Img/1.png",style:{width:1e3,height:"auto"}})),(0,o.yg)("p",null,"Since you have downloaded the zip Library, open your Arduino IDE, click on ",(0,o.yg)("strong",{parentName:"p"},"Sketch > Include Library > Add .ZIP Library"),". Choose the zip file you just downloaded\uff0cand if the library install correct, you will see ",(0,o.yg)("strong",{parentName:"p"},"Library added to your libraries")," in the notice window. Which means the library is installed successfully."),(0,o.yg)("div",{style:{textAlign:"center"}},(0,o.yg)("img",{src:"https://files.seeedstudio.com/wiki/Offline_Voice_Recognition_Img/2.png",style:{width:1e3,height:"auto"}})),(0,o.yg)("h4",{id:"offline-voice-recognition-demo"},"Offline voice recognition demo"),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Step 1.")," Open this file in your Arduino."),(0,o.yg)("div",{style:{textAlign:"center"}},(0,o.yg)("img",{src:"https://files.seeedstudio.com/wiki/Offline_Voice_Recognition_Img/3.png",style:{width:1e3,height:"auto"}})),(0,o.yg)("p",null,"You will see the code like below."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},'#include "GroveOfflineSensor.h"\n#include <SoftwareSerial.h>\n#define RX_VC02 D7\n#define TX_VC02 D6\n\nSoftwareSerial groveSerial(RX_VC02, TX_VC02); // RX, TX\n\nvoid setup() {\n  Serial.begin(115200);\n  // wait for serial port to connect. Needed for native USB port only , This port is for displaying data Grove Sensor sends\n  while (!Serial); \n  // Make sure to set the baud rate to match your communication\n  groveSerial.begin(115200); \n}\n\nvoid loop() {\n  // detect voice from voice recognition sensor\n   uint8_t *voiceData = detectVoiceFromGroveSensor(&groveSerial);\n\n  //transfer the voice to command string\n  if(voiceData != NULL){\n    String response = getCommandInString(voiceData);\n    Serial.println(response);\n  }\n  delay(1000);\n}\n\n')),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Step 2.")," Click the ",(0,o.yg)("strong",{parentName:"p"},"Upload")," button to upload the code to the board"),(0,o.yg)("div",{style:{textAlign:"center"}},(0,o.yg)("img",{src:"https://files.seeedstudio.com/wiki/Offline_Voice_Recognition_Img/5.png",style:{width:1e3,height:"auto"}})),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Step 3."),' Say the wake word "hello pudding" to the sensor and then you will hear voice feedback from speaker and words feedback from serial monitor on Arduino IDE. For more instructions, your can find in ',(0,o.yg)("strong",{parentName:"p"},"Resources")," which located in bottom part of this article."),(0,o.yg)("iframe",{width:"100%",height:"460",src:"https://files.seeedstudio.com/wiki/Offline_Voice_Recognition_Img/offlineVoiceRecognition.mp4",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true"}," "),(0,o.yg)("h3",{id:"demo2-grove-offline-voice-recognition-with-esphome-and-home-assistant"},"demo2: Grove offline voice recognition with ESPHome and Home Assistant"),(0,o.yg)("h4",{id:"hardware-setup-1"},"Hardware setup"),(0,o.yg)("p",null,"you need to prepare the following:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"A device installed Home Assistant"))),(0,o.yg)("p",null,"The first step to getting started with Home Assistant is to install it on a device, you can follow ",(0,o.yg)("a",{parentName:"p",href:"https://www.home-assistant.io/installation/"},"here")," for step-by-step guide."),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.seeedstudio.com/XIAO-ESP32S3-p-5627.html"},"XIAO-ESP32S3")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.seeedstudio.com/Grove-Shield-for-Seeeduino-XIAO-p-4621.html"},"Grove Base for XIAO")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.seeedstudio.com/Grove-Offline-Voice-Recognition-Module-p-5861.html"},"Grove - Offline Speech Recognizer Module"))),(0,o.yg)("admonition",{type:"tip"},(0,o.yg)("p",{parentName:"admonition"},"Some USB cables can only supply power and cannot transfer data. If you don't have a USB cable or don't know if your USB cable can transmit data, you can check ",(0,o.yg)("a",{parentName:"p",href:"https://www.seeedstudio.com/USB-3-1-Type-C-to-A-Cable-1-Meter-3-1A-p-4085.html"},"Seeed USB Type-C support USB 3.1"),".")),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Step 1.")," Hardware Preparation"),(0,o.yg)("p",null,"Connect XIAO ESP32S3 to your computer via a USB Type-C cable.\nConnect XIAO ESP32S3 to XIAO expension board.\nConnect XIAO expension board to Offline Speech Recognizer on UART port via Grove cable.\nConnect Offline Speech Recognizer to a speaker.\nConnect antenna to XIAO ESP32S3."),(0,o.yg)("p",null,"Here is the connecting picture for your reference."),(0,o.yg)("div",{style:{textAlign:"center"}},(0,o.yg)("img",{src:"https://files.seeedstudio.com/wiki/Offline_Voice_Recognition_Img/29.jpg",style:{width:700,height:"auto"}})),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Step 2.")," Create your smart home\nEntered the Home Assistant device\u2019s address in your browser\u2019s address bar, and create a Home Assistant account, you can follow ",(0,o.yg)("a",{parentName:"p",href:"https://www.home-assistant.io/getting-started/onboarding/"},"here")," for step-by-step guide."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Step 3.")," Install ESPHome on Home Assistant\nYou can quickly setup ESPHome on Home Asssistant by follow ",(0,o.yg)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/Connect-Grove-to-Home-Assistant-ESPHome/#install-esphome-on-home-assistant"},"here")),(0,o.yg)("h4",{id:"software"},"Software"),(0,o.yg)("p",null," Add XIAO ESP32S3 to ESPHome"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"Click ",(0,o.yg)("strong",{parentName:"p"},"+ NEW DEVICE")),(0,o.yg)("div",{style:{textAlign:"center"}},(0,o.yg)("img",{src:"https://files.seeedstudio.com/wiki/Offline_Voice_Recognition_Img/6.png",style:{width:1e3,height:"auto"}}))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"Click ",(0,o.yg)("strong",{parentName:"p"},"CONTINUE")))),(0,o.yg)("div",{style:{textAlign:"center"}},(0,o.yg)("img",{src:"https://files.seeedstudio.com/wiki/Offline_Voice_Recognition_Img/7.png",style:{width:500,height:"auto"}})),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Enter a ",(0,o.yg)("strong",{parentName:"li"},"Name")," for the device and enter WiFi credentials such as ",(0,o.yg)("strong",{parentName:"li"},"Network name")," and ",(0,o.yg)("strong",{parentName:"li"},"Password"),". Then click ",(0,o.yg)("strong",{parentName:"li"},"NEXT"),".")),(0,o.yg)("div",{style:{textAlign:"center"}},(0,o.yg)("img",{src:"https://files.seeedstudio.com/wiki/Offline_Voice_Recognition_Img/8.png",style:{width:500,height:"auto"}})),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"Select ",(0,o.yg)("strong",{parentName:"p"},"ESP32-S3")," and click NEXT"),(0,o.yg)("div",{style:{textAlign:"center"}},(0,o.yg)("img",{src:"https://files.seeedstudio.com/wiki/Offline_Voice_Recognition_Img/9.png",style:{width:500,height:"auto"}}))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"Click ",(0,o.yg)("strong",{parentName:"p"},"Install")," and choose ",(0,o.yg)("strong",{parentName:"p"},"Manual download"),"."),(0,o.yg)("div",{style:{textAlign:"center"}},(0,o.yg)("img",{src:"https://files.seeedstudio.com/wiki/Offline_Voice_Recognition_Img/11.png",style:{width:800,height:"auto"}}))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"After download successfully, Open ESPHome Web and choose ",(0,o.yg)("strong",{parentName:"p"},"Modern format"),"."))),(0,o.yg)("div",{style:{textAlign:"center"}},(0,o.yg)("img",{src:"https://files.seeedstudio.com/wiki/Offline_Voice_Recognition_Img/13.png",style:{width:1e3,height:"auto"}})),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Connect port of your XIAO ESP32S3, and install the bin.file you just got, now it will download all the necessary board packages and flash the ESPHome firmware into the XIAO ESP32S3. ")),(0,o.yg)("div",{style:{textAlign:"center"}},(0,o.yg)("img",{src:"https://files.seeedstudio.com/wiki/Offline_Voice_Recognition_Img/16.png",style:{width:500,height:"auto"}})),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Open the LOGS, if the flashing is successful, you will see the follow output, and now go back ESPHome page, if you see the board status as ONLINE, that means the board is successful connected to WiFi.",(0,o.yg)("div",{style:{textAlign:"center"}},(0,o.yg)("img",{src:"https://files.seeedstudio.com/wiki/Offline_Voice_Recognition_Img/28.png",style:{width:1e3,height:"auto"}})))),(0,o.yg)("admonition",{type:"tip"},(0,o.yg)("p",{parentName:"admonition"},'If you get the wanning that "',"[wifi_esp32:482][arduino_events]",": Event: Disconnected \u2026\u2026 reason='Auth Expired'\", please ensure that the ESP32 device is within range of the WiFi network, poor signal strength can cause connection issues. You can replace your antenna to ",(0,o.yg)("a",{parentName:"p",href:"https://www.seeedstudio.com/2-4GHz-2-81dBi-Antenna-for-XIAO-ESP32C3-p-5475.html"},"Rod Antenna"),".")),(0,o.yg)("p",null,"Now you can disconnect the XIAO ESP32C3 from the computer and just power it via a USB cable. This is because from now on, if you want to flash firmware to the XIAO ESP32C3, you can simply do it OTA without connecting to the X86 board via a USB cable."),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"Click the three dots and click Install, Select Wirelessly and it will push the changes to the board wirelessly"),(0,o.yg)("div",{style:{textAlign:"center"}},(0,o.yg)("img",{src:"https://files.seeedstudio.com/wiki/Offline_Voice_Recognition_Img/25.png",style:{width:700,height:"auto"}}))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"Go to Settings and select Devices & Services,You will see ESPHome as a discovered integration. Click CONFIGURE. If it ask for the encryption key, go back to ESPHome page to copy the API Key and enter it."),(0,o.yg)("div",{style:{textAlign:"center"}},(0,o.yg)("img",{src:"https://files.seeedstudio.com/wiki/Offline_Voice_Recognition_Img/24.png",style:{width:600,height:"auto"}})))),(0,o.yg)("h4",{id:"offline-voice-recognition"},"Offline voice recognition"),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Step1.")," Inside the offline-voice-recognition.yaml file that we created before, add the following at the ",(0,o.yg)("strong",{parentName:"p"},"end of the file")," and push it OTA to XIAO ESP32S3"),(0,o.yg)("details",null,(0,o.yg)("summary",null,"Click here to preview the full code"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-yaml"},'uart:\n  id: uart_bus\n  tx_pin: GPIO43\n  rx_pin: GPIO44\n  baud_rate: 115200\n\nglobals:\n  - id: hex_code\n    type: uint8_t\n    restore_value: no\n    initial_value: \'0\'\n\ninterval:\n  - interval: 1s\n    then:\n      - lambda: |-\n          while (id(uart_bus).available() >= 5) {\n            uint8_t receivedData[5];\n            for (int i = 0; i < 5; i++) {\n              id(uart_bus).read_byte(&receivedData[i]);\n            }\n            id(hex_code) = receivedData[1];\n            ESP_LOGD("main", "Hex code: %02X", id(hex_code));\n          }\n\nsensor:\n  - platform: template\n    name: "Received Hex Code"\n    lambda: |-\n      return id(hex_code);\n    update_interval: 5s\n    unit_of_measurement: ""\n    accuracy_decimals: 0\n    on_value:\n      then:\n        - lambda: |-\n            auto call_acwind = id(acwind).make_call();\n            auto call_actemp = id(actemp).make_call();\n              switch (id(hex_code)) {\n                case 0x03:\n                  id(ac).publish_state(true);\n                  break;\n                case 0x04:\n                  id(ac).publish_state(false);\n                  break;\n                case 0x05:\n                  id(acmode).publish_state("automatic mode");\n                  break;\n                case 0x06:\n                  id(acmode).publish_state("cold mode");\n                  break;\n                case 0x07:\n                  id(acmode).publish_state("heat mode");\n                  break;\n                case 0x08:\n                  id(acmode).publish_state("dry mode");\n                  break;\n                case 0x09:\n                  id(acmode).publish_state("fan mode");\n                  break;\n                case 0x0A:\n                  id(acmode).publish_state("sleeping mode");\n                  break;\n                case 0x0B:\n                  id(acwind).publish_state("automatic fan");\n                  break;\n                case 0x0C:\n                  id(acwind).publish_state("low fan");\n                  break;\n                case 0x0D:\n                  id(acwind).publish_state("medium fan");\n                  break;\n                case 0x0E:\n                  id(acwind).publish_state("high fan");\n                  break;\n                case 0x0F:\n                  call_acwind.select_next(false);\n                  call_acwind.perform();\n                  break;\n                case 0x10:\n                  call_acwind.select_previous(false);\n                  call_acwind.perform();\n                  break;\n                case 0x11:\n                  id(actemp).publish_state("sixteen centigrade");\n                  break;\n                case 0x12:\n                  id(actemp).publish_state("seventeen centigrade");\n                  break;\n                case 0x13:\n                  id(actemp).publish_state("eighteen centigrade");\n                  break;\n                case 0x14:\n                  id(actemp).publish_state("nineteen centigrade");\n                  break;\n                case 0x15:\n                  id(actemp).publish_state("twenty centigrade");\n                  break;\n                case 0x16:\n                  id(actemp).publish_state("twenty one centigrade");\n                  break;\n                case 0x17:\n                  id(actemp).publish_state("twenty two centigrade");\n                  break;\n                case 0x18:\n                  id(actemp).publish_state("twenty three centigrade");\n                  break;\n                case 0x19:\n                  id(actemp).publish_state("twenty four centigrade");\n                  break;\n                case 0x1A:\n                  id(actemp).publish_state("twenty five centigrade");\n                  break;\n                case 0x1B:\n                  id(actemp).publish_state("twenty six centigrade");\n                  break;\n                case 0x1C:\n                  id(actemp).publish_state("twenty seven centigrade");\n                  break;\n                case 0x1D:\n                  id(actemp).publish_state("twenty eight centigrade");\n                  break;\n                case 0x1E:\n                  id(actemp).publish_state("twenty nine centigrade");\n                  break;\n                case 0x1F:\n                  id(actemp).publish_state("thirty centigrade");\n                  break;\n                case 0x20:\n                  call_actemp.select_next(false);\n                  call_actemp.perform();\n                  break;\n                case 0x21:\n                  call_actemp.select_previous(false);\n                  call_actemp.perform();\n                  break;\n                case 0x22:\n                  id(fan).publish_state(true);\n                  break;\n                case 0x23:\n                  id(fan).publish_state(false);\n                  break;\n                case 0x24:\n                  id(acswept).publish_state("air swing up and down");\n                  break;\n                case 0x25:\n                  id(acswept).publish_state("air swing left and right");\n                  break;\n                case 0x26:\n                  id(acmode).publish_state("automatic mode");\n                  id(acwind).publish_state("automatic fan");\n                  id(actemp).publish_state("twenty six centigrade");\n                  id(fan).publish_state(false);\n                  break;\n                case 0x27:\n                  id(light).publish_state(true);\n                  break;\n                case 0x28:\n                  id(light).publish_state(false);\n                  break;\n                case 0x29:\n                  id(cold_light).publish_state(true);\n                  break;\n                case 0x2A:\n                  id(cold_light).publish_state(false);\n                  break;\n                case 0x2B:\n                  id(warm_light).publish_state(true);\n                  break;\n                case 0x2C:\n                  id(warm_light).publish_state(false);\n                  break;\n                default:\n                  ESP_LOGW("main", "Unknown hex code: %02X", id(hex_code));\n                  break;\n              }\n\nswitch:\n  - platform: template\n    name: "air conditioner"\n    id: ac\n    optimistic: True\n  - platform: template\n    name: "fan"\n    id: fan\n    optimistic: True\n  - platform: template\n    name: "light"\n    id: light\n    optimistic: True\n  - platform: template\n    name: "cold light"\n    id: cold_light\n    optimistic: True\n  - platform: template\n    name: "warm light"\n    id: warm_light\n    optimistic: True\n  \nselect:\n\n  - platform: template\n    name: Air conditioner mode\n    id: acmode\n    optimistic: True\n    options:\n      - "automatic mode"\n      - "cold mode"\n      - "heat mode"\n      - "dry mode"\n      - "fan mode"\n      - "sleeping mode"\n    initial_option: "automatic mode"  \n\n  - platform: template\n    name: Fan mode \n    id: acwind\n    optimistic: True\n    options:\n      - "automatic fan"\n      - "low fan"\n      - "medium fan"\n      - "high fan"\n    initial_option: "automatic fan"\n\n  - platform: template\n    name: Temperature\n    id: actemp\n    optimistic: True\n    options:\n      - "sixteen centigrade"\n      - "seventeen centigrade"\n      - "eighteen centigrade"\n      - "nineteen centigrade"\n      - "twenty centigrade"\n      - "twenty one centigrade"\n      - "twenty two centigrade"\n      - "twenty three centigrade"\n      - "twenty four centigrade"\n      - "twenty five centigrade"\n      - "twenty six centigrade"\n      - "twenty seven centigrade"\n      - "twenty eight centigrade"\n      - "twenty nine centigrade"\n      - "thirty centigrade"\n    initial_option: "twenty six centigrade"\n\n  - platform: template\n    name: Fan direction\n    id: acswept\n    optimistic: True\n    options: \n      - "air swing up and down"\n      - "air swing left and right"\n'))),(0,o.yg)("admonition",{type:"note"},(0,o.yg)("p",{parentName:"admonition"},"When we create a new device, the yaml.file that automatically generated will be vary because of different configuration and device type, so we recommend ",(0,o.yg)("strong",{parentName:"p"},"not changing the beginning of file"),", and just adding the code at the end.")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"You can learn more about ",(0,o.yg)("strong",{parentName:"li"},"Uart Bus")," ",(0,o.yg)("a",{parentName:"li",href:"https://esphome.io/components/uart"},"here")),(0,o.yg)("li",{parentName:"ul"},"You can learn more about ",(0,o.yg)("strong",{parentName:"li"},"Switch Component")," ",(0,o.yg)("a",{parentName:"li",href:"https://esphome.io/components/switch/"},"here")),(0,o.yg)("li",{parentName:"ul"},"You can learn more about ",(0,o.yg)("strong",{parentName:"li"},"Select Component")," ",(0,o.yg)("a",{parentName:"li",href:"https://esphome.io/components/select/"},"here"))),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Step2.")," Visualize on Dashboard"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Now go back the Devices, choose the offline voice recognition",(0,o.yg)("div",{style:{textAlign:"center"}},(0,o.yg)("img",{src:"https://files.seeedstudio.com/wiki/Offline_Voice_Recognition_Img/23.png",style:{width:1e3,height:"auto"}})))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Click ",(0,o.yg)("strong",{parentName:"li"},"ADD TO DASHBOARD"),"\u2192",(0,o.yg)("strong",{parentName:"li"},"NEXT"),"\u2192",(0,o.yg)("strong",{parentName:"li"},"ADD TO DASHBOARD"),", and back to ",(0,o.yg)("strong",{parentName:"li"},"OVERVIEW"),", now your Home Assistant dashboard will look like below")),(0,o.yg)("div",{style:{textAlign:"center"}},(0,o.yg)("img",{src:"https://files.seeedstudio.com/wiki/Offline_Voice_Recognition_Img/27.png",style:{width:600,height:"auto"}})),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Step3."),' Say the wake word "hello pudding" to the sensor and then you will hear voice feedback and see action feedback on the Home Assistant. For more instructions, your can find in ',(0,o.yg)("strong",{parentName:"p"},"Resources")," which located in bottom part of this article."),(0,o.yg)("iframe",{width:"100%",height:"460",src:"https://files.seeedstudio.com/wiki/Offline_Voice_Recognition_Img/1.mp4",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true"}," "),(0,o.yg)("h2",{id:"resources"},"Resources"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"[PDF]")," ",(0,o.yg)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/Offline_Voice_Recognition_Img/VoiceCommends.pdf"},"Offline Voice Commends"))),(0,o.yg)("h2",{id:"tech-support--product-discussion"},"Tech Support & Product Discussion"),(0,o.yg)("p",null,"Thank you for choosing our products! We are here to provide you with different support to ensure that your experience with our products is as smooth as possible. We offer several communication channels to cater to different preferences and needs."),(0,o.yg)("div",{class:"button_tech_support_container"},(0,o.yg)("a",{href:"https://forum.seeedstudio.com/",class:"button_forum"}),(0,o.yg)("a",{href:"https://www.seeedstudio.com/contacts",class:"button_email"})),(0,o.yg)("div",{class:"button_tech_support_container"},(0,o.yg)("a",{href:"https://discord.gg/eWkprNDMU7",class:"button_discord"}),(0,o.yg)("a",{href:"https://github.com/Seeed-Studio/wiki-documents/discussions/69",class:"button_discussion"})))}p.isMDXComponent=!0}}]);