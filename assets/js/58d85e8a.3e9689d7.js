"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[65159],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,g=c["".concat(s,".").concat(m)]||c[m]||u[m]||r;return n?i.createElement(g,o(o({ref:t},d),{},{components:n})):i.createElement(g,o({ref:t},d))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var i=n(67294),a=n(86010);const r={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:n,className:o}=e;return i.createElement("div",{role:"tabpanel",className:(0,a.Z)(r.tabItem,o),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>y});var i=n(87462),a=n(67294),r=n(86010),o=n(12466),l=n(16550),s=n(91980),p=n(67392),d=n(50012);function c(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:i,default:a}}=e;return{value:t,label:n,attributes:i,default:a}}))}function u(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??c(n);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const i=(0,l.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(r),(0,a.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(i.location.search);t.set(r,e),i.replace({...i.location,search:t.toString()})}),[r,i])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:i}=e,r=u(e),[o,l]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const i=n.find((e=>e.default))??n[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:t,tabValues:r}))),[s,p]=g({queryString:n,groupId:i}),[c,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[i,r]=(0,d.Nk)(n);return[i,(0,a.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:i}),f=(()=>{const e=s??c;return m({value:e,tabValues:r})?e:null})();(0,a.useLayoutEffect)((()=>{f&&l(f)}),[f]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),h(e)}),[p,h,r]),tabValues:r}}var f=n(72389);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function k(e){let{className:t,block:n,selectedValue:l,selectValue:s,tabValues:p}=e;const d=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.o5)(),u=e=>{const t=e.currentTarget,n=d.indexOf(t),i=p[n].value;i!==l&&(c(t),s(i))},m=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;t=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;t=d[n]??d[d.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:o}=e;return a.createElement("li",(0,i.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>d.push(e),onKeyDown:m,onClick:u},o,{className:(0,r.Z)("tabs__item",v.tabItem,o?.className,{"tabs__item--active":l===t})}),n??t)})))}function S(e){let{lazy:t,children:n,selectedValue:i}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===i));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==i}))))}function b(e){const t=h(e);return a.createElement("div",{className:(0,r.Z)("tabs-container",v.tabList)},a.createElement(k,(0,i.Z)({},e,t)),a.createElement(S,(0,i.Z)({},e,t)))}function y(e){const t=(0,f.Z)();return a.createElement(b,(0,i.Z)({key:String(t)},e))}},41936:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>g,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var i=n(87462),a=(n(67294),n(3905)),r=n(74866),o=n(85162);const l={title:"Using Grove Vision AI V2 with AT Commands",hide_title:!1,description:"This guide shows how to use the Grove Vision AI V2 with AT commands.",keywords:["Vision","Grove","AT","SSCMA"],image:"https://files.seeedstudio.com/wiki/visionai-v2-ha/43.jpg",slug:"/grove_vision_ai_v2_at",last_update:{date:"04/22/2024",author:"Spencer"},mermaid:!0,toc_max_heading_level:3},s=void 0,p={unversionedId:"Sensor/Grove/Grove_Sensors/AI-powered/Grove-vision-ai-v2/Development/grove_vision_ai_v2_at_library",id:"Sensor/Grove/Grove_Sensors/AI-powered/Grove-vision-ai-v2/Development/grove_vision_ai_v2_at_library",title:"Using Grove Vision AI V2 with AT Commands",description:"This guide shows how to use the Grove Vision AI V2 with AT commands.",source:"@site/docs/Sensor/Grove/Grove_Sensors/AI-powered/Grove-vision-ai-v2/Development/grove_vision_ai_v2_at_library.md",sourceDirName:"Sensor/Grove/Grove_Sensors/AI-powered/Grove-vision-ai-v2/Development",slug:"/grove_vision_ai_v2_at",permalink:"/grove_vision_ai_v2_at",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/Sensor/Grove/Grove_Sensors/AI-powered/Grove-vision-ai-v2/Development/grove_vision_ai_v2_at_library.md",tags:[],version:"current",lastUpdatedBy:"Spencer",lastUpdatedAt:1713744e3,formattedLastUpdatedAt:"Apr 22, 2024",frontMatter:{title:"Using Grove Vision AI V2 with AT Commands",hide_title:!1,description:"This guide shows how to use the Grove Vision AI V2 with AT commands.",keywords:["Vision","Grove","AT","SSCMA"],image:"https://files.seeedstudio.com/wiki/visionai-v2-ha/43.jpg",slug:"/grove_vision_ai_v2_at",last_update:{date:"04/22/2024",author:"Spencer"},mermaid:!0,toc_max_heading_level:3},sidebar:"ProductSidebar",previous:{title:"Developing Grove Vision AI V2 using Himax SDK",permalink:"/grove_vision_ai_v2_himax_sdk"},next:{title:"Connect Grove Vision AI V2 to the SenseCAP Mate APP",permalink:"/connect_vision_ai_v2_to_sensecap_mate"}},d={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Firmware and AT Command Set",id:"firmware-and-at-command-set",level:2},{value:"Arduino Library",id:"arduino-library",level:3},{value:"Connect the Grove Vision AI V2",id:"connect-the-grove-vision-ai-v2",level:2},{value:"<em>Example 1:</em> Capture a image",id:"example-1-capture-a-image",level:2},{value:"Complete Code",id:"complete-code",level:3},{value:"<em>Example 2:</em> Get inference result",id:"example-2-get-inference-result",level:2},{value:"Complete Code",id:"complete-code-1",level:3},{value:"<em>Example 3:</em> Saving JPEG Images to SD Card",id:"example-3-saving-jpeg-images-to-sd-card",level:2},{value:"Complete Code",id:"complete-code-2",level:3},{value:"Base64 to JPEG Image",id:"base64tojpeg",level:2},{value:"Customization and SDK Development",id:"customization-and-sdk-development",level:2},{value:"FAQ &amp; Trouble Shooting",id:"faq--trouble-shooting",level:2},{value:"What is the function of invoke?",id:"faq_invoke",level:3},{value:"What does <code>AI.begin()</code> do?",id:"faq_begin",level:3},{value:"Resources",id:"resources",level:2},{value:"References",id:"references",level:2},{value:"Contributing",id:"contributing",level:2},{value:"Tech Support &amp; Product Discussion",id:"tech-support--product-discussion",level:2}],u={toc:c},m="wrapper";function g(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("div",{class:"table-center"},(0,a.kt)("table",{align:"center"},(0,a.kt)("tr",null,(0,a.kt)("th",null,"Grove Vision AI V2")),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("div",{style:{textAlign:"center"}},(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/visionai-v2-ha/43.jpg",style:{width:250,height:"auto"}})))),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,a.kt)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Grove-Vision-AI-Module-V2-p-5851.html"},(0,a.kt)("strong",null,(0,a.kt)("span",null,(0,a.kt)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f"))))))))),(0,a.kt)("p",null,"The Grove Vision AI V2 is a powerful AI camera module that allows users to deploy off-the-shelf models for vision applications. In addition to its AI capabilities, the Grove Vision AI V2 offers several hardware features and usage options to enhance its functionality and ease of use."),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://mermaid.ink/svg/pako:eNp1kk9vozAQxb_KyCciRSi4aRe4RemfXWmrVpuqh4qL155St-CJjMk2G-W7r02AZKXmNr_3xuN5mB2TpJDlrNZG1WJdGABL5KLoztIG4Vk3mgw888kkWABLqsheo0PpvBF1CCP3TQA_tcFbqir6o00ZBYIRxyZFroniOO6Fh9_vfsovlFQa3U0_KHAijWe_U42L1lEtus6AcOSxbVUL6xZSYtMsyThLVdRJcNCgF8-tBHCzQeOerC5LtKjCJlaFSJ0OowGj05-8FRJPowT-Msgj2oaMqH4oP1C_atkFWKFsrXbbaLDhfx-GhgkMg_r0qJZt4yu0K7QbLTEaDRgc6K1zse8p3HF85QN_8cxPb_jqFpWwddSV0NXHnR7R3ZMPTDZ8M09wxHOXnyCbMr9tLbTyf-gu2AVzb1hjwXJfKmE_ClaYve8TPuRqayTLnW1xytq18pGvtSitqAdxLcwL0SmyfMc-Wc7jS55m6cXFFU-yNJ0lU7ZlecKTePYtm3vmPMtmfD9lf7vzszg0Z_wyu-LzeZrw_T852RLp",alt:null})),(0,a.kt)("p",null,"In this page, we will focus on guiding users on ",(0,a.kt)("strong",{parentName:"p"},"how to effectively utilize the Arduino library")," specifically designed for the Grove Vision AI V2. We will cover the installation process, key features, and provide practical examples demonstrating how to use the library functions to control and configure the module, enabling users to create innovative vision-based applications with ease."),(0,a.kt)("h2",{id:"firmware-and-at-command-set"},"Firmware and AT Command Set"),(0,a.kt)("p",null,"The Grove Vision AI V2 comes with pre-installed firmware that supports an AT command set. This command set allows users to control and configure the module's functionality without the need for complex programming environments."),(0,a.kt)("p",null,"The AT command set specification can be found at ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Seeed-Studio/SSCMA-Micro"},"SSCMA-Micro"),". It's important to note that the AT command set may evolve over time, and newer firmware versions may include additional commands. It is recommended to keep the firmware updated to access the latest features."),(0,a.kt)("p",{style:{textAlign:"center"}},(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/grove-vision-ai-v2/dev/at-diagram.png",alt:"at diagram",width:420,height:"auto"})),(0,a.kt)("div",{class:"github_container",style:{textAlign:"center"}},(0,a.kt)("a",{class:"github_item",href:"https://github.com/Seeed-Studio/SSCMA-Micro/blob/dev/docs/protocol/at_protocol.md"},(0,a.kt)("strong",null,(0,a.kt)("span",null,(0,a.kt)("font",{color:"FFFFFF",size:"4"},"Check AT Protocol")))," ",(0,a.kt)("svg",{"aria-hidden":"true",focusable:"false",role:"img",className:"mr-2",viewBox:"-3 10 9 1",width:16,height:16,fill:"currentColor",style:{textAlign:"center",display:"inline-block",userSelect:"none",verticalAlign:"text-bottom",overflow:"visible"}},(0,a.kt)("path",{d:"M8 0c4.42 0 8 3.58 8 8a8.013 8.013 0 0 1-5.45 7.59c-.4.08-.55-.17-.55-.38 0-.27.01-1.13.01-2.2 0-.75-.25-1.23-.54-1.48 1.78-.2 3.65-.88 3.65-3.95 0-.88-.31-1.59-.82-2.15.08-.2.36-1.02-.08-2.12 0 0-.67-.22-2.2.82-.64-.18-1.32-.27-2-.27-.68 0-1.36.09-2 .27-1.53-1.03-2.2-.82-2.2-.82-.44 1.1-.16 1.92-.08 2.12-.51.56-.82 1.28-.82 2.15 0 3.06 1.86 3.75 3.64 3.95-.23.2-.44.55-.51 1.07-.46.21-1.61.55-2.33-.66-.15-.24-.6-.83-1.23-.82-.67.01-.27.38.01.53.34.19.73.9.82 1.13.16.45.68 1.31 2.69.94 0 .67.01 1.3.01 1.49 0 .21-.15.45-.55.38A7.995 7.995 0 0 1 0 8c0-4.42 3.58-8 8-8Z"})))),(0,a.kt)("h3",{id:"arduino-library"},"Arduino Library"),(0,a.kt)("p",null,"To simplify the usage of the AT command set and provide a user-friendly interface, an Arduino library called ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Seeed-Studio/Seeed_Arduino_SSCMA"},"Seeed_Arduino_SSCMA")," is available. This library wraps the AT commands into easy-to-use functions, allowing users to quickly integrate the Grove Vision AI V2 into their Arduino projects."),(0,a.kt)("p",null,"The Arduino library maintains compatibility with the latest AT command set, ensuring a consistent and unified approach to interacting with the module. By utilizing this library, users can focus on developing their applications without worrying about the low-level details of the AT commands."),(0,a.kt)("div",{class:"github_container",style:{textAlign:"center"}},(0,a.kt)("a",{class:"github_item",href:"https://github.com/Seeed-Studio/Seeed_Arduino_SSCMA"},(0,a.kt)("strong",null,(0,a.kt)("span",null,(0,a.kt)("font",{color:"FFFFFF",size:"4"},"Download the Library")))," ",(0,a.kt)("svg",{"aria-hidden":"true",focusable:"false",role:"img",className:"mr-2",viewBox:"-3 10 9 1",width:16,height:16,fill:"currentColor",style:{textAlign:"center",display:"inline-block",userSelect:"none",verticalAlign:"text-bottom",overflow:"visible"}},(0,a.kt)("path",{d:"M8 0c4.42 0 8 3.58 8 8a8.013 8.013 0 0 1-5.45 7.59c-.4.08-.55-.17-.55-.38 0-.27.01-1.13.01-2.2 0-.75-.25-1.23-.54-1.48 1.78-.2 3.65-.88 3.65-3.95 0-.88-.31-1.59-.82-2.15.08-.2.36-1.02-.08-2.12 0 0-.67-.22-2.2.82-.64-.18-1.32-.27-2-.27-.68 0-1.36.09-2 .27-1.53-1.03-2.2-.82-2.2-.82-.44 1.1-.16 1.92-.08 2.12-.51.56-.82 1.28-.82 2.15 0 3.06 1.86 3.75 3.64 3.95-.23.2-.44.55-.51 1.07-.46.21-1.61.55-2.33-.66-.15-.24-.6-.83-1.23-.82-.67.01-.27.38.01.53.34.19.73.9.82 1.13.16.45.68 1.31 2.69.94 0 .67.01 1.3.01 1.49 0 .21-.15.45-.55.38A7.995 7.995 0 0 1 0 8c0-4.42 3.58-8 8-8Z"})))),(0,a.kt)("h2",{id:"connect-the-grove-vision-ai-v2"},"Connect the Grove Vision AI V2"),(0,a.kt)(r.Z,{groupId:"grove_connect",mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"i2c",label:"Grove(I2C)",mdxType:"TabItem"},(0,a.kt)("p",{style:{textAlign:"center"}},(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/grove-vision-ai-v2/dev/i2c-connect.jpg",width:420,height:"auto"})),(0,a.kt)("p",null,"Using a grove cable to connect the Grove Vision AI V2 to any mcu board.")),(0,a.kt)(o.Z,{value:"uart",label:"XIAO-Compatible",default:!0,mdxType:"TabItem"},(0,a.kt)("p",{style:{textAlign:"center"}},(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/grove-vision-ai-v2/00.jpg",width:420,height:"auto"})),(0,a.kt)("p",null,"This way you can use not only ",(0,a.kt)("strong",{parentName:"p"},"UART")," but also ",(0,a.kt)("strong",{parentName:"p"},"I2C")," to establish a connection. "),(0,a.kt)("admonition",{title:"Serial Baudrate",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"For high responsiveness, Grove vision v2's serial baud rate is ",(0,a.kt)("inlineCode",{parentName:"p"},"921600")," by default.\nSo you'll need to use hardware serial instead of software serial to connect.")))),(0,a.kt)("h2",{id:"example-1-capture-a-image"},(0,a.kt)("em",{parentName:"h2"},"Example 1:")," Capture a image"),(0,a.kt)("admonition",{title:"the function of invoke?",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Check out ",(0,a.kt)("a",{parentName:"p",href:"#faq_invoke"},"invoke - FAQ"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'// invoke once, no filter, contain image\nif (!AI.invoke(1, false, true)){\n   if (AI.last_image().length() > 0){\n      Serial.print("Last image:");\n      Serial.println(AI.last_image());\n   }\n}\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"AI.last_image()")," is a string, which contains the image data(JPEG) encoded by base64. ",(0,a.kt)("a",{parentName:"p",href:"#base64tojpeg"},"\ud83d\uddb1\ufe0flearn how to parse it?")),(0,a.kt)("h3",{id:"complete-code"},"Complete Code"),(0,a.kt)(r.Z,{groupId:"grove_connect",mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"i2c",label:"Grove(I2C)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <Seeed_Arduino_SSCMA.h>\nSSCMA AI;\n\nvoid setup()\n{\n    AI.begin();\n    Serial.begin(9600);\n}\n\nvoid loop()\n{\n    // invoke once, no filter, get image\n    if (!AI.invoke(1, false, true)){\n        if (AI.last_image().length() > 0){\n            Serial.print("Last image:");\n            Serial.println(AI.last_image());\n        }\n    }\n}\n'))),(0,a.kt)(o.Z,{value:"xiao",label:"XIAO-Compatible (UART)",default:!0,mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <Seeed_Arduino_SSCMA.h>\n\n#ifdef ESP32\n#include <HardwareSerial.h>\n\n// Define two Serial devices mapped to the two internal UARTs\nHardwareSerial atSerial(0);\n\n#else\n#define atSerial Serial1\n#endif\n\nSSCMA AI;\n\nvoid setup()\n{\n   AI.begin(&atSerial);\n   Serial.begin(9600);\n}\n\nvoid loop()\n{\n    // invoke once, no filter, get image\n    if (!AI.invoke(1, false, true)){\n        if (AI.last_image().length() > 0){\n            Serial.print("Last image:");\n            Serial.println(AI.last_image());\n        }\n    }\n}\n<p style={{textAlign: \'center\'}}><img src="" width={420} height="auto" /></p>\n\n')))),(0,a.kt)("table",{align:"center"},(0,a.kt)("tr",null,(0,a.kt)("th",null,"Connect devices"),(0,a.kt)("th",null,"Upload firmware"),(0,a.kt)("th",null,"Monitor")),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("div",{style:{textAlign:"center"}},(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/grove-vision-ai-v2/dev/capture_image_connect.jpg",style:{width:500,height:"auto"}}))),(0,a.kt)("td",null,(0,a.kt)("div",{style:{textAlign:"center"}},(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/grove-vision-ai-v2/dev/capture_image_code.png",style:{width:500,height:"auto"}}))),(0,a.kt)("td",null,(0,a.kt)("div",{style:{textAlign:"center"}},(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/grove-vision-ai-v2/dev/capture_image_monitor.png",style:{width:500,height:"auto"}}))))),(0,a.kt)("h2",{id:"example-2-get-inference-result"},(0,a.kt)("em",{parentName:"h2"},"Example 2:")," Get inference result"),(0,a.kt)("h3",{id:"complete-code-1"},"Complete Code"),(0,a.kt)(r.Z,{groupId:"grove_connect",mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"i2c",label:"Grove(I2C)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <Seeed_Arduino_SSCMA.h>\n\nSSCMA AI;\n\nvoid setup() {\n  AI.begin();\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  if (!AI.invoke(1, false, false)) { // invoke once, no filter, not contain image\n    Serial.println("invoke success");\n    Serial.print("perf: prepocess=");\n    Serial.print(AI.perf().prepocess);\n    Serial.print(", inference=");\n    Serial.print(AI.perf().inference);\n    Serial.print(", postpocess=");\n    Serial.println(AI.perf().postprocess);\n\n    for (int i = 0; i < AI.boxes().size(); i++) {\n      Serial.print("Box[");\n      Serial.print(i);\n      Serial.print("] target=");\n      Serial.print(AI.boxes()[i].target);\n      Serial.print(", score=");\n      Serial.print(AI.boxes()[i].score);\n      Serial.print(", x=");\n      Serial.print(AI.boxes()[i].x);\n      Serial.print(", y=");\n      Serial.print(AI.boxes()[i].y);\n      Serial.print(", w=");\n      Serial.print(AI.boxes()[i].w);\n      Serial.print(", h=");\n      Serial.println(AI.boxes()[i].h);\n    }\n    for (int i = 0; i < AI.classes().size(); i++) {\n      Serial.print("Class[");\n      Serial.print(i);\n      Serial.print("] target=");\n      Serial.print(AI.classes()[i].target);\n      Serial.print(", score=");\n      Serial.println(AI.classes()[i].score);\n    }\n    for (int i = 0; i < AI.points().size(); i++) {\n      Serial.print("Point[");\n      Serial.print(i);\n      Serial.print("]: target=");\n      Serial.print(AI.points()[i].target);\n      Serial.print(", score=");\n      Serial.print(AI.points()[i].score);\n      Serial.print(", x=");\n      Serial.print(AI.points()[i].x);\n      Serial.print(", y=");\n      Serial.println(AI.points()[i].y);\n    }\n    for (int i = 0; i < AI.keypoints().size(); i++) {\n      Serial.print("keypoint[");\n      Serial.print(i);\n      Serial.print("] target=");\n      Serial.print(AI.keypoints()[i].box.target);\n      Serial.print(", score=");\n      Serial.print(AI.keypoints()[i].box.score);\n      Serial.print(", box:[x=");\n      Serial.print(AI.keypoints()[i].box.x);\n      Serial.print(", y=");\n      Serial.print(AI.keypoints()[i].box.y);\n      Serial.print(", w=");\n      Serial.print(AI.keypoints()[i].box.w);\n      Serial.print(", h=");\n      Serial.print(AI.keypoints()[i].box.h);\n      Serial.print("], points:[");\n      for (int j = 0; j < AI.keypoints()[i].points.size(); j++) {\n        Serial.print("[");\n        Serial.print(AI.keypoints()[i].points[j].x);\n        Serial.print(",");\n        Serial.print(AI.keypoints()[i].points[j].y);\n        Serial.print("],");\n      }\n      Serial.println("]");\n    }\n  }\n}\n'))),(0,a.kt)(o.Z,{value:"uart",label:"XIAO-Compatible (UART)",default:!0,mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <Seeed_Arduino_SSCMA.h>\n\n#ifdef ESP32\n#include <HardwareSerial.h>\n\n// Define two Serial devices mapped to the two internal UARTs\nHardwareSerial atSerial(0);\n\n#else\n#define atSerial Serial1\n#endif\n\nSSCMA AI;\n\nvoid setup() {\n  AI.begin( & atSerial);\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  if (!AI.invoke(1, false, false)) { // invoke once, no filter, not contain image\n    Serial.println("invoke success");\n    Serial.print("perf: prepocess=");\n    Serial.print(AI.perf().prepocess);\n    Serial.print(", inference=");\n    Serial.print(AI.perf().inference);\n    Serial.print(", postpocess=");\n    Serial.println(AI.perf().postprocess);\n\n    for (int i = 0; i < AI.boxes().size(); i++) {\n      Serial.print("Box[");\n      Serial.print(i);\n      Serial.print("] target=");\n      Serial.print(AI.boxes()[i].target);\n      Serial.print(", score=");\n      Serial.print(AI.boxes()[i].score);\n      Serial.print(", x=");\n      Serial.print(AI.boxes()[i].x);\n      Serial.print(", y=");\n      Serial.print(AI.boxes()[i].y);\n      Serial.print(", w=");\n      Serial.print(AI.boxes()[i].w);\n      Serial.print(", h=");\n      Serial.println(AI.boxes()[i].h);\n    }\n    for (int i = 0; i < AI.classes().size(); i++) {\n      Serial.print("Class[");\n      Serial.print(i);\n      Serial.print("] target=");\n      Serial.print(AI.classes()[i].target);\n      Serial.print(", score=");\n      Serial.println(AI.classes()[i].score);\n    }\n    for (int i = 0; i < AI.points().size(); i++) {\n      Serial.print("Point[");\n      Serial.print(i);\n      Serial.print("]: target=");\n      Serial.print(AI.points()[i].target);\n      Serial.print(", score=");\n      Serial.print(AI.points()[i].score);\n      Serial.print(", x=");\n      Serial.print(AI.points()[i].x);\n      Serial.print(", y=");\n      Serial.println(AI.points()[i].y);\n    }\n    for (int i = 0; i < AI.keypoints().size(); i++) {\n      Serial.print("keypoint[");\n      Serial.print(i);\n      Serial.print("] target=");\n      Serial.print(AI.keypoints()[i].box.target);\n      Serial.print(", score=");\n      Serial.print(AI.keypoints()[i].box.score);\n      Serial.print(", box:[x=");\n      Serial.print(AI.keypoints()[i].box.x);\n      Serial.print(", y=");\n      Serial.print(AI.keypoints()[i].box.y);\n      Serial.print(", w=");\n      Serial.print(AI.keypoints()[i].box.w);\n      Serial.print(", h=");\n      Serial.print(AI.keypoints()[i].box.h);\n      Serial.print("], points:[");\n      for (int j = 0; j < AI.keypoints()[i].points.size(); j++) {\n        Serial.print("[");\n        Serial.print(AI.keypoints()[i].points[j].x);\n        Serial.print(",");\n        Serial.print(AI.keypoints()[i].points[j].y);\n        Serial.print("],");\n      }\n      Serial.println("]");\n    }\n  }\n}\n')))),(0,a.kt)("table",{align:"center"},(0,a.kt)("tr",null,(0,a.kt)("th",null,"Connect devices"),(0,a.kt)("th",null,"Upload firmware"),(0,a.kt)("th",null,"Monitor")),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("div",{style:{textAlign:"center"}},(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/grove-vision-ai-v2/dev/capture_image_connect.jpg",style:{width:500,height:"auto"}}))),(0,a.kt)("td",null,(0,a.kt)("div",{style:{textAlign:"center"}},(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/grove-vision-ai-v2/dev/reference_code.png",style:{width:500,height:"auto"}}))),(0,a.kt)("td",null,(0,a.kt)("div",{style:{textAlign:"center"}},(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/grove-vision-ai-v2/dev/reference_monitor.png",style:{width:500,height:"auto"}}))))),(0,a.kt)("h2",{id:"example-3-saving-jpeg-images-to-sd-card"},(0,a.kt)("em",{parentName:"h2"},"Example 3:")," Saving JPEG Images to SD Card"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"More details in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Seeed-Studio/SSCMA-Micro/blob/dev/docs/protocol/at_protocol.md#set-action-trigger-experimental"},"Set action trigger - AT protocol")," section.")),(0,a.kt)("p",null,"The Grove Vision AI V2 module allows saving JPEG images directly to an external SD card. To ensure compatibility, it is recommended to format the SD card as ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"FAT32"))," with a cluster size of ",(0,a.kt)("inlineCode",{parentName:"p"},"8192")," or use the ",(0,a.kt)("strong",{parentName:"p"},"exFAT")," file system. When saving images, the module automatically creates a default save path named ",(0,a.kt)("inlineCode",{parentName:"p"},"Grove Vision AI (V2) Export")," if it doesn't already exist. "),(0,a.kt)("admonition",{title:"attention",type:"info"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"Make sure the firmware version is greater than 4/18/2024."))),(0,a.kt)("p",{style:{textAlign:"center"}},(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/grove-vision-ai-v2/dev/jpeg_format_sd.png",alt:"filesystem",width:220,height:"auto"})),(0,a.kt)("p",null,"Within this save path, a new folder is created for each boot session when the save action is triggered, and the folder name is an incremented number. The latest folder name is stored in a hidden file named ",(0,a.kt)("inlineCode",{parentName:"p"},".sscma")," in the save path, which ",(0,a.kt)("em",{parentName:"p"},"should not be modified by the user")," to avoid potential errors. "),(0,a.kt)("p",{style:{textAlign:"center"}},(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/grove-vision-ai-v2/dev/export_files.png",alt:"export files",width:480,height:"auto"})),(0,a.kt)("details",null,(0,a.kt)("summary",null,"To preview images like streams using Python"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import os\nimport platform\nimport tkinter as tk\nfrom PIL import Image, ImageTk\nimport time\n\nclass ImagePlayer:\n    def __init__(self, parent_directory, switch_time=1):\n        self.parent_directory = parent_directory\n        self.image_files = []\n        self.current_index = 0\n        self.switch_time = switch_time\n        self.root = tk.Tk()\n        self.label = tk.Label(self.root)\n        self.label.pack()\n        self.load_image_files()\n    \n    def load_image_files(self):\n        # Get all subdirectories in the parent directory\n        directories = [os.path.join(self.parent_directory, folder) for folder in os.listdir(self.parent_directory) if os.path.isdir(os.path.join(self.parent_directory, folder))]\n\n        # Traverse subdirectories and get image file paths\n        for directory in directories:\n            image_files = [os.path.join(directory, file) for file in sorted(os.listdir(directory)) if file.endswith(('.jpg', '.jpeg', '.png'))]\n            self.image_files.extend(image_files)\n\n    def play_images(self):\n        if self.current_index < len(self.image_files):\n            image_file = self.image_files[self.current_index]\n            image = Image.open(image_file)\n            self.display_image(image)\n            self.current_index += 1\n            self.root.after(int(self.switch_time * 1000), self.play_images)\n        else:\n            self.root.destroy()\n\n    def display_image(self, image):\n        # Adjust the image size to fit the window\n        width, height = self.root.winfo_screenwidth(), self.root.winfo_screenheight()\n        image.thumbnail((width, height))\n\n        # Convert the image to a format usable by Tkinter\n        photo = ImageTk.PhotoImage(image)\n\n        # Display the image in the label\n        self.label.config(image=photo)\n        self.label.image = photo\n\n    def start(self):\n        self.root.geometry(\"240x240\")  # Set the window size\n        self.root.title(\"Image Player\")  # Set the window title\n\n        self.root.after(0, self.play_images)  # Start playing the images\n        self.root.mainloop()\n\n# Create an ImagePlayer object and provide the parent directory path\nparent_directory = r\"E:\\Grove Vision AI (V2) Export\"\nplayer = ImagePlayer(parent_directory, switch_time=0.3)  # Customize the image switch time here (in seconds)\n\n# Start the image player\nplayer.start()\n"))),(0,a.kt)("p",null,"When you call ",(0,a.kt)("inlineCode",{parentName:"p"},"save_jpeg()"),", it means you send a AT command ",(0,a.kt)("inlineCode",{parentName:"p"},'AT+ACTION="save_jpeg()"')," to the Grove Vision AI V2 module.\nAnd you should call it only once."),(0,a.kt)("p",null,"If you don't want to store the JPEG image anymore, you will have to clean the Action Sets, even if you restart your Grove Vision AI V2 module."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'void setup()\n{\n   atSerial.println("AT+ACTION=\\"\\""); // Same as `AI.clean_actions()`\n   AI.clean_actions(); \n}\n')),(0,a.kt)("h3",{id:"complete-code-2"},"Complete Code"),(0,a.kt)(r.Z,{groupId:"grove_connect",mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"i2c",label:"Grove(I2C)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <Seeed_Arduino_SSCMA.h>\n\nSSCMA AI;\n\nvoid setup()\n{\n   Serial.begin(9600); // Initialize serial port\n   AI.begin(); \n   AI.save_jpeg();\n}\n\nvoid loop()\n{\n   if (!AI.invoke(1, false, false)){} // every invoke it will save jpeg\n}\n\n"))),(0,a.kt)(o.Z,{value:"uart",label:"XIAO-Compatible (UART)",default:!0,mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <Seeed_Arduino_SSCMA.h>\n\n#ifdef ESP32\n#include <HardwareSerial.h>\n\n// Define two Serial devices mapped to the two internal UARTs\nHardwareSerial atSerial(0);\n\n#else\n#define atSerial Serial1\n#endif\n\nSSCMA AI;\n\nvoid setup()\n{\n   Serial.begin(9600); // Initialize serial port\n   AI.begin(&atSerial);\n   AI.save_jpeg();\n}\n\nvoid loop()\n{\n   if (!AI.invoke(1, false, true)){} // every invoke it will save jpeg\n}\n"))),(0,a.kt)(o.Z,{value:"at_actions",label:"Check AT actions",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <Seeed_Arduino_SSCMA.h>\n\n#ifdef ESP32\n#include <HardwareSerial.h>\n\n// Define two Serial devices mapped to the two internal UARTs\nHardwareSerial atSerial(0);\n\n#else\n#define atSerial Serial1\n#endif\n\nSSCMA AI;\n\nvoid setup()\n{\n   Serial.begin(9600); // Initialize serial port\n   AI.begin(&atSerial);\n   AI.save_jpeg();\n}\n\nvoid loop()\n{\n  atSerial.println("AT+ACTION?"); // request to get action information\n\n  String str_action = atSerial.readString(); // read the response\n  if(str_action.indexOf("save_jpeg") > 0){ // check if the action exists\n      Serial.println("save_jpeg exists");\n      Serial.println("trigger action: clean_actions");\n      AI.clean_actions(); // clean the action\n  }else{ // if null, trigger action to save_jpeg again\n      Serial.println("save_jpeg doesn\'t exist");\n      Serial.println("trigger action: save_jpeg");\n      AI.save_jpeg();\n  }\n  delay(5000);\n}\n')),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"if not working, plz check if the SD card is formatted and inserted correctly.")))),(0,a.kt)("table",{align:"center"},(0,a.kt)("tr",null,(0,a.kt)("th",null,"Connect devices"),(0,a.kt)("th",null,"Upload firmware"),(0,a.kt)("th",null,"Monitor")),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("div",{style:{textAlign:"center"}},(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/grove-vision-ai-v2/dev/capture_image_connect.jpg",style:{width:500,height:"auto"}}))),(0,a.kt)("td",null,(0,a.kt)("div",{style:{textAlign:"center"}},(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/grove-vision-ai-v2/dev/save_image_code.png",style:{width:500,height:"auto"}}))),(0,a.kt)("td",null,(0,a.kt)("div",{style:{textAlign:"center"}},(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/grove-vision-ai-v2/dev/save_image_monitor.png",style:{width:500,height:"auto"}}))))),(0,a.kt)("h2",{id:"base64tojpeg"},"Base64 to JPEG Image"),(0,a.kt)("p",null,"There are two ways to get the decoded image when you try to get the JPEG image in programming:"),(0,a.kt)(r.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"esp32",label:"ESP32",mdxType:"TabItem"},(0,a.kt)("p",null,"If your mcu is ESP32, you can use the following code to get the image:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <string.h>\n\n#include "mbedtls/base64.h"\n\n#include <Seeed_Arduino_SSCMA.h>\n\n#define DECODED_IMAGE_MAX_SIZE(15 * 1024) // choose your own max size_t\n\nstatic unsigned char jpegImage[DECODED_IMAGE_MAX_SIZE + 1];\n\nsize_t decode_base64_image(const unsigned char * p_data, unsigned char * decoded_str) {\n  if (!p_data || !decoded_str)\n    return 0;\n\n  size_t str_len = strlen((const char * ) p_data);\n  size_t output_len = 0;\n  // Obtain the decoded length\n  int decode_ret = mbedtls_base64_decode(NULL, 0, & output_len, p_data, str_len);\n  if (decode_ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER) {\n    Serial.println(TAG, "Invalid character in Base64 string");\n    return 0;\n  }\n\n  // Check if the decoded length is reasonable\n  if (output_len == 0 || output_len > DECODED_IMAGE_MAX_SIZE) {\n    Serial.println("Base64 decode output size is too large or zero.");\n    return 0;\n  }\n\n  // Actual decoding operation\n  decode_ret = mbedtls_base64_decode(decoded_str, DECODED_IMAGE_MAX_SIZE, & output_len, p_data, str_len);\n  if (decode_ret != 0) {\n    Serial.println(TAG, "Failed to decode Base64 string, error: %d", decode_ret);\n    return 0;\n  }\n\n  Serial.println("str_len: %d, output_len: %d", str_len, output_len);\n\n  return output_len;\n}\n\nSSCMA AI;\n\nvoid setup() {\n  AI.begin();\n  Serial.begin(115200);\n}\n\nvoid loop() {\n  if (!AI.invoke(1, false, true)) {\n    if (AI.last_image().length() > 0) {\n      Serial.print("Last image:");\n      Serial.println(AI.last_image());\n      size_t jpegImageSize = decode_base64_image(AI.last_image().c_str(), jpegImage);\n      if (jpegImageSize > 0) {\n        // your function to display the jpeg image\n        display_jpeg_image(jpegImage, jpegImageSize);\n      }\n    }\n  }\n}\n'))),(0,a.kt)(o.Z,{value:"arduino",label:"Arduino",default:!0,mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <base64.h>\n\n#include <Seeed_Arduino_SSCMA.h>\n\n#define atSerial Serial1 /* Define your Serial interface */\n\nSSCMA AI;\n\nvoid setup() {\n  AI.begin( & atSerial);\n  Serial.begin(115200);\n}\n\nvoid loop() {\n  // invoke once, no filter, get image\n  if (!AI.invoke(1, false, true)) {\n    if (AI.last_image().length() > 0) {\n      String toEncode = AI.last_image();\n      Serial.print("Image Code:");\n      Serial.println(toEncode);\n      String encoded_jpeg = base64::encode(toEncode);\n      // your function to display the jpeg image\n      func_display_jpeg(encoded_jpeg);\n    }\n  }\n}\n')))),(0,a.kt)("admonition",{title:"Why Use Base64 Encoding?",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Base64 is a way of encoding binary data (like images) into a string of ASCII characters. This allows binary data to be included in formats that don't natively support binary, like JSON."),(0,a.kt)("p",{parentName:"admonition"},"Base64 encoding is used to avoid transmitting binary data directly through text-based protocols (like HTTP, JSON, XML). It also prevents the need for additional parsing libraries, as most programming languages have built-in Base64 encoding/decoding functions. Base64 allows binary data to be safely transmitted as standard ASCII text and easily decoded back into its original binary form."),(0,a.kt)("p",{parentName:"admonition"},"There are many online tools that make it easy to decode Base64 to an image, such as:\n",(0,a.kt)("a",{parentName:"p",href:"https://base64.guru/converter/decode/image"},"Base64 Online Decoder"),"\nSimply paste the Base64 string into the tool and it will display the decoded image.")),(0,a.kt)("p",{style:{textAlign:"center"}},(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/grove-vision-ai-v2/dev/e.g.base64.png",width:420,height:"auto"})),(0,a.kt)("h2",{id:"customization-and-sdk-development"},"Customization and SDK Development"),(0,a.kt)("p",null,"For users who require more customization and advanced functionality, the Grove Vision AI V2 also supports SDK development. The module's Himax main controller chip can be programmed directly using the provided SDK, allowing for industrial-grade projects with highly personalized features."),(0,a.kt)("p",null,"Users interested in SDK development can refer to the existing examples, such as ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Seeed-Studio/sscma-example-we2/tree/main/EPII_CM55M_APP_S/app/scenario_app/sdio_app"},"sdio_app"),", which demonstrates direct SDIO operations. These examples serve as a starting point for modifying and implementing custom projects."),(0,a.kt)("p",null,"By leveraging the power of the SDK, users can unlock the full potential of the Grove Vision AI V2 and create tailored solutions for their specific needs. Follow ",(0,a.kt)("a",{parentName:"p",href:"/grove_vision_ai_v2_himax_sdk"},"the previous wiki page")," to have more guidence."),(0,a.kt)("h2",{id:"faq--trouble-shooting"},"FAQ & Trouble Shooting"),(0,a.kt)("h3",{id:"faq_invoke"},"What is the function of invoke?"),(0,a.kt)("p",null,"Every time to get the data value from Grove Vision V2, it is supposed to call the  ",(0,a.kt)("inlineCode",{parentName:"p"},"invoke")," function:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * @brief Invoke the algorithm for a specified number of times\n * \n * This function invokes the algorithm for a specified number of times and waits for the response and event.\n * The result can be filtered based on the difference from the previous result, and the event reply can be\n * configured to contain only the result data or include the image data as well.\n *\n * @param times The number of times to invoke the algorithm\n * @param filter If true, the event reply will only be sent if the last result is different from the previous result\n *               (compared by geometry and score)\n * @param show If true, the event reply will also contain the image data; if false, the event reply will *only contain* the result data\n * @return int Returns CMD_OK if the invocation is successful and the response and event are received within the timeout;\n *             otherwise, returns CMD_ETIMEDOUT\n *\n * Pattern: AT+INVOKE=<N_TIMES,DIFFERED,RESULT_ONLY>\\r\n * Request: AT+INVOKE=1,0,1\\r\n */\nint SSCMA::invoke(int times, bool filter, bool show);\n")),(0,a.kt)("h3",{id:"faq_begin"},"What does ",(0,a.kt)("inlineCode",{parentName:"h3"},"AI.begin()")," do?"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"If you use ",(0,a.kt)("inlineCode",{parentName:"p"},"SSCMA.begin()"),", it defaults to using I2C (Wire) for communication, as defined in the function header:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"bool begin(TwoWire *wire = &Wire, int32_t rst = -1, uint16_t address = I2C_ADDRESS,\n      uint32_t wait_delay = 2, uint32_t clock = SSCMA_IIC_CLOCK);\n"))),(0,a.kt)("h2",{id:"resources"},"Resources"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/Seeed-Studio/SSCMA-Micro/blob/dev/docs/protocol/at_protocol.md"},"AT Commands reference manual")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/Seeed-Studio/Seeed_Arduino_SSCMA"},"Seeed Arduino SSCMA - Arduino Library"))),(0,a.kt)("h2",{id:"references"},"References"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.himax.com.tw/products/wiseeye-ai-sensing/wiseeye2-ai-processor/"},"WiseEye2 AI Processor - Himax")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://himaxwiseeyeplus.github.io/"},"WIseEye2 Technical Highlights"))),(0,a.kt)("h2",{id:"contributing"},"Contributing"),(0,a.kt)("p",null,"We welcome contributions in any form! If you would like to contribute to this page, you can:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Report bugs or suggest new features by opening an ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/Seeed-Studio/wiki-documents/issues"},"issue")),(0,a.kt)("li",{parentName:"ul"},"Submit page improvements or fixes by creating a ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/Seeed-Studio/wiki-documents/pulls"},"pull request")),(0,a.kt)("li",{parentName:"ul"},"Improve documentation by suggesting edits or additions"),(0,a.kt)("li",{parentName:"ul"},"Help answer questions or provide support to other users"),(0,a.kt)("li",{parentName:"ul"},"Share the product with others who might find it useful")),(0,a.kt)("p",null,"To get started, please read our ",(0,a.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/Seeed-Studio/wiki-documents/docusaurus-version/CONTRIBUTING.md"},"Contributing Guidelines")," for more information on how to contribute and the process for submitting pull requests."),(0,a.kt)("p",null,"We appreciate all contributions and thank you for helping to make it better!"),(0,a.kt)("h2",{id:"tech-support--product-discussion"},"Tech Support & Product Discussion"),(0,a.kt)("p",null,"Thank you for choosing our products! We are here to provide you with different support to ensure that your experience with our products is as smooth as possible. We offer several communication channels to cater to different preferences and needs."),(0,a.kt)("div",{class:"table-center"},(0,a.kt)("div",{class:"button_tech_support_container"},(0,a.kt)("a",{href:"https://forum.seeedstudio.com/",class:"button_forum"}),(0,a.kt)("a",{href:"https://www.seeedstudio.com/contacts",class:"button_email"})),(0,a.kt)("div",{class:"button_tech_support_container"},(0,a.kt)("a",{href:"https://discord.gg/eWkprNDMU7",class:"button_discord"}),(0,a.kt)("a",{href:"https://github.com/Seeed-Studio/wiki-documents/discussions/69",class:"button_discussion"}))))}g.isMDXComponent=!0}}]);