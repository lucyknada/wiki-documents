"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[86738],{15680:(e,n,a)=>{a.d(n,{xA:()=>m,yg:()=>p});var t=a(96540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function s(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function u(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?s(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},s=Object.keys(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=t.createContext({}),d=function(e){var n=t.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):u(u({},n),e)),a},m=function(e){var n=d(e.components);return t.createElement(l.Provider,{value:n},e.children)},o="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),o=d(a),c=r,p=o["".concat(l,".").concat(c)]||o[c]||g[c]||s;return a?t.createElement(p,u(u({ref:n},m),{},{components:a})):t.createElement(p,u({ref:n},m))}));function p(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=a.length,u=new Array(s);u[0]=c;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[o]="string"==typeof e?e:r,u[1]=i;for(var d=2;d<s;d++)u[d]=a[d];return t.createElement.apply(null,u)}return t.createElement.apply(null,a)}c.displayName="MDXCreateElement"},19365:(e,n,a)=>{a.d(n,{A:()=>u});var t=a(96540),r=a(20053);const s={tabItem:"tabItem_Ymn6"};function u(e){let{children:n,hidden:a,className:u}=e;return t.createElement("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,u),hidden:a},n)}},11470:(e,n,a)=>{a.d(n,{A:()=>v});var t=a(58168),r=a(96540),s=a(20053),u=a(23104),i=a(56347),l=a(57485),d=a(31682),m=a(89466);function o(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:a,attributes:t,default:r}}=e;return{value:n,label:a,attributes:t,default:r}}))}function g(e){const{values:n,children:a}=e;return(0,r.useMemo)((()=>{const e=n??o(a);return function(e){const n=(0,d.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function c(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:a}=e;const t=(0,i.W6)(),s=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,l.aZ)(s),(0,r.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(t.location.search);n.set(s,e),t.replace({...t.location,search:n.toString()})}),[s,t])]}function b(e){const{defaultValue:n,queryString:a=!1,groupId:t}=e,s=g(e),[u,i]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!c({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=a.find((e=>e.default))??a[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:s}))),[l,d]=p({queryString:a,groupId:t}),[o,b]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[t,s]=(0,m.Dv)(a);return[t,(0,r.useCallback)((e=>{a&&s.set(e)}),[a,s])]}({groupId:t}),V=(()=>{const e=l??o;return c({value:e,tabValues:s})?e:null})();(0,r.useLayoutEffect)((()=>{V&&i(V)}),[V]);return{selectedValue:u,selectValue:(0,r.useCallback)((e=>{if(!c({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);i(e),d(e),b(e)}),[d,b,s]),tabValues:s}}var V=a(92303);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function I(e){let{className:n,block:a,selectedValue:i,selectValue:l,tabValues:d}=e;const m=[],{blockElementScrollPositionUntilNextRender:o}=(0,u.a_)(),g=e=>{const n=e.currentTarget,a=m.indexOf(n),t=d[a].value;t!==i&&(o(n),l(t))},c=e=>{let n=null;switch(e.key){case"Enter":g(e);break;case"ArrowRight":{const a=m.indexOf(e.currentTarget)+1;n=m[a]??m[0];break}case"ArrowLeft":{const a=m.indexOf(e.currentTarget)-1;n=m[a]??m[m.length-1];break}}n?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":a},n)},d.map((e=>{let{value:n,label:a,attributes:u}=e;return r.createElement("li",(0,t.A)({role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,key:n,ref:e=>m.push(e),onKeyDown:c,onClick:g},u,{className:(0,s.A)("tabs__item",y.tabItem,u?.className,{"tabs__item--active":i===n})}),a??n)})))}function f(e){let{lazy:n,children:a,selectedValue:t}=e;const s=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===t));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},s.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==t}))))}function h(e){const n=b(e);return r.createElement("div",{className:(0,s.A)("tabs-container",y.tabList)},r.createElement(I,(0,t.A)({},e,n)),r.createElement(f,(0,t.A)({},e,n)))}function v(e){const n=(0,V.A)();return r.createElement(h,(0,t.A)({key:String(n)},e))}},15039:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>m,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>d,toc:()=>o});var t=a(58168),r=(a(96540),a(15680)),s=a(11470),u=a(19365);const i={description:"SenseCAP_Decoder",title:"SenseCAP Decoder",keywords:["SenseCAP_Decoder"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/SenseCAP_Decoder",last_update:{date:"8/24/2023",author:"Jessie"}},l=void 0,d={unversionedId:"Sensor/SenseCAP/SenseCAP_Decoder",id:"Sensor/SenseCAP/SenseCAP_Decoder",title:"SenseCAP Decoder",description:"SenseCAP_Decoder",source:"@site/docs/Sensor/SenseCAP/SenseCAP_Decoder.md",sourceDirName:"Sensor/SenseCAP",slug:"/SenseCAP_Decoder",permalink:"/SenseCAP_Decoder",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/Sensor/SenseCAP/SenseCAP_Decoder.md",tags:[],version:"current",lastUpdatedBy:"Jessie",lastUpdatedAt:1692835200,formattedLastUpdatedAt:"Aug 24, 2023",frontMatter:{description:"SenseCAP_Decoder",title:"SenseCAP Decoder",keywords:["SenseCAP_Decoder"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/SenseCAP_Decoder",last_update:{date:"8/24/2023",author:"Jessie"}},sidebar:"ProductSidebar",previous:{title:"Configure the Counter & GPIO Sensor",permalink:"/Sensor/SenseCAP/SenseCAP_Data_Logger/tutorial/How_to_Configure_the_Counter&GPIO_Sensor_for_S2100_Data_Logger"},next:{title:"Tango with Home Assistant and SenseCAP Sensors",permalink:"/home_assistant_with_sensecap_lorawan_sensors"}},m={},o=[{value:"SenseCAP T1000 Tracker",id:"sensecap-t1000-tracker",level:3},{value:"Decoder",id:"decoder",level:4},{value:"Wio Tracker 1110 Dev Board",id:"wio-tracker-1110-dev-board",level:3},{value:"Decoder",id:"decoder-1",level:4},{value:"SenseCAP S210X LoRaWAN Sensors",id:"sensecap-s210x-lorawan-sensors",level:3},{value:"Decoder",id:"decoder-2",level:4},{value:"SenseCAP S2100 Data Logger",id:"sensecap-s2100-data-logger",level:3},{value:"Decoder",id:"decoder-3",level:4},{value:"SenseCAP S2120 8-in-1 Weather Sensor",id:"sensecap-s2120-8-in-1-weather-sensor",level:3},{value:"Decoder",id:"decoder-4",level:4},{value:"SenseCAP A1101 - LoRaWAN Vision AI Sensor",id:"sensecap-a1101---lorawan-vision-ai-sensor",level:3},{value:"Decoder",id:"decoder-5",level:4},{value:"How to Use",id:"how-to-use",level:3},{value:"Preparation",id:"preparation",level:5},{value:"Configure the Payload Decoder",id:"configure-the-payload-decoder",level:5},{value:"Check the Decoded Messages",id:"check-the-decoded-messages",level:5},{value:"Resource",id:"resource",level:3}],g={toc:o},c="wrapper";function p(e){let{components:n,...a}=e;return(0,r.yg)(c,(0,t.A)({},g,a,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"SenseCAP decoder is used for decoding the LoRaWAN messages sent from the SenseCAP LoRaWAN\xae devices. After decoding, users' applications will get more friendly and readable messages."),(0,r.yg)("h3",{id:"sensecap-t1000-tracker"},"SenseCAP T1000 Tracker"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.seeedstudio.com/sensecap-t1000-tracker?utm_source=emailsig&utm_medium=emailsig&utm_campaign=emailsig"},(0,r.yg)("strong",{parentName:"a"},"SenseCAP T1000"))," is a compact LoRaWAN\xae tracker that utilizes GNSS/Wi-Fi/Bluetooth for precise indoor & outdoor location tracking. It boasts self-geo-adaptive capabilities, local data storage, and an impressive months of battery life. Additionally, it is equipped with temperature, light, and motion sensors, making it ideal for a variety of location-based applications."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/tracker_1.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,r.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/SenseCAP-Card-Tracker-T1000-A-p-5697.html"},(0,r.yg)("strong",null,(0,r.yg)("span",null,(0,r.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f "))))),(0,r.yg)("h4",{id:"decoder"},"Decoder"),(0,r.yg)("details",null,(0,r.yg)("summary",null,"For TTN"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"function decodeUplink (input) {\n    const bytes = input['bytes']\n    const fport = parseInt(input['fPort'])\n    const bytesString = bytes2HexString(bytes)\n    const originMessage = bytesString.toLocaleUpperCase()\n    const decoded = {\n        valid: true,\n        err: 0,\n        payload: bytesString,\n        messages: []\n    }\n    if (fport === 199 || fport === 192) {\n        decoded.messages.push({fport: fport, payload: bytesString})\n        return { data: decoded }\n    }\n    if (fport !== 5) {\n        decoded.valid = false\n        return { data: decoded }\n    }\n    let measurement = messageAnalyzed(originMessage)\n    if (measurement.length === 0) {\n        decoded.valid = false\n        return { data: decoded }\n    }\n\n    for (let message of measurement) {\n        if (message.length === 0) {\n            continue\n        }\n        let elements = []\n        for (let element of message) {\n            if (element.errorCode) {\n                decoded.err = element.errorCode\n                decoded.errMessage = element.error\n            } else {\n                elements.push(element)\n            }\n        }\n        if (elements.length > 0) {\n            decoded.messages.push(elements)\n        }\n    }\n    // decoded.messages = measurement\n    return { data: decoded }\n}\n\nfunction messageAnalyzed (messageValue) {\n    try {\n        let frames = unpack(messageValue)\n        let measurementResultArray = []\n        for (let i = 0; i < frames.length; i++) {\n            let item = frames[i]\n            let dataId = item.dataId\n            let dataValue = item.dataValue\n            let measurementArray = deserialize(dataId, dataValue)\n            measurementResultArray.push(measurementArray)\n        }\n        return measurementResultArray\n    } catch (e) {\n        return e.toString()\n    }\n}\n\nfunction unpack (messageValue) {\n    let frameArray = []\n\n    for (let i = 0; i < messageValue.length; i++) {\n        let remainMessage = messageValue\n        let dataId = remainMessage.substring(0, 2).toUpperCase()\n        let dataValue\n        let dataObj = {}\n        let packageLen\n        switch (dataId) {\n            case '01':\n                packageLen = 94\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '02':\n                packageLen = 32\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '03':\n                packageLen = 64\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '04':\n                packageLen = 20\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '05':\n                packageLen = 10\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '06':\n                packageLen = 44\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '07':\n                packageLen = 84\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '08':\n                packageLen = 70\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '09':\n                packageLen = 36\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '0A':\n                packageLen = 76\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '0B':\n                packageLen = 62\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '0C':\n                packageLen = 2\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                break\n            case '0D':\n                packageLen = 10\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '0E':\n                packageLen = getInt(remainMessage.substring(8, 10)) * 2 + 10\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, 8) + remainMessage.substring(10, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '0F':\n                packageLen = 34\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '10':\n                packageLen = 26\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '11':\n                packageLen = 28\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            default:\n                return frameArray\n        }\n        if (dataValue.length < 2) {\n            break\n        }\n        frameArray.push(dataObj)\n    }\n    return frameArray\n}\n\nfunction deserialize (dataId, dataValue) {\n    let measurementArray = []\n    let eventList = []\n    let measurement = {}\n    let collectTime = 0\n    let groupId = 0\n    let shardFlag = {}\n    let payload = ''\n    let result = []\n    let dataArr = []\n    switch (dataId) {\n        case '01':\n            measurementArray = getUpShortInfo(dataValue)\n            measurementArray.push(...getMotionSetting(dataValue.substring(30, 40)))\n            measurementArray.push(...getStaticSetting(dataValue.substring(40, 46)))\n            measurementArray.push(...getShockSetting(dataValue.substring(46, 52)))\n            measurementArray.push(...getTempSetting(dataValue.substring(52, 72)))\n            measurementArray.push(...getLightSetting(dataValue.substring(72, 92)))\n            break\n        case '02':\n            measurementArray = getUpShortInfo(dataValue)\n            break\n        case '03':\n            measurementArray.push(...getMotionSetting(dataValue.substring(0, 10)))\n            measurementArray.push(...getStaticSetting(dataValue.substring(10, 16)))\n            measurementArray.push(...getShockSetting(dataValue.substring(16, 22)))\n            measurementArray.push(...getTempSetting(dataValue.substring(22, 42)))\n            measurementArray.push(...getLightSetting(dataValue.substring(42, 62)))\n            break\n        case '04':\n            let interval = 0\n            let workMode = getInt(dataValue.substring(0, 2))\n            let heartbeatInterval = getMinsByMin(dataValue.substring(4, 8))\n            let periodicInterval = getMinsByMin(dataValue.substring(8, 12))\n            let eventInterval = getMinsByMin(dataValue.substring(12, 16))\n            switch (workMode) {\n                case 0:\n                    interval = heartbeatInterval\n                    break\n                case 1:\n                    interval = periodicInterval\n                    break\n                case 2:\n                    interval = eventInterval\n                    break\n            }\n            measurementArray = [\n                {measurementId: '3940', type: 'Work Mode', measurementValue: workMode},\n                {measurementId: '3942', type: 'Heartbeat Interval', measurementValue: heartbeatInterval},\n                {measurementId: '3943', type: 'Periodic Interval', measurementValue: periodicInterval},\n                {measurementId: '3944', type: 'Event Interval', measurementValue: eventInterval},\n                {measurementId: '3941', type: 'SOS Mode', measurementValue: getSOSMode(dataValue.substring(16, 18))},\n                {measurementId: '3900', type: 'Uplink Interval', measurementValue: interval}\n            ]\n            break;\n        case '05':\n            measurementArray = [\n                {measurementId: '3000', type: 'Battery', measurementValue: getBattery(dataValue.substring(0, 2))},\n                {measurementId: '3940', type: 'Work Mode', measurementValue: getWorkingMode(dataValue.substring(2, 4))},\n                {measurementId: '3965', type: 'Positioning Strategy', measurementValue: getPositioningStrategy(dataValue.substring(4, 6))},\n                {measurementId: '3941', type: 'SOS Mode', measurementValue: getSOSMode(dataValue.substring(6, 8))}\n            ]\n            break\n        case '06':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray = [\n                {measurementId: '4200', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Event Status', measurementValue: getEventStatus(dataValue.substring(0, 6))},\n                {measurementId: '4197', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Longitude', measurementValue: parseFloat(getSensorValue(dataValue.substring(16, 24), 1000000))},\n                {measurementId: '4198', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Latitude', measurementValue: parseFloat(getSensorValue(dataValue.substring(24, 32), 1000000))},\n                {measurementId: '4097', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Air Temperature', measurementValue: getSensorValue(dataValue.substring(32, 36), 10)},\n                {measurementId: '4199', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Light', measurementValue: getSensorValue(dataValue.substring(36, 40))},\n                {measurementId: '3000', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Battery', measurementValue: getBattery(dataValue.substring(40, 42))}\n            ]\n            break\n        case '07':\n            eventList = getEventStatus(dataValue.substring(0, 6))\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray = [\n                {measurementId: '4200', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Event Status', measurementValue: getEventStatus(dataValue.substring(0, 6))},\n                {measurementId: '5001', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Wi-Fi Scan', measurementValue: getMacAndRssiObj(dataValue.substring(16, 72))},\n                {measurementId: '4097', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Air Temperature', measurementValue: getSensorValue(dataValue.substring(72, 76), 10)},\n                {measurementId: '4199', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Light', measurementValue: getSensorValue(dataValue.substring(76, 80))},\n                {measurementId: '3000', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Battery', measurementValue: getBattery(dataValue.substring(80, 82))}\n            ]\n            break\n        case '08':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray = [\n                {measurementId: '4200', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Event Status', measurementValue: getEventStatus(dataValue.substring(0, 6))},\n                {measurementId: '5002', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'BLE Scan', measurementValue: getMacAndRssiObj(dataValue.substring(16, 58))},\n                {measurementId: '4097', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Air Temperature', measurementValue: getSensorValue(dataValue.substring(58, 62), 10)},\n                {measurementId: '4199', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Light', measurementValue: getSensorValue(dataValue.substring(62, 66))},\n                {measurementId: '3000', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Battery', measurementValue: getBattery(dataValue.substring(66, 68))}\n            ]\n            break\n        case '09':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray = [\n                {measurementId: '4200', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Event Status', measurementValue: getEventStatus(dataValue.substring(0, 6))},\n                {measurementId: '4197', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Longitude', measurementValue: parseFloat(getSensorValue(dataValue.substring(16, 24), 1000000))},\n                {measurementId: '4198', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Latitude', measurementValue: parseFloat(getSensorValue(dataValue.substring(24, 32), 1000000))},\n                {measurementId: '3000', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Battery', measurementValue: getBattery(dataValue.substring(32, 34))}\n            ]\n            break\n        case '0A':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray = [\n                {measurementId: '4200', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Event Status', measurementValue: getEventStatus(dataValue.substring(0, 6))},\n                {measurementId: '5001', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Wi-Fi Scan', measurementValue: getMacAndRssiObj(dataValue.substring(16, 72))},\n                {measurementId: '3000', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Battery', measurementValue: getBattery(dataValue.substring(72, 74))}\n            ]\n            break\n        case '0B':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray = [\n                {measurementId: '4200', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Event Status', measurementValue: getEventStatus(dataValue.substring(0, 6))},\n                {measurementId: '5002', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'BLE Scan', measurementValue: getMacAndRssiObj(dataValue.substring(16, 58))},\n                {measurementId: '3000', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Battery', measurementValue: getBattery(dataValue.substring(58, 60))},\n            ]\n            break\n        case '0D':\n            let errorCode = getInt(dataValue)\n            let error = ''\n            switch (errorCode) {\n                case 1:\n                    error = 'FAILED TO OBTAIN THE UTC TIMESTAMP'\n                    break\n                case 2:\n                    error = 'ALMANAC TOO OLD'\n                    break\n                case 3:\n                    error = 'DOPPLER ERROR'\n                    break\n            }\n            measurementArray.push({errorCode, error})\n            break\n        case '0E':\n            shardFlag = getShardFlag(dataValue.substring(0, 2))\n            groupId = getInt(dataValue.substring(2, 6))\n            payload = dataValue.substring(6)\n            measurement = {\n                measurementId: '6152',\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'gnss-ng payload',\n                measurementValue: payload\n            }\n            measurementArray.push(measurement)\n            break\n        case '0F':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            shardFlag = getShardFlag(dataValue.substring(26, 28))\n            groupId = getInt(dataValue.substring(28, 32))\n            measurementArray.push({\n                measurementId: '4200',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'Event Status',\n                measurementValue: getEventStatus(dataValue.substring(0, 6))\n            })\n            measurementArray.push({\n                measurementId: '4097',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'Air Temperature',\n                measurementValue: '' + getSensorValue(dataValue.substring(16, 20), 10)\n            })\n            measurementArray.push({\n                measurementId: '4199',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'Light',\n                measurementValue: '' + getSensorValue(dataValue.substring(20, 24))\n            })\n            measurementArray.push({\n                measurementId: '3000',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'Battery',\n                measurementValue: '' + getBattery(dataValue.substring(24, 26))\n            })\n            break\n        case '10':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            shardFlag = getShardFlag(dataValue.substring(18, 20))\n            groupId = getInt(dataValue.substring(20, 24))\n            measurementArray.push({\n                measurementId: '4200',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'Event Status',\n                measurementValue: getEventStatus(dataValue.substring(0, 6))\n            })\n            measurementArray.push({\n                measurementId: '3000',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'Battery',\n                measurementValue: '' + getBattery(dataValue.substring(16, 18))\n            })\n            break\n        case '11':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray.push({\n                measurementId: '3576',\n                timestamp: collectTime,\n                type: 'Positing Status',\n                measurementValue: '' + getPositingStatus(dataValue.substring(0, 2))\n            })\n            measurementArray.push({\n                timestamp: collectTime,\n                measurementId: '4200',\n                type: 'Event Status',\n                measurementValue: getEventStatus(dataValue.substring(2, 8))\n            })\n            if (!isNaN(parseFloat(getSensorValue(dataValue.substring(16, 20), 10)))) {\n                measurementArray.push({\n                    timestamp: collectTime,\n                    measurementId: '4097',\n                    type: 'Air Temperature',\n                    measurementValue: '' + getSensorValue(dataValue.substring(16, 20), 10)\n                })\n            }\n            if (!isNaN(parseFloat(getSensorValue(dataValue.substring(20, 24))))) {\n                measurementArray.push({\n                    timestamp: collectTime,\n                    measurementId: '4199',\n                    type: 'Light',\n                    measurementValue: '' + getSensorValue(dataValue.substring(20, 24))\n                })\n            }\n            measurementArray.push({\n                timestamp: collectTime,\n                measurementId: '3000',\n                type: 'Battery',\n                measurementValue: '' + getBattery(dataValue.substring(24, 26))\n            })\n            break\n    }\n    return measurementArray\n}\n\nfunction getMotionId (str) {\n    return getInt(str)\n}\n\nfunction getPositingStatus (str) {\n    return getInt(str)\n}\n\nfunction getUpShortInfo (messageValue) {\n    return [\n        {\n            measurementId: '3000', type: 'Battery', measurementValue: getBattery(messageValue.substring(0, 2))\n        }, {\n            measurementId: '3502', type: 'Firmware Version', measurementValue: getSoftVersion(messageValue.substring(2, 6))\n        }, {\n            measurementId: '3001', type: 'Hardware Version', measurementValue: getHardVersion(messageValue.substring(6, 10))\n        }, {\n            measurementId: '3940', type: 'Work Mode', measurementValue: getWorkingMode(messageValue.substring(10, 12))\n        }, {\n            measurementId: '3965', type: 'Positioning Strategy', measurementValue: getPositioningStrategy(messageValue.substring(12, 14))\n        }, {\n            measurementId: '3942', type: 'Heartbeat Interval', measurementValue: getMinsByMin(messageValue.substring(14, 18))\n        }, {\n            measurementId: '3943', type: 'Periodic Interval', measurementValue: getMinsByMin(messageValue.substring(18, 22))\n        }, {\n            measurementId: '3944', type: 'Event Interval', measurementValue: getMinsByMin(messageValue.substring(22, 26))\n        }, {\n            measurementId: '3945', type: 'Sensor Enable', measurementValue: getInt(messageValue.substring(26, 28))\n        }, {\n            measurementId: '3941', type: 'SOS Mode', measurementValue: getSOSMode(messageValue.substring(28, 30))\n        }\n    ]\n}\n\nfunction getMotionSetting (str) {\n    return [\n        {measurementId: '3946', type: 'Motion Enable', measurementValue: getInt(str.substring(0, 2))},\n        {measurementId: '3947', type: 'Any Motion Threshold', measurementValue: getSensorValue(str.substring(2, 6), 1)},\n        {measurementId: '3948', type: 'Motion Start Interval', measurementValue: getMinsByMin(str.substring(6, 10))},\n    ]\n}\n\nfunction getStaticSetting (str) {\n    return [\n        {measurementId: '3949', type: 'Static Enable', measurementValue: getInt(str.substring(0, 2))},\n        {measurementId: '3950', type: 'Device Static Timeout', measurementValue: getMinsByMin(str.substring(2, 6))}\n    ]\n}\n\nfunction getShockSetting (str) {\n    return [\n        {measurementId: '3951', type: 'Shock Enable', measurementValue: getInt(str.substring(0, 2))},\n        {measurementId: '3952', type: 'Shock Threshold', measurementValue: getInt(str.substring(2, 6))}\n    ]\n}\n\nfunction getTempSetting (str) {\n    return [\n        {measurementId: '3953', type: 'Temp Enable', measurementValue: getInt(str.substring(0, 2))},\n        {measurementId: '3954', type: 'Event Temp Interval', measurementValue: getMinsByMin(str.substring(2, 6))},\n        {measurementId: '3955', type: 'Event Temp Sample Interval', measurementValue: getSecondsByInt(str.substring(6, 10))},\n        {measurementId: '3956', type: 'Temp ThMax', measurementValue: getSensorValue(str.substring(10, 14), 10)},\n        {measurementId: '3957', type: 'Temp ThMin', measurementValue: getSensorValue(str.substring(14, 18), 10)},\n        {measurementId: '3958', type: 'Temp Warning Type', measurementValue: getInt(str.substring(18, 20))}\n    ]\n}\n\nfunction getLightSetting (str) {\n    return [\n        {measurementId: '3959', type: 'Light Enable', measurementValue: getInt(str.substring(0, 2))},\n        {measurementId: '3960', type: 'Event Light Interval', measurementValue: getMinsByMin(str.substring(2, 6))},\n        {measurementId: '3961', type: 'Event Light Sample Interval', measurementValue: getSecondsByInt(str.substring(6, 10))},\n        {measurementId: '3962', type: 'Light ThMax', measurementValue: getSensorValue(str.substring(10, 14), 10)},\n        {measurementId: '3963', type: 'Light ThMin', measurementValue: getSensorValue(str.substring(14, 18), 10)},\n        {measurementId: '3964', type: 'Light Warning Type', measurementValue: getInt(str.substring(18, 20))}\n    ]\n}\n\nfunction getShardFlag (str) {\n    let bitStr = getByteArray(str)\n    return {\n        count: parseInt(bitStr.substring(0, 4), 2),\n        index: parseInt(bitStr.substring(4), 2)\n    }\n}\n\nfunction getBattery (batteryStr) {\n    return loraWANV2DataFormat(batteryStr)\n}\nfunction getSoftVersion (softVersion) {\n    return `${loraWANV2DataFormat(softVersion.substring(0, 2))}.${loraWANV2DataFormat(softVersion.substring(2, 4))}`\n}\nfunction getHardVersion (hardVersion) {\n    return `${loraWANV2DataFormat(hardVersion.substring(0, 2))}.${loraWANV2DataFormat(hardVersion.substring(2, 4))}`\n}\n\nfunction getSecondsByInt (str) {\n    return getInt(str)\n}\n\nfunction getMinsByMin (str) {\n    return getInt(str)\n}\n\nfunction getSensorValue (str, dig) {\n    if (str === '8000') {\n        return null\n    } else {\n        return loraWANV2DataFormat(str, dig)\n    }\n}\n\nfunction bytes2HexString (arrBytes) {\n    var str = ''\n    for (var i = 0; i < arrBytes.length; i++) {\n        var tmp\n        var num = arrBytes[i]\n        if (num < 0) {\n            tmp = (255 + num + 1).toString(16)\n        } else {\n            tmp = num.toString(16)\n        }\n        if (tmp.length === 1) {\n            tmp = '0' + tmp\n        }\n        str += tmp\n    }\n    return str\n}\nfunction loraWANV2DataFormat (str, divisor = 1) {\n    let strReverse = bigEndianTransform(str)\n    let str2 = toBinary(strReverse)\n    if (str2.substring(0, 1) === '1') {\n        let arr = str2.split('')\n        let reverseArr = arr.map((item) => {\n            if (parseInt(item) === 1) {\n                return 0\n            } else {\n                return 1\n            }\n        })\n        str2 = parseInt(reverseArr.join(''), 2) + 1\n        return '-' + str2 / divisor\n    }\n    return parseInt(str2, 2) / divisor\n}\n\nfunction bigEndianTransform (data) {\n    let dataArray = []\n    for (let i = 0; i < data.length; i += 2) {\n        dataArray.push(data.substring(i, i + 2))\n    }\n    return dataArray\n}\n\nfunction toBinary (arr) {\n    let binaryData = arr.map((item) => {\n        let data = parseInt(item, 16)\n            .toString(2)\n        let dataLength = data.length\n        if (data.length !== 8) {\n            for (let i = 0; i < 8 - dataLength; i++) {\n                data = `0` + data\n            }\n        }\n        return data\n    })\n    return binaryData.toString().replace(/,/g, '')\n}\n\nfunction getSOSMode (str) {\n    return loraWANV2DataFormat(str)\n}\n\nfunction getMacAndRssiObj (pair) {\n    let pairs = []\n    if (pair.length % 14 === 0) {\n        for (let i = 0; i < pair.length; i += 14) {\n            let mac = getMacAddress(pair.substring(i, i + 12))\n            if (mac) {\n                let rssi = getInt8RSSI(pair.substring(i + 12, i + 14))\n                pairs.push({mac: mac, rssi: rssi})\n            } else {\n                continue\n            }\n        }\n    }\n    return pairs\n}\n\nfunction getMacAddress (str) {\n    if (str.toLowerCase() === 'ffffffffffff') {\n        return null\n    }\n    let macArr = []\n    for (let i = 1; i < str.length; i++) {\n        if (i % 2 === 1) {\n            macArr.push(str.substring(i - 1, i + 1))\n        }\n    }\n    let mac = ''\n    for (let i = 0; i < macArr.length; i++) {\n        mac = mac + macArr[i]\n        if (i < macArr.length - 1) {\n            mac = mac + ':'\n        }\n    }\n    return mac\n}\n\nfunction getInt8RSSI (str) {\n    return loraWANV2DataFormat(str)\n}\n\nfunction getInt (str) {\n    return parseInt(str, 16)\n}\n\nfunction getEventStatus (str) {\n    // return getInt(str)\n    let bitStr = getByteArray(str)\n    let bitArr = []\n    for (let i = 0; i < bitStr.length; i++) {\n        bitArr[i] = bitStr.substring(i, i + 1)\n    }\n    bitArr = bitArr.reverse()\n    let event = []\n    for (let i = 0; i < bitArr.length; i++) {\n        if (bitArr[i] !== '1') {\n            continue\n        }\n        switch (i){\n            case 0:\n                event.push({id:1, eventName:\"Start moving event.\"})\n                break\n            case 1:\n                event.push({id:2, eventName:\"End movement event.\"})\n                break\n            case 2:\n                event.push({id:3, eventName:\"Motionless event.\"})\n                break\n            case 3:\n                event.push({id:4, eventName:\"Shock event.\"})\n                break\n            case 4:\n                event.push({id:5, eventName:\"Temperature event.\"})\n                break\n            case 5:\n                event.push({id:6, eventName:\"Light event.\"})\n                break\n            case 6:\n                event.push({id:7, eventName:\"SOS event.\"})\n                break\n            case 7:\n                event.push({id:8, eventName:\"Press once event.\"})\n                break\n        }\n    }\n    return event\n}\n\nfunction getByteArray (str) {\n    let bytes = []\n    for (let i = 0; i < str.length; i += 2) {\n        bytes.push(str.substring(i, i + 2))\n    }\n    return toBinary(bytes)\n}\n\nfunction getWorkingMode (workingMode) {\n    return getInt(workingMode)\n}\n\nfunction getPositioningStrategy (strategy) {\n    return getInt(strategy)\n}\n\nfunction getUTCTimestamp(str){\n    return parseInt(loraWANV2PositiveDataFormat(str)) * 1000\n}\n\nfunction loraWANV2PositiveDataFormat (str, divisor = 1) {\n    let strReverse = bigEndianTransform(str)\n    let str2 = toBinary(strReverse)\n    return parseInt(str2, 2) / divisor\n}\n"))),(0,r.yg)("details",null,(0,r.yg)("summary",null,"For Helium"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"function Decoder (bytes, port) {\n    const bytesString = bytes2HexString(bytes)\n    const originMessage = bytesString.toLocaleUpperCase()\n    const fport = parseInt(port)\n    const decoded = {\n        valid: true,\n        err: 0,\n        payload: bytesString,\n        messages: []\n    }\n\n    if (fport === 199 || fport === 192) {\n        decoded.messages.push({fport: fport, payload: bytesString})\n        return { data: decoded }\n    }\n    if (fport !== 5) {\n        decoded.valid = false\n        return { data: decoded }\n    }\n\n    let measurement = messageAnalyzed(originMessage)\n    if (measurement.length === 0) {\n        decoded.valid = false\n        return { data: decoded }\n    }\n\n    for (let message of measurement) {\n        if (message.length === 0) {\n            continue\n        }\n        let elements = []\n        for (let element of message) {\n            if (element.errorCode) {\n                decoded.err = element.errorCode\n                decoded.errMessage = element.error\n            } else {\n                elements.push(element)\n            }\n        }\n        if (elements.length > 0) {\n            decoded.messages.push(elements)\n        }\n    }\n    // decoded.messages = measurement\n    return { data: decoded }\n}\n\nfunction messageAnalyzed (messageValue) {\n    try {\n        let frames = unpack(messageValue)\n        let measurementResultArray = []\n        for (let i = 0; i < frames.length; i++) {\n            let item = frames[i]\n            let dataId = item.dataId\n            let dataValue = item.dataValue\n            let measurementArray = deserialize(dataId, dataValue)\n            measurementResultArray.push(measurementArray)\n        }\n        return measurementResultArray\n    } catch (e) {\n        return e.toString()\n    }\n}\n\nfunction unpack (messageValue) {\n    let frameArray = []\n\n    for (let i = 0; i < messageValue.length; i++) {\n        let remainMessage = messageValue\n        let dataId = remainMessage.substring(0, 2).toUpperCase()\n        let dataValue\n        let dataObj = {}\n        let packageLen\n        switch (dataId) {\n            case '01':\n                packageLen = 94\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '02':\n                packageLen = 32\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '03':\n                packageLen = 64\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '04':\n                packageLen = 20\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '05':\n                packageLen = 10\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '06':\n                packageLen = 44\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '07':\n                packageLen = 84\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '08':\n                packageLen = 70\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '09':\n                packageLen = 36\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '0A':\n                packageLen = 76\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '0B':\n                packageLen = 62\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '0C':\n                packageLen = 2\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                break\n            case '0D':\n                packageLen = 10\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '0E':\n                packageLen = getInt(remainMessage.substring(8, 10)) * 2 + 10\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, 8) + remainMessage.substring(10, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '0F':\n                packageLen = 34\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '10':\n                packageLen = 26\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '11':\n                packageLen = 28\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            default:\n                return frameArray\n        }\n        if (dataValue.length < 2) {\n            break\n        }\n        frameArray.push(dataObj)\n    }\n    return frameArray\n}\n\nfunction deserialize (dataId, dataValue) {\n    let measurementArray = []\n    let eventList = []\n    let measurement = {}\n    let collectTime = 0\n    let groupId = 0\n    let shardFlag = {}\n    let payload = ''\n    let result = []\n    let dataArr = []\n    switch (dataId) {\n        case '01':\n            measurementArray = getUpShortInfo(dataValue)\n            measurementArray.push(...getMotionSetting(dataValue.substring(30, 40)))\n            measurementArray.push(...getStaticSetting(dataValue.substring(40, 46)))\n            measurementArray.push(...getShockSetting(dataValue.substring(46, 52)))\n            measurementArray.push(...getTempSetting(dataValue.substring(52, 72)))\n            measurementArray.push(...getLightSetting(dataValue.substring(72, 92)))\n            break\n        case '02':\n            measurementArray = getUpShortInfo(dataValue)\n            break\n        case '03':\n            measurementArray.push(...getMotionSetting(dataValue.substring(0, 10)))\n            measurementArray.push(...getStaticSetting(dataValue.substring(10, 16)))\n            measurementArray.push(...getShockSetting(dataValue.substring(16, 22)))\n            measurementArray.push(...getTempSetting(dataValue.substring(22, 42)))\n            measurementArray.push(...getLightSetting(dataValue.substring(42, 62)))\n            break\n        case '04':\n            let interval = 0\n            let workMode = getInt(dataValue.substring(0, 2))\n            let heartbeatInterval = getMinsByMin(dataValue.substring(4, 8))\n            let periodicInterval = getMinsByMin(dataValue.substring(8, 12))\n            let eventInterval = getMinsByMin(dataValue.substring(12, 16))\n            switch (workMode) {\n                case 0:\n                    interval = heartbeatInterval\n                    break\n                case 1:\n                    interval = periodicInterval\n                    break\n                case 2:\n                    interval = eventInterval\n                    break\n            }\n            measurementArray = [\n                {measurementId: '3940', type: 'Work Mode', measurementValue: workMode},\n                {measurementId: '3942', type: 'Heartbeat Interval', measurementValue: heartbeatInterval},\n                {measurementId: '3943', type: 'Periodic Interval', measurementValue: periodicInterval},\n                {measurementId: '3944', type: 'Event Interval', measurementValue: eventInterval},\n                {measurementId: '3941', type: 'SOS Mode', measurementValue: getSOSMode(dataValue.substring(16, 18))},\n                {measurementId: '3900', type: 'Uplink Interval', measurementValue: interval}\n            ]\n            break;\n        case '05':\n            measurementArray = [\n                {measurementId: '3000', type: 'Battery', measurementValue: getBattery(dataValue.substring(0, 2))},\n                {measurementId: '3940', type: 'Work Mode', measurementValue: getWorkingMode(dataValue.substring(2, 4))},\n                {measurementId: '3965', type: 'Positioning Strategy', measurementValue: getPositioningStrategy(dataValue.substring(4, 6))},\n                {measurementId: '3941', type: 'SOS Mode', measurementValue: getSOSMode(dataValue.substring(6, 8))}\n            ]\n            break\n        case '06':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray = [\n                {measurementId: '4200', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Event Status', measurementValue: getEventStatus(dataValue.substring(0, 6))},\n                {measurementId: '4197', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Longitude', measurementValue: parseFloat(getSensorValue(dataValue.substring(16, 24), 1000000))},\n                {measurementId: '4198', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Latitude', measurementValue: parseFloat(getSensorValue(dataValue.substring(24, 32), 1000000))},\n                {measurementId: '4097', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Air Temperature', measurementValue: getSensorValue(dataValue.substring(32, 36), 10)},\n                {measurementId: '4199', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Light', measurementValue: getSensorValue(dataValue.substring(36, 40))},\n                {measurementId: '3000', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Battery', measurementValue: getBattery(dataValue.substring(40, 42))}\n            ]\n            break\n        case '07':\n            eventList = getEventStatus(dataValue.substring(0, 6))\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray = [\n                {measurementId: '4200', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Event Status', measurementValue: getEventStatus(dataValue.substring(0, 6))},\n                {measurementId: '5001', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Wi-Fi Scan', measurementValue: getMacAndRssiObj(dataValue.substring(16, 72))},\n                {measurementId: '4097', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Air Temperature', measurementValue: getSensorValue(dataValue.substring(72, 76), 10)},\n                {measurementId: '4199', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Light', measurementValue: getSensorValue(dataValue.substring(76, 80))},\n                {measurementId: '3000', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Battery', measurementValue: getBattery(dataValue.substring(80, 82))}\n            ]\n            break\n        case '08':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray = [\n                {measurementId: '4200', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Event Status', measurementValue: getEventStatus(dataValue.substring(0, 6))},\n                {measurementId: '5002', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'BLE Scan', measurementValue: getMacAndRssiObj(dataValue.substring(16, 58))},\n                {measurementId: '4097', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Air Temperature', measurementValue: getSensorValue(dataValue.substring(58, 62), 10)},\n                {measurementId: '4199', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Light', measurementValue: getSensorValue(dataValue.substring(62, 66))},\n                {measurementId: '3000', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Battery', measurementValue: getBattery(dataValue.substring(66, 68))}\n            ]\n            break\n        case '09':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray = [\n                {measurementId: '4200', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Event Status', measurementValue: getEventStatus(dataValue.substring(0, 6))},\n                {measurementId: '4197', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Longitude', measurementValue: parseFloat(getSensorValue(dataValue.substring(16, 24), 1000000))},\n                {measurementId: '4198', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Latitude', measurementValue: parseFloat(getSensorValue(dataValue.substring(24, 32), 1000000))},\n                {measurementId: '3000', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Battery', measurementValue: getBattery(dataValue.substring(32, 34))}\n            ]\n            break\n        case '0A':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray = [\n                {measurementId: '4200', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Event Status', measurementValue: getEventStatus(dataValue.substring(0, 6))},\n                {measurementId: '5001', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Wi-Fi Scan', measurementValue: getMacAndRssiObj(dataValue.substring(16, 72))},\n                {measurementId: '3000', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Battery', measurementValue: getBattery(dataValue.substring(72, 74))}\n            ]\n            break\n        case '0B':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray = [\n                {measurementId: '4200', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Event Status', measurementValue: getEventStatus(dataValue.substring(0, 6))},\n                {measurementId: '5002', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'BLE Scan', measurementValue: getMacAndRssiObj(dataValue.substring(16, 58))},\n                {measurementId: '3000', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Battery', measurementValue: getBattery(dataValue.substring(58, 60))},\n            ]\n            break\n        case '0D':\n            let errorCode = getInt(dataValue)\n            let error = ''\n            switch (errorCode) {\n                case 1:\n                    error = 'FAILED TO OBTAIN THE UTC TIMESTAMP'\n                    break\n                case 2:\n                    error = 'ALMANAC TOO OLD'\n                    break\n                case 3:\n                    error = 'DOPPLER ERROR'\n                    break\n            }\n            measurementArray.push({errorCode, error})\n            break\n        case '0E':\n            shardFlag = getShardFlag(dataValue.substring(0, 2))\n            groupId = getInt(dataValue.substring(2, 6))\n            payload = dataValue.substring(6)\n            measurement = {\n                measurementId: '6152',\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'gnss-ng payload',\n                measurementValue: payload\n            }\n            measurementArray.push(measurement)\n            break\n        case '0F':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            shardFlag = getShardFlag(dataValue.substring(26, 28))\n            groupId = getInt(dataValue.substring(28, 32))\n            measurementArray.push({\n                measurementId: '4200',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'Event Status',\n                measurementValue: getEventStatus(dataValue.substring(0, 6))\n            })\n            measurementArray.push({\n                measurementId: '4097',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'Air Temperature',\n                measurementValue: '' + getSensorValue(dataValue.substring(16, 20), 10)\n            })\n            measurementArray.push({\n                measurementId: '4199',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'Light',\n                measurementValue: '' + getSensorValue(dataValue.substring(20, 24))\n            })\n            measurementArray.push({\n                measurementId: '3000',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'Battery',\n                measurementValue: '' + getBattery(dataValue.substring(24, 26))\n            })\n            break\n        case '10':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            shardFlag = getShardFlag(dataValue.substring(18, 20))\n            groupId = getInt(dataValue.substring(20, 24))\n            measurementArray.push({\n                measurementId: '4200',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'Event Status',\n                measurementValue: getEventStatus(dataValue.substring(0, 6))\n            })\n            measurementArray.push({\n                measurementId: '3000',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'Battery',\n                measurementValue: '' + getBattery(dataValue.substring(16, 18))\n            })\n            break\n        case '11':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray.push({\n                measurementId: '3576',\n                timestamp: collectTime,\n                type: 'Positing Status',\n                measurementValue: '' + getPositingStatus(dataValue.substring(0, 2))\n            })\n            measurementArray.push({\n                timestamp: collectTime,\n                measurementId: '4200',\n                type: 'Event Status',\n                measurementValue: getEventStatus(dataValue.substring(2, 8))\n            })\n            if (!isNaN(parseFloat(getSensorValue(dataValue.substring(16, 20), 10)))) {\n                measurementArray.push({\n                    timestamp: collectTime,\n                    measurementId: '4097',\n                    type: 'Air Temperature',\n                    measurementValue: '' + getSensorValue(dataValue.substring(16, 20), 10)\n                })\n            }\n            if (!isNaN(parseFloat(getSensorValue(dataValue.substring(20, 24))))) {\n                measurementArray.push({\n                    timestamp: collectTime,\n                    measurementId: '4199',\n                    type: 'Light',\n                    measurementValue: '' + getSensorValue(dataValue.substring(20, 24))\n                })\n            }\n            measurementArray.push({\n                timestamp: collectTime,\n                measurementId: '3000',\n                type: 'Battery',\n                measurementValue: '' + getBattery(dataValue.substring(24, 26))\n            })\n            break\n    }\n    return measurementArray\n}\n\nfunction getMotionId (str) {\n    return getInt(str)\n}\n\nfunction getPositingStatus (str) {\n    return getInt(str)\n}\n\nfunction getUpShortInfo (messageValue) {\n    return [\n        {\n            measurementId: '3000', type: 'Battery', measurementValue: getBattery(messageValue.substring(0, 2))\n        }, {\n            measurementId: '3502', type: 'Firmware Version', measurementValue: getSoftVersion(messageValue.substring(2, 6))\n        }, {\n            measurementId: '3001', type: 'Hardware Version', measurementValue: getHardVersion(messageValue.substring(6, 10))\n        }, {\n            measurementId: '3940', type: 'Work Mode', measurementValue: getWorkingMode(messageValue.substring(10, 12))\n        }, {\n            measurementId: '3965', type: 'Positioning Strategy', measurementValue: getPositioningStrategy(messageValue.substring(12, 14))\n        }, {\n            measurementId: '3942', type: 'Heartbeat Interval', measurementValue: getMinsByMin(messageValue.substring(14, 18))\n        }, {\n            measurementId: '3943', type: 'Periodic Interval', measurementValue: getMinsByMin(messageValue.substring(18, 22))\n        }, {\n            measurementId: '3944', type: 'Event Interval', measurementValue: getMinsByMin(messageValue.substring(22, 26))\n        }, {\n            measurementId: '3945', type: 'Sensor Enable', measurementValue: getInt(messageValue.substring(26, 28))\n        }, {\n            measurementId: '3941', type: 'SOS Mode', measurementValue: getSOSMode(messageValue.substring(28, 30))\n        }\n    ]\n}\n\nfunction getMotionSetting (str) {\n    return [\n        {measurementId: '3946', type: 'Motion Enable', measurementValue: getInt(str.substring(0, 2))},\n        {measurementId: '3947', type: 'Any Motion Threshold', measurementValue: getSensorValue(str.substring(2, 6), 1)},\n        {measurementId: '3948', type: 'Motion Start Interval', measurementValue: getMinsByMin(str.substring(6, 10))},\n    ]\n}\n\nfunction getStaticSetting (str) {\n    return [\n        {measurementId: '3949', type: 'Static Enable', measurementValue: getInt(str.substring(0, 2))},\n        {measurementId: '3950', type: 'Device Static Timeout', measurementValue: getMinsByMin(str.substring(2, 6))}\n    ]\n}\n\nfunction getShockSetting (str) {\n    return [\n        {measurementId: '3951', type: 'Shock Enable', measurementValue: getInt(str.substring(0, 2))},\n        {measurementId: '3952', type: 'Shock Threshold', measurementValue: getInt(str.substring(2, 6))}\n    ]\n}\n\nfunction getTempSetting (str) {\n    return [\n        {measurementId: '3953', type: 'Temp Enable', measurementValue: getInt(str.substring(0, 2))},\n        {measurementId: '3954', type: 'Event Temp Interval', measurementValue: getMinsByMin(str.substring(2, 6))},\n        {measurementId: '3955', type: 'Event Temp Sample Interval', measurementValue: getSecondsByInt(str.substring(6, 10))},\n        {measurementId: '3956', type: 'Temp ThMax', measurementValue: getSensorValue(str.substring(10, 14), 10)},\n        {measurementId: '3957', type: 'Temp ThMin', measurementValue: getSensorValue(str.substring(14, 18), 10)},\n        {measurementId: '3958', type: 'Temp Warning Type', measurementValue: getInt(str.substring(18, 20))}\n    ]\n}\n\nfunction getLightSetting (str) {\n    return [\n        {measurementId: '3959', type: 'Light Enable', measurementValue: getInt(str.substring(0, 2))},\n        {measurementId: '3960', type: 'Event Light Interval', measurementValue: getMinsByMin(str.substring(2, 6))},\n        {measurementId: '3961', type: 'Event Light Sample Interval', measurementValue: getSecondsByInt(str.substring(6, 10))},\n        {measurementId: '3962', type: 'Light ThMax', measurementValue: getSensorValue(str.substring(10, 14), 10)},\n        {measurementId: '3963', type: 'Light ThMin', measurementValue: getSensorValue(str.substring(14, 18), 10)},\n        {measurementId: '3964', type: 'Light Warning Type', measurementValue: getInt(str.substring(18, 20))}\n    ]\n}\n\nfunction getShardFlag (str) {\n    let bitStr = getByteArray(str)\n    return {\n        count: parseInt(bitStr.substring(0, 4), 2),\n        index: parseInt(bitStr.substring(4), 2)\n    }\n}\n\nfunction getBattery (batteryStr) {\n    return loraWANV2DataFormat(batteryStr)\n}\nfunction getSoftVersion (softVersion) {\n    return `${loraWANV2DataFormat(softVersion.substring(0, 2))}.${loraWANV2DataFormat(softVersion.substring(2, 4))}`\n}\nfunction getHardVersion (hardVersion) {\n    return `${loraWANV2DataFormat(hardVersion.substring(0, 2))}.${loraWANV2DataFormat(hardVersion.substring(2, 4))}`\n}\n\nfunction getSecondsByInt (str) {\n    return getInt(str)\n}\n\nfunction getMinsByMin (str) {\n    return getInt(str)\n}\n\nfunction getSensorValue (str, dig) {\n    if (str === '8000') {\n        return null\n    } else {\n        return loraWANV2DataFormat(str, dig)\n    }\n}\n\nfunction bytes2HexString (arrBytes) {\n    var str = ''\n    for (var i = 0; i < arrBytes.length; i++) {\n        var tmp\n        var num = arrBytes[i]\n        if (num < 0) {\n            tmp = (255 + num + 1).toString(16)\n        } else {\n            tmp = num.toString(16)\n        }\n        if (tmp.length === 1) {\n            tmp = '0' + tmp\n        }\n        str += tmp\n    }\n    return str\n}\nfunction loraWANV2DataFormat (str, divisor = 1) {\n    let strReverse = bigEndianTransform(str)\n    let str2 = toBinary(strReverse)\n    if (str2.substring(0, 1) === '1') {\n        let arr = str2.split('')\n        let reverseArr = arr.map((item) => {\n            if (parseInt(item) === 1) {\n                return 0\n            } else {\n                return 1\n            }\n        })\n        str2 = parseInt(reverseArr.join(''), 2) + 1\n        return '-' + str2 / divisor\n    }\n    return parseInt(str2, 2) / divisor\n}\n\nfunction bigEndianTransform (data) {\n    let dataArray = []\n    for (let i = 0; i < data.length; i += 2) {\n        dataArray.push(data.substring(i, i + 2))\n    }\n    return dataArray\n}\n\nfunction toBinary (arr) {\n    let binaryData = arr.map((item) => {\n        let data = parseInt(item, 16)\n            .toString(2)\n        let dataLength = data.length\n        if (data.length !== 8) {\n            for (let i = 0; i < 8 - dataLength; i++) {\n                data = `0` + data\n            }\n        }\n        return data\n    })\n    return binaryData.toString().replace(/,/g, '')\n}\n\nfunction getSOSMode (str) {\n    return loraWANV2DataFormat(str)\n}\n\nfunction getMacAndRssiObj (pair) {\n    let pairs = []\n    if (pair.length % 14 === 0) {\n        for (let i = 0; i < pair.length; i += 14) {\n            let mac = getMacAddress(pair.substring(i, i + 12))\n            if (mac) {\n                let rssi = getInt8RSSI(pair.substring(i + 12, i + 14))\n                pairs.push({mac: mac, rssi: rssi})\n            } else {\n                continue\n            }\n        }\n    }\n    return pairs\n}\n\nfunction getMacAddress (str) {\n    if (str.toLowerCase() === 'ffffffffffff') {\n        return null\n    }\n    let macArr = []\n    for (let i = 1; i < str.length; i++) {\n        if (i % 2 === 1) {\n            macArr.push(str.substring(i - 1, i + 1))\n        }\n    }\n    let mac = ''\n    for (let i = 0; i < macArr.length; i++) {\n        mac = mac + macArr[i]\n        if (i < macArr.length - 1) {\n            mac = mac + ':'\n        }\n    }\n    return mac\n}\n\nfunction getInt8RSSI (str) {\n    return loraWANV2DataFormat(str)\n}\n\nfunction getInt (str) {\n    return parseInt(str, 16)\n}\n\nfunction getEventStatus (str) {\n    // return getInt(str)\n    let bitStr = getByteArray(str)\n    let bitArr = []\n    for (let i = 0; i < bitStr.length; i++) {\n        bitArr[i] = bitStr.substring(i, i + 1)\n    }\n    bitArr = bitArr.reverse()\n    let event = []\n    for (let i = 0; i < bitArr.length; i++) {\n        if (bitArr[i] !== '1') {\n            continue\n        }\n        switch (i){\n            case 0:\n                event.push({id:1, eventName:\"Start moving event.\"})\n                break\n            case 1:\n                event.push({id:2, eventName:\"End movement event.\"})\n                break\n            case 2:\n                event.push({id:3, eventName:\"Motionless event.\"})\n                break\n            case 3:\n                event.push({id:4, eventName:\"Shock event.\"})\n                break\n            case 4:\n                event.push({id:5, eventName:\"Temperature event.\"})\n                break\n            case 5:\n                event.push({id:6, eventName:\"Light event.\"})\n                break\n            case 6:\n                event.push({id:7, eventName:\"SOS event.\"})\n                break\n            case 7:\n                event.push({id:8, eventName:\"Press once event.\"})\n                break\n        }\n    }\n    return event\n}\n\nfunction getByteArray (str) {\n    let bytes = []\n    for (let i = 0; i < str.length; i += 2) {\n        bytes.push(str.substring(i, i + 2))\n    }\n    return toBinary(bytes)\n}\n\nfunction getWorkingMode (workingMode) {\n    return getInt(workingMode)\n}\n\nfunction getPositioningStrategy (strategy) {\n    return getInt(strategy)\n}\n\nfunction getUTCTimestamp(str){\n    return parseInt(loraWANV2PositiveDataFormat(str)) * 1000\n}\n\nfunction loraWANV2PositiveDataFormat (str, divisor = 1) {\n    let strReverse = bigEndianTransform(str)\n    let str2 = toBinary(strReverse)\n    return parseInt(str2, 2) / divisor\n}\n"))),(0,r.yg)("details",null,(0,r.yg)("summary",null,"For ChirpStack(V3)"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"// Decode decodes an array of bytes into an object.\n//  - fPort contains the LoRaWAN fPort number\n//  - bytes is an array of bytes, e.g. [225, 230, 255, 0]\n//  - variables contains the device variables e.g. {\"calibration\": \"3.5\"} (both the key / value are of type string)\n// The function must return an object, e.g. {\"temperature\": 22.5}\nfunction Decode(fPort, bytes, variables) {\n    var bytesString = bytes2HexString(bytes).toLocaleUpperCase();\n    var fport = parseInt(fPort);\n    var originMessage = bytesString.toLocaleUpperCase();\n    var decoded = {\n        valid: true,\n        err: 0,\n        payload: bytesString,\n        messages: []\n    };\n    if (fport === 199 || fport === 192) {\n        decoded.messages.push({\n            fport: fport,\n            payload: bytesString\n        });\n        return {\n            data: decoded\n        };\n    }\n    if (fport !== 5) {\n        decoded.valid = false;\n        return {\n            data: decoded\n        };\n    }\n    var measurement = messageAnalyzed(originMessage);\n    if (measurement.length === 0) {\n        decoded.valid = false;\n        return {\n            data: decoded\n        };\n    }\n    var _iterator = _createForOfIteratorHelper(measurement),\n        _step;\n    try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var message = _step.value;\n            if (message.length === 0) {\n                continue;\n            }\n            var elements = [];\n            var _iterator2 = _createForOfIteratorHelper(message),\n                _step2;\n            try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    var element = _step2.value;\n                    if (element.errorCode) {\n                        decoded.err = element.errorCode;\n                        decoded.errMessage = element.error;\n                    } else {\n                        elements.push(element);\n                    }\n                }\n            } catch (err) {\n                _iterator2.e(err);\n            } finally {\n                _iterator2.f();\n            }\n            if (elements.length > 0) {\n                decoded.messages.push(elements);\n            }\n        }\n        // decoded.messages = measurement\n    } catch (err) {\n        _iterator.e(err);\n    } finally {\n        _iterator.f();\n    }\n    return {\n        data: decoded\n    };\n}\nfunction messageAnalyzed(messageValue) {\n    try {\n        var frames = unpack(messageValue);\n        var measurementResultArray = [];\n        for (var i = 0; i < frames.length; i++) {\n            var item = frames[i];\n            var dataId = item.dataId;\n            var dataValue = item.dataValue;\n            var measurementArray = deserialize(dataId, dataValue);\n            measurementResultArray.push(measurementArray);\n        }\n        return measurementResultArray;\n    } catch (e) {\n        return e.toString();\n    }\n}\nfunction unpack(messageValue) {\n    var frameArray = [];\n    for (var i = 0; i < messageValue.length; i++) {\n        var remainMessage = messageValue;\n        var dataId = remainMessage.substring(0, 2).toUpperCase();\n        var dataValue = void 0;\n        var dataObj = {};\n        var packageLen = void 0;\n        switch (dataId) {\n            case '01':\n                packageLen = 94;\n                if (remainMessage.length < packageLen) {\n                    return frameArray;\n                }\n                dataValue = remainMessage.substring(2, packageLen);\n                messageValue = remainMessage.substring(packageLen);\n                dataObj = {\n                    'dataId': dataId,\n                    'dataValue': dataValue\n                };\n                break;\n            case '02':\n                packageLen = 32;\n                if (remainMessage.length < packageLen) {\n                    return frameArray;\n                }\n                dataValue = remainMessage.substring(2, packageLen);\n                messageValue = remainMessage.substring(packageLen);\n                dataObj = {\n                    'dataId': dataId,\n                    'dataValue': dataValue\n                };\n                break;\n            case '03':\n                packageLen = 64;\n                if (remainMessage.length < packageLen) {\n                    return frameArray;\n                }\n                dataValue = remainMessage.substring(2, packageLen);\n                messageValue = remainMessage.substring(packageLen);\n                dataObj = {\n                    'dataId': dataId,\n                    'dataValue': dataValue\n                };\n                break;\n            case '04':\n                packageLen = 20;\n                if (remainMessage.length < packageLen) {\n                    return frameArray;\n                }\n                dataValue = remainMessage.substring(2, packageLen);\n                messageValue = remainMessage.substring(packageLen);\n                dataObj = {\n                    'dataId': dataId,\n                    'dataValue': dataValue\n                };\n                break;\n            case '05':\n                packageLen = 10;\n                if (remainMessage.length < packageLen) {\n                    return frameArray;\n                }\n                dataValue = remainMessage.substring(2, packageLen);\n                messageValue = remainMessage.substring(packageLen);\n                dataObj = {\n                    'dataId': dataId,\n                    'dataValue': dataValue\n                };\n                break;\n            case '06':\n                packageLen = 44;\n                if (remainMessage.length < packageLen) {\n                    return frameArray;\n                }\n                dataValue = remainMessage.substring(2, packageLen);\n                messageValue = remainMessage.substring(packageLen);\n                dataObj = {\n                    'dataId': dataId,\n                    'dataValue': dataValue\n                };\n                break;\n            case '07':\n                packageLen = 84;\n                if (remainMessage.length < packageLen) {\n                    return frameArray;\n                }\n                dataValue = remainMessage.substring(2, packageLen);\n                messageValue = remainMessage.substring(packageLen);\n                dataObj = {\n                    'dataId': dataId,\n                    'dataValue': dataValue\n                };\n                break;\n            case '08':\n                packageLen = 70;\n                if (remainMessage.length < packageLen) {\n                    return frameArray;\n                }\n                dataValue = remainMessage.substring(2, packageLen);\n                messageValue = remainMessage.substring(packageLen);\n                dataObj = {\n                    'dataId': dataId,\n                    'dataValue': dataValue\n                };\n                break;\n            case '09':\n                packageLen = 36;\n                if (remainMessage.length < packageLen) {\n                    return frameArray;\n                }\n                dataValue = remainMessage.substring(2, packageLen);\n                messageValue = remainMessage.substring(packageLen);\n                dataObj = {\n                    'dataId': dataId,\n                    'dataValue': dataValue\n                };\n                break;\n            case '0A':\n                packageLen = 76;\n                if (remainMessage.length < packageLen) {\n                    return frameArray;\n                }\n                dataValue = remainMessage.substring(2, packageLen);\n                messageValue = remainMessage.substring(packageLen);\n                dataObj = {\n                    'dataId': dataId,\n                    'dataValue': dataValue\n                };\n                break;\n            case '0B':\n                packageLen = 62;\n                if (remainMessage.length < packageLen) {\n                    return frameArray;\n                }\n                dataValue = remainMessage.substring(2, packageLen);\n                messageValue = remainMessage.substring(packageLen);\n                dataObj = {\n                    'dataId': dataId,\n                    'dataValue': dataValue\n                };\n                break;\n            case '0C':\n                packageLen = 2;\n                if (remainMessage.length < packageLen) {\n                    return frameArray;\n                }\n                break;\n            case '0D':\n                packageLen = 10;\n                if (remainMessage.length < packageLen) {\n                    return frameArray;\n                }\n                dataValue = remainMessage.substring(2, packageLen);\n                messageValue = remainMessage.substring(packageLen);\n                dataObj = {\n                    'dataId': dataId,\n                    'dataValue': dataValue\n                };\n                break;\n            case '0E':\n                packageLen = getInt(remainMessage.substring(8, 10)) * 2 + 10;\n                if (remainMessage.length < packageLen) {\n                    return frameArray;\n                }\n                dataValue = remainMessage.substring(2, 8) + remainMessage.substring(10, packageLen);\n                messageValue = remainMessage.substring(packageLen);\n                dataObj = {\n                    'dataId': dataId,\n                    'dataValue': dataValue\n                };\n                break;\n            case '0F':\n                packageLen = 34;\n                if (remainMessage.length < packageLen) {\n                    return frameArray;\n                }\n                dataValue = remainMessage.substring(2, packageLen);\n                messageValue = remainMessage.substring(packageLen);\n                dataObj = {\n                    'dataId': dataId,\n                    'dataValue': dataValue\n                };\n                break;\n            case '10':\n                packageLen = 26;\n                if (remainMessage.length < packageLen) {\n                    return frameArray;\n                }\n                dataValue = remainMessage.substring(2, packageLen);\n                messageValue = remainMessage.substring(packageLen);\n                dataObj = {\n                    'dataId': dataId,\n                    'dataValue': dataValue\n                };\n                break;\n            case '11':\n                packageLen = 28;\n                if (remainMessage.length < packageLen) {\n                    return frameArray;\n                }\n                dataValue = remainMessage.substring(2, packageLen);\n                messageValue = remainMessage.substring(packageLen);\n                dataObj = {\n                    'dataId': dataId,\n                    'dataValue': dataValue\n                };\n                break;\n            default:\n                return frameArray;\n        }\n        if (dataValue.length < 2) {\n            break;\n        }\n        frameArray.push(dataObj);\n    }\n    return frameArray;\n}\nfunction deserialize(dataId, dataValue) {\n    var _measurementArray, _measurementArray2, _measurementArray3, _measurementArray4, _measurementArray5, _measurementArray6, _measurementArray7, _measurementArray8, _measurementArray9, _measurementArray10;\n    var measurementArray = [];\n    var eventList = [];\n    var measurement = {};\n    var collectTime = 0;\n    var groupId = 0;\n    var shardFlag = {};\n    var payload = '';\n    var result = [];\n    var dataArr = [];\n    switch (dataId) {\n        case '01':\n            measurementArray = getUpShortInfo(dataValue);\n            (_measurementArray = measurementArray).push.apply(_measurementArray, _toConsumableArray(getMotionSetting(dataValue.substring(30, 40))));\n            (_measurementArray2 = measurementArray).push.apply(_measurementArray2, _toConsumableArray(getStaticSetting(dataValue.substring(40, 46))));\n            (_measurementArray3 = measurementArray).push.apply(_measurementArray3, _toConsumableArray(getShockSetting(dataValue.substring(46, 52))));\n            (_measurementArray4 = measurementArray).push.apply(_measurementArray4, _toConsumableArray(getTempSetting(dataValue.substring(52, 72))));\n            (_measurementArray5 = measurementArray).push.apply(_measurementArray5, _toConsumableArray(getLightSetting(dataValue.substring(72, 92))));\n            break;\n        case '02':\n            measurementArray = getUpShortInfo(dataValue);\n            break;\n        case '03':\n            (_measurementArray6 = measurementArray).push.apply(_measurementArray6, _toConsumableArray(getMotionSetting(dataValue.substring(0, 10))));\n            (_measurementArray7 = measurementArray).push.apply(_measurementArray7, _toConsumableArray(getStaticSetting(dataValue.substring(10, 16))));\n            (_measurementArray8 = measurementArray).push.apply(_measurementArray8, _toConsumableArray(getShockSetting(dataValue.substring(16, 22))));\n            (_measurementArray9 = measurementArray).push.apply(_measurementArray9, _toConsumableArray(getTempSetting(dataValue.substring(22, 42))));\n            (_measurementArray10 = measurementArray).push.apply(_measurementArray10, _toConsumableArray(getLightSetting(dataValue.substring(42, 62))));\n            break;\n        case '04':\n            var interval = 0;\n            var workMode = getInt(dataValue.substring(0, 2));\n            var heartbeatInterval = getMinsByMin(dataValue.substring(4, 8));\n            var periodicInterval = getMinsByMin(dataValue.substring(8, 12));\n            var eventInterval = getMinsByMin(dataValue.substring(12, 16));\n            switch (workMode) {\n                case 0:\n                    interval = heartbeatInterval;\n                    break;\n                case 1:\n                    interval = periodicInterval;\n                    break;\n                case 2:\n                    interval = eventInterval;\n                    break;\n            }\n            measurementArray = [{\n                measurementId: '3940',\n                type: 'Work Mode',\n                measurementValue: workMode\n            }, {\n                measurementId: '3942',\n                type: 'Heartbeat Interval',\n                measurementValue: heartbeatInterval\n            }, {\n                measurementId: '3943',\n                type: 'Periodic Interval',\n                measurementValue: periodicInterval\n            }, {\n                measurementId: '3944',\n                type: 'Event Interval',\n                measurementValue: eventInterval\n            }, {\n                measurementId: '3941',\n                type: 'SOS Mode',\n                measurementValue: getSOSMode(dataValue.substring(16, 18))\n            }, {\n                measurementId: '3900',\n                type: 'Uplink Interval',\n                measurementValue: interval\n            }];\n            break;\n        case '05':\n            measurementArray = [{\n                measurementId: '3000',\n                type: 'Battery',\n                measurementValue: getBattery(dataValue.substring(0, 2))\n            }, {\n                measurementId: '3940',\n                type: 'Work Mode',\n                measurementValue: getWorkingMode(dataValue.substring(2, 4))\n            }, {\n                measurementId: '3965',\n                type: 'Positioning Strategy',\n                measurementValue: getPositioningStrategy(dataValue.substring(4, 6))\n            }, {\n                measurementId: '3941',\n                type: 'SOS Mode',\n                measurementValue: getSOSMode(dataValue.substring(6, 8))\n            }];\n            break;\n        case '06':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16));\n            measurementArray = [{\n                measurementId: '4200',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'Event Status',\n                measurementValue: getEventStatus(dataValue.substring(0, 6))\n            }, {\n                measurementId: '4197',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'Longitude',\n                measurementValue: parseFloat(getSensorValue(dataValue.substring(16, 24), 1000000))\n            }, {\n                measurementId: '4198',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'Latitude',\n                measurementValue: parseFloat(getSensorValue(dataValue.substring(24, 32), 1000000))\n            }, {\n                measurementId: '4097',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'Air Temperature',\n                measurementValue: getSensorValue(dataValue.substring(32, 36), 10)\n            }, {\n                measurementId: '4199',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'Light',\n                measurementValue: getSensorValue(dataValue.substring(36, 40))\n            }, {\n                measurementId: '3000',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'Battery',\n                measurementValue: getBattery(dataValue.substring(40, 42))\n            }];\n            break;\n        case '07':\n            eventList = getEventStatus(dataValue.substring(0, 6));\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16));\n            measurementArray = [{\n                measurementId: '4200',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'Event Status',\n                measurementValue: getEventStatus(dataValue.substring(0, 6))\n            }, {\n                measurementId: '5001',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'Wi-Fi Scan',\n                measurementValue: getMacAndRssiObj(dataValue.substring(16, 72))\n            }, {\n                measurementId: '4097',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'Air Temperature',\n                measurementValue: getSensorValue(dataValue.substring(72, 76), 10)\n            }, {\n                measurementId: '4199',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'Light',\n                measurementValue: getSensorValue(dataValue.substring(76, 80))\n            }, {\n                measurementId: '3000',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'Battery',\n                measurementValue: getBattery(dataValue.substring(80, 82))\n            }];\n            break;\n        case '08':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16));\n            measurementArray = [{\n                measurementId: '4200',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'Event Status',\n                measurementValue: getEventStatus(dataValue.substring(0, 6))\n            }, {\n                measurementId: '5002',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'BLE Scan',\n                measurementValue: getMacAndRssiObj(dataValue.substring(16, 58))\n            }, {\n                measurementId: '4097',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'Air Temperature',\n                measurementValue: getSensorValue(dataValue.substring(58, 62), 10)\n            }, {\n                measurementId: '4199',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'Light',\n                measurementValue: getSensorValue(dataValue.substring(62, 66))\n            }, {\n                measurementId: '3000',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'Battery',\n                measurementValue: getBattery(dataValue.substring(66, 68))\n            }];\n            break;\n        case '09':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16));\n            measurementArray = [{\n                measurementId: '4200',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'Event Status',\n                measurementValue: getEventStatus(dataValue.substring(0, 6))\n            }, {\n                measurementId: '4197',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'Longitude',\n                measurementValue: parseFloat(getSensorValue(dataValue.substring(16, 24), 1000000))\n            }, {\n                measurementId: '4198',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'Latitude',\n                measurementValue: parseFloat(getSensorValue(dataValue.substring(24, 32), 1000000))\n            }, {\n                measurementId: '3000',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'Battery',\n                measurementValue: getBattery(dataValue.substring(32, 34))\n            }];\n            break;\n        case '0A':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16));\n            measurementArray = [{\n                measurementId: '4200',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'Event Status',\n                measurementValue: getEventStatus(dataValue.substring(0, 6))\n            }, {\n                measurementId: '5001',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'Wi-Fi Scan',\n                measurementValue: getMacAndRssiObj(dataValue.substring(16, 72))\n            }, {\n                measurementId: '3000',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'Battery',\n                measurementValue: getBattery(dataValue.substring(72, 74))\n            }];\n            break;\n        case '0B':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16));\n            measurementArray = [{\n                measurementId: '4200',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'Event Status',\n                measurementValue: getEventStatus(dataValue.substring(0, 6))\n            }, {\n                measurementId: '5002',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'BLE Scan',\n                measurementValue: getMacAndRssiObj(dataValue.substring(16, 58))\n            }, {\n                measurementId: '3000',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'Battery',\n                measurementValue: getBattery(dataValue.substring(58, 60))\n            }];\n            break;\n        case '0D':\n            var errorCode = getInt(dataValue);\n            var error = '';\n            switch (errorCode) {\n                case 1:\n                    error = 'FAILED TO OBTAIN THE UTC TIMESTAMP';\n                    break;\n                case 2:\n                    error = 'ALMANAC TOO OLD';\n                    break;\n                case 3:\n                    error = 'DOPPLER ERROR';\n                    break;\n            }\n            measurementArray.push({\n                errorCode: errorCode,\n                error: error\n            });\n            break;\n        case '0E':\n            shardFlag = getShardFlag(dataValue.substring(0, 2));\n            groupId = getInt(dataValue.substring(2, 6));\n            payload = dataValue.substring(6);\n            measurement = {\n                measurementId: '6152',\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'gnss-ng payload',\n                measurementValue: payload\n            };\n            measurementArray.push(measurement);\n            break;\n        case '0F':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16));\n            shardFlag = getShardFlag(dataValue.substring(26, 28));\n            groupId = getInt(dataValue.substring(28, 32));\n            measurementArray.push({\n                measurementId: '4200',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'Event Status',\n                measurementValue: getEventStatus(dataValue.substring(0, 6))\n            });\n            measurementArray.push({\n                measurementId: '4097',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'Air Temperature',\n                measurementValue: '' + getSensorValue(dataValue.substring(16, 20), 10)\n            });\n            measurementArray.push({\n                measurementId: '4199',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'Light',\n                measurementValue: '' + getSensorValue(dataValue.substring(20, 24))\n            });\n            measurementArray.push({\n                measurementId: '3000',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'Battery',\n                measurementValue: '' + getBattery(dataValue.substring(24, 26))\n            });\n            break;\n        case '10':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16));\n            shardFlag = getShardFlag(dataValue.substring(18, 20));\n            groupId = getInt(dataValue.substring(20, 24));\n            measurementArray.push({\n                measurementId: '4200',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'Event Status',\n                measurementValue: getEventStatus(dataValue.substring(0, 6))\n            });\n            measurementArray.push({\n                measurementId: '3000',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'Battery',\n                measurementValue: '' + getBattery(dataValue.substring(16, 18))\n            });\n            break;\n        case '11':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16));\n            measurementArray.push({\n                measurementId: '3576',\n                timestamp: collectTime,\n                type: 'Positing Status',\n                measurementValue: '' + getPositingStatus(dataValue.substring(0, 2))\n            });\n            measurementArray.push({\n                timestamp: collectTime,\n                measurementId: '4200',\n                type: 'Event Status',\n                measurementValue: getEventStatus(dataValue.substring(2, 8))\n            });\n            if (!isNaN(parseFloat(getSensorValue(dataValue.substring(16, 20), 10)))) {\n                measurementArray.push({\n                    timestamp: collectTime,\n                    measurementId: '4097',\n                    type: 'Air Temperature',\n                    measurementValue: '' + getSensorValue(dataValue.substring(16, 20), 10)\n                });\n            }\n            if (!isNaN(parseFloat(getSensorValue(dataValue.substring(20, 24))))) {\n                measurementArray.push({\n                    timestamp: collectTime,\n                    measurementId: '4199',\n                    type: 'Light',\n                    measurementValue: '' + getSensorValue(dataValue.substring(20, 24))\n                });\n            }\n            measurementArray.push({\n                timestamp: collectTime,\n                measurementId: '3000',\n                type: 'Battery',\n                measurementValue: '' + getBattery(dataValue.substring(24, 26))\n            });\n            break;\n    }\n    return measurementArray;\n}\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n\nfunction getMotionId(str) {\n    return getInt(str);\n}\nfunction getPositingStatus(str) {\n    return getInt(str);\n}\nfunction getUpShortInfo(messageValue) {\n    return [{\n        measurementId: '3000',\n        type: 'Battery',\n        measurementValue: getBattery(messageValue.substring(0, 2))\n    }, {\n        measurementId: '3502',\n        type: 'Firmware Version',\n        measurementValue: getSoftVersion(messageValue.substring(2, 6))\n    }, {\n        measurementId: '3001',\n        type: 'Hardware Version',\n        measurementValue: getHardVersion(messageValue.substring(6, 10))\n    }, {\n        measurementId: '3940',\n        type: 'Work Mode',\n        measurementValue: getWorkingMode(messageValue.substring(10, 12))\n    }, {\n        measurementId: '3965',\n        type: 'Positioning Strategy',\n        measurementValue: getPositioningStrategy(messageValue.substring(12, 14))\n    }, {\n        measurementId: '3942',\n        type: 'Heartbeat Interval',\n        measurementValue: getMinsByMin(messageValue.substring(14, 18))\n    }, {\n        measurementId: '3943',\n        type: 'Periodic Interval',\n        measurementValue: getMinsByMin(messageValue.substring(18, 22))\n    }, {\n        measurementId: '3944',\n        type: 'Event Interval',\n        measurementValue: getMinsByMin(messageValue.substring(22, 26))\n    }, {\n        measurementId: '3945',\n        type: 'Sensor Enable',\n        measurementValue: getInt(messageValue.substring(26, 28))\n    }, {\n        measurementId: '3941',\n        type: 'SOS Mode',\n        measurementValue: getSOSMode(messageValue.substring(28, 30))\n    }];\n}\nfunction getMotionSetting(str) {\n    return [{\n        measurementId: '3946',\n        type: 'Motion Enable',\n        measurementValue: getInt(str.substring(0, 2))\n    }, {\n        measurementId: '3947',\n        type: 'Any Motion Threshold',\n        measurementValue: getSensorValue(str.substring(2, 6), 1)\n    }, {\n        measurementId: '3948',\n        type: 'Motion Start Interval',\n        measurementValue: getMinsByMin(str.substring(6, 10))\n    }];\n}\nfunction getStaticSetting(str) {\n    return [{\n        measurementId: '3949',\n        type: 'Static Enable',\n        measurementValue: getInt(str.substring(0, 2))\n    }, {\n        measurementId: '3950',\n        type: 'Device Static Timeout',\n        measurementValue: getMinsByMin(str.substring(2, 6))\n    }];\n}\nfunction getShockSetting(str) {\n    return [{\n        measurementId: '3951',\n        type: 'Shock Enable',\n        measurementValue: getInt(str.substring(0, 2))\n    }, {\n        measurementId: '3952',\n        type: 'Shock Threshold',\n        measurementValue: getInt(str.substring(2, 6))\n    }];\n}\nfunction getTempSetting(str) {\n    return [{\n        measurementId: '3953',\n        type: 'Temp Enable',\n        measurementValue: getInt(str.substring(0, 2))\n    }, {\n        measurementId: '3954',\n        type: 'Event Temp Interval',\n        measurementValue: getMinsByMin(str.substring(2, 6))\n    }, {\n        measurementId: '3955',\n        type: 'Event Temp Sample Interval',\n        measurementValue: getSecondsByInt(str.substring(6, 10))\n    }, {\n        measurementId: '3956',\n        type: 'Temp ThMax',\n        measurementValue: getSensorValue(str.substring(10, 14), 10)\n    }, {\n        measurementId: '3957',\n        type: 'Temp ThMin',\n        measurementValue: getSensorValue(str.substring(14, 18), 10)\n    }, {\n        measurementId: '3958',\n        type: 'Temp Warning Type',\n        measurementValue: getInt(str.substring(18, 20))\n    }];\n}\nfunction getLightSetting(str) {\n    return [{\n        measurementId: '3959',\n        type: 'Light Enable',\n        measurementValue: getInt(str.substring(0, 2))\n    }, {\n        measurementId: '3960',\n        type: 'Event Light Interval',\n        measurementValue: getMinsByMin(str.substring(2, 6))\n    }, {\n        measurementId: '3961',\n        type: 'Event Light Sample Interval',\n        measurementValue: getSecondsByInt(str.substring(6, 10))\n    }, {\n        measurementId: '3962',\n        type: 'Light ThMax',\n        measurementValue: getSensorValue(str.substring(10, 14), 10)\n    }, {\n        measurementId: '3963',\n        type: 'Light ThMin',\n        measurementValue: getSensorValue(str.substring(14, 18), 10)\n    }, {\n        measurementId: '3964',\n        type: 'Light Warning Type',\n        measurementValue: getInt(str.substring(18, 20))\n    }];\n}\nfunction getShardFlag(str) {\n    var bitStr = getByteArray(str);\n    return {\n        count: parseInt(bitStr.substring(0, 4), 2),\n        index: parseInt(bitStr.substring(4), 2)\n    };\n}\nfunction getBattery(batteryStr) {\n    return loraWANV2DataFormat(batteryStr);\n}\nfunction getSoftVersion(softVersion) {\n    return \"\".concat(loraWANV2DataFormat(softVersion.substring(0, 2)), \".\").concat(loraWANV2DataFormat(softVersion.substring(2, 4)));\n}\nfunction getHardVersion(hardVersion) {\n    return \"\".concat(loraWANV2DataFormat(hardVersion.substring(0, 2)), \".\").concat(loraWANV2DataFormat(hardVersion.substring(2, 4)));\n}\nfunction getSecondsByInt(str) {\n    return getInt(str);\n}\nfunction getMinsByMin(str) {\n    return getInt(str);\n}\nfunction getSensorValue(str, dig) {\n    if (str === '8000') {\n        return null;\n    } else {\n        return loraWANV2DataFormat(str, dig);\n    }\n}\nfunction bytes2HexString(arrBytes) {\n    var str = '';\n    for (var i = 0; i < arrBytes.length; i++) {\n        var tmp;\n        var num = arrBytes[i];\n        if (num < 0) {\n            tmp = (255 + num + 1).toString(16);\n        } else {\n            tmp = num.toString(16);\n        }\n        if (tmp.length === 1) {\n            tmp = '0' + tmp;\n        }\n        str += tmp;\n    }\n    return str;\n}\nfunction loraWANV2DataFormat(str) {\n    var divisor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var strReverse = bigEndianTransform(str);\n    var str2 = toBinary(strReverse);\n    if (str2.substring(0, 1) === '1') {\n        var arr = str2.split('');\n        var reverseArr = arr.map(function (item) {\n            if (parseInt(item) === 1) {\n                return 0;\n            } else {\n                return 1;\n            }\n        });\n        str2 = parseInt(reverseArr.join(''), 2) + 1;\n        return '-' + str2 / divisor;\n    }\n    return parseInt(str2, 2) / divisor;\n}\nfunction bigEndianTransform(data) {\n    var dataArray = [];\n    for (var i = 0; i < data.length; i += 2) {\n        dataArray.push(data.substring(i, i + 2));\n    }\n    return dataArray;\n}\nfunction toBinary(arr) {\n    var binaryData = arr.map(function (item) {\n        var data = parseInt(item, 16).toString(2);\n        var dataLength = data.length;\n        if (data.length !== 8) {\n            for (var i = 0; i < 8 - dataLength; i++) {\n                data = \"0\" + data;\n            }\n        }\n        return data;\n    });\n    return binaryData.toString().replace(/,/g, '');\n}\nfunction getSOSMode(str) {\n    return loraWANV2DataFormat(str);\n}\nfunction getMacAndRssiObj(pair) {\n    var pairs = [];\n    if (pair.length % 14 === 0) {\n        for (var i = 0; i < pair.length; i += 14) {\n            var mac = getMacAddress(pair.substring(i, i + 12));\n            if (mac) {\n                var rssi = getInt8RSSI(pair.substring(i + 12, i + 14));\n                pairs.push({\n                    mac: mac,\n                    rssi: rssi\n                });\n            } else {\n                continue;\n            }\n        }\n    }\n    return pairs;\n}\nfunction getMacAddress(str) {\n    if (str.toLowerCase() === 'ffffffffffff') {\n        return null;\n    }\n    var macArr = [];\n    for (var i = 1; i < str.length; i++) {\n        if (i % 2 === 1) {\n            macArr.push(str.substring(i - 1, i + 1));\n        }\n    }\n    var mac = '';\n    for (var _i = 0; _i < macArr.length; _i++) {\n        mac = mac + macArr[_i];\n        if (_i < macArr.length - 1) {\n            mac = mac + ':';\n        }\n    }\n    return mac;\n}\nfunction getInt8RSSI(str) {\n    return loraWANV2DataFormat(str);\n}\nfunction getInt(str) {\n    return parseInt(str, 16);\n}\nfunction getEventStatus(str) {\n    // return getInt(str)\n    var bitStr = getByteArray(str);\n    var bitArr = [];\n    for (var i = 0; i < bitStr.length; i++) {\n        bitArr[i] = bitStr.substring(i, i + 1);\n    }\n    bitArr = bitArr.reverse();\n    var event = [];\n    for (var _i2 = 0; _i2 < bitArr.length; _i2++) {\n        if (bitArr[_i2] !== '1') {\n            continue;\n        }\n        switch (_i2) {\n            case 0:\n                event.push({\n                    id: 1,\n                    eventName: \"Start moving event.\"\n                });\n                break;\n            case 1:\n                event.push({\n                    id: 2,\n                    eventName: \"End movement event.\"\n                });\n                break;\n            case 2:\n                event.push({\n                    id: 3,\n                    eventName: \"Motionless event.\"\n                });\n                break;\n            case 3:\n                event.push({\n                    id: 4,\n                    eventName: \"Shock event.\"\n                });\n                break;\n            case 4:\n                event.push({\n                    id: 5,\n                    eventName: \"Temperature event.\"\n                });\n                break;\n            case 5:\n                event.push({\n                    id: 6,\n                    eventName: \"Light event.\"\n                });\n                break;\n            case 6:\n                event.push({\n                    id: 7,\n                    eventName: \"SOS event.\"\n                });\n                break;\n            case 7:\n                event.push({\n                    id: 8,\n                    eventName: \"Press once event.\"\n                });\n                break;\n        }\n    }\n    return event;\n}\nfunction getByteArray(str) {\n    var bytes = [];\n    for (var i = 0; i < str.length; i += 2) {\n        bytes.push(str.substring(i, i + 2));\n    }\n    return toBinary(bytes);\n}\nfunction getWorkingMode(workingMode) {\n    return getInt(workingMode);\n}\nfunction getPositioningStrategy(strategy) {\n    return getInt(strategy);\n}\nfunction getUTCTimestamp(str) {\n    return parseInt(loraWANV2PositiveDataFormat(str)) * 1000;\n}\nfunction loraWANV2PositiveDataFormat(str) {\n    var divisor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var strReverse = bigEndianTransform(str);\n    var str2 = toBinary(strReverse);\n    return parseInt(str2, 2) / divisor;\n}\n"))),(0,r.yg)("details",null,(0,r.yg)("summary",null,"For AWS"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"const AWS = require('aws-sdk');\nconst iotdata = new AWS.IotData({\n    endpoint: 'a39w0g3w5os1ti-ats.iot.us-east-1.amazonaws.com'\n});\n\nfunction decodeUplink (input) {\n    // var bytes = input['bytes']\n    var bytes = Buffer.from(input, 'base64');\n    var bytesString = bytes2HexString(bytes).toLocaleUpperCase()\n    var decoded = {\n        valid: true,\n        err: 0,\n        payload: bytesString,\n        messages: []\n    }\n    let measurement = messageAnalyzed(bytesString)\n    decoded.messages = measurement\n    return { data: decoded }\n}\n\nfunction messageAnalyzed (messageValue) {\n    try {\n        let frames = unpack(messageValue)\n        let measurementResultArray = []\n        for (let i = 0; i < frames.length; i++) {\n            let item = frames[i]\n            let dataId = item.dataId\n            let dataValue = item.dataValue\n            let measurementArray = deserialize(dataId, dataValue)\n            measurementResultArray.push(measurementArray)\n        }\n        return measurementResultArray\n    } catch (e) {\n        return e.toString()\n    }\n}\n\nfunction unpack (messageValue) {\n    let frameArray = []\n\n    for (let i = 0; i < messageValue.length; i++) {\n        let remainMessage = messageValue\n        let dataId = remainMessage.substring(0, 2).toUpperCase()\n        let dataValue\n        let dataObj = {}\n        let packageLen\n        switch (dataId) {\n            case '01':\n                packageLen = 94\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '02':\n                packageLen = 32\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '03':\n                packageLen = 64\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                break\n            case '04':\n                packageLen = 20\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '05':\n                packageLen = 10\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '06':\n                packageLen = 44\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '07':\n                packageLen = 84\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '08':\n                packageLen = 70\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '09':\n                packageLen = 36\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '0A':\n                packageLen = 76\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '0B':\n                packageLen = 62\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '0C':\n                packageLen = 2\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                break\n            case '0D':\n                packageLen = 10\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            default:\n                return frameArray\n        }\n        if (dataValue.length < 2) {\n            break\n        }\n        frameArray.push(dataObj)\n    }\n    return frameArray\n}\n\nfunction deserialize (dataId, dataValue) {\n    let measurementArray = []\n    let eventList = []\n    let collectTime = 0\n    switch (dataId) {\n        case '01':\n            measurementArray = getUpShortInfo(dataValue)\n            break\n        case '02':\n            measurementArray = getUpShortInfo(dataValue)\n            break\n        case '03':\n            break\n        case '04':\n            measurementArray = [\n                {measurementId: '3940', type: 'Work Mode', measurementValue: getWorkingMode(dataValue.substring(0, 2))},\n                {measurementId: '3942', type: 'Heartbeat Interval', measurementValue: getOneWeekInterval(dataValue.substring(4, 8))},\n                {measurementId: '3943', type: 'Periodic Interval', measurementValue: getOneWeekInterval(dataValue.substring(8, 12))},\n                {measurementId: '3944', type: 'Event Interval', measurementValue: getOneWeekInterval(dataValue.substring(12, 16))},\n                {measurementId: '3941', type: 'SOS Mode', measurementValue: getSOSMode(dataValue.substring(16, 18))}\n            ]\n            break;\n        case '05':\n            measurementArray = [\n                {measurementId: '3000', type: 'Battery', measurementValue: getBattery(dataValue.substring(0, 2))},\n                {measurementId: '3940', type: 'Work Mode', measurementValue: getWorkingMode(dataValue.substring(2, 4))},\n                {measurementId: '3941', type: 'SOS Mode', measurementValue: getSOSMode(dataValue.substring(6, 8))}\n            ]\n            break\n        case '06':\n            eventList = getEventStatus(dataValue.substring(0, 6))\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray = [\n                {measurementId: '4200', type: 'SOS Event', measurementValue: eventList[6]},\n                {measurementId: '4197', type: 'Longitude', measurementValue: getSensorValue(dataValue.substring(16, 24), 1000000)},\n                {measurementId: '4198', type: 'Latitude', measurementValue: getSensorValue(dataValue.substring(24, 32), 1000000)},\n                {measurementId: '4097', type: 'Air Temperature', measurementValue: getSensorValue(dataValue.substring(32, 36), 10)},\n                {measurementId: '4199', type: 'Light', measurementValue: getSensorValue(dataValue.substring(36, 40))},\n                {measurementId: '3000', type: 'Battery', measurementValue: getBattery(dataValue.substring(40, 42))},\n                {type: 'Timestamp', measurementValue: collectTime}\n            ]\n            break\n        case '07':\n            eventList = getEventStatus(dataValue.substring(0, 6))\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray = [\n                {measurementId: '4200', type: 'SOS Event', measurementValue: eventList[6]},\n                {measurementId: '5001', type: 'Wi-Fi Scan', measurementValue: getMacAndRssiObj(dataValue.substring(16, 72))},\n                {measurementId: '4097', type: 'Air Temperature', measurementValue: getSensorValue(dataValue.substring(72, 76), 10)},\n                {measurementId: '4199', type: 'Light', measurementValue: getSensorValue(dataValue.substring(76, 80))},\n                {measurementId: '3000', type: 'Battery', measurementValue: getBattery(dataValue.substring(80, 82))},\n                {type: 'Timestamp', measurementValue: collectTime}\n            ]\n            break\n        case '08':\n            eventList = getEventStatus(dataValue.substring(0, 6))\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray = [\n                {measurementId: '4200', type: 'SOS Event', measurementValue: eventList[6]},\n                {measurementId: '5002', type: 'BLE Scan', measurementValue: getMacAndRssiObj(dataValue.substring(16, 58))},\n                {measurementId: '4097', type: 'Air Temperature', measurementValue: getSensorValue(dataValue.substring(58, 62), 10)},\n                {measurementId: '4199', type: 'Light', measurementValue: getSensorValue(dataValue.substring(62, 66))},\n                {measurementId: '3000', type: 'Battery', measurementValue: getBattery(dataValue.substring(66, 68))},\n                {type: 'Timestamp', measurementValue: collectTime}\n            ]\n            break\n        case '09':\n            eventList = getEventStatus(dataValue.substring(0, 6))\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray = [\n                {measurementId: '4200', type: 'SOS Event', measurementValue: eventList[6]},\n                {measurementId: '4197', type: 'Longitude', measurementValue: getSensorValue(dataValue.substring(16, 24), 1000000)},\n                {measurementId: '4198', type: 'Latitude', measurementValue: getSensorValue(dataValue.substring(24, 32), 1000000)},\n                {measurementId: '3000', type: 'Battery', measurementValue: getBattery(dataValue.substring(32, 34))},\n                {type: 'Timestamp', measurementValue: collectTime}\n            ]\n            break\n        case '0A':\n            eventList = getEventStatus(dataValue.substring(0, 6))\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray = [\n                {measurementId: '4200', type: 'SOS Event', measurementValue: eventList[6]},\n                {measurementId: '5001', type: 'Wi-Fi Scan', measurementValue: getMacAndRssiObj(dataValue.substring(16, 72))},\n                {measurementId: '3000', type: 'Battery', measurementValue: getBattery(dataValue.substring(72, 74))},\n                {type: 'Timestamp', measurementValue: collectTime}\n            ]\n            break\n        case '0B':\n            eventList = getEventStatus(dataValue.substring(0, 6))\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray = [\n                {measurementId: '4200', type: 'SOS Event', measurementValue: eventList[6]},\n                {measurementId: '5002', type: 'BLE Scan', measurementValue: getMacAndRssiObj(dataValue.substring(16, 58))},\n                {measurementId: '3000', type: 'Battery', measurementValue: getBattery(dataValue.substring(58, 60))},\n                {type: 'Timestamp', measurementValue: collectTime}\n            ]\n            break\n        case '0D':\n            let errorCode = getInt(dataValue)\n            let error = ''\n            switch (errorCode) {\n                case 0:\n                    error = 'THE GNSS SCAN TIME OUT'\n                    break\n                case 1:\n                    error = 'THE WI-FI SCAN TIME OUT'\n                    break\n                case 2:\n                    error = 'THE WI-FI+GNSS SCAN TIME OUT'\n                    break\n                case 3:\n                    error = 'THE GNSS+WI-FI SCAN TIME OUT'\n                    break\n                case 4:\n                    error = 'THE BEACON SCAN TIME OUT'\n                    break\n                case 5:\n                    error = 'THE BEACON+WI-FI SCAN TIME OUT'\n                    break\n                case 6:\n                    error = 'THE BEACON+GNSS SCAN TIME OUT'\n                    break\n                case 7:\n                    error = 'THE BEACON+WI-FI+GNSS SCAN TIME OUT'\n                    break\n                case 8:\n                    error = 'FAILED TO OBTAIN THE UTC TIMESTAMP'\n                    break\n            }\n            measurementArray.push({errorCode, error})\n    }\n    return measurementArray\n}\n\nfunction getUpShortInfo (messageValue) {\n    return [\n        {\n            measurementId: '3000', type: 'Battery', measurementValue: getBattery(messageValue.substring(0, 2))\n        }, {\n            measurementId: '3502', type: 'Firmware Version', measurementValue: getSoftVersion(messageValue.substring(2, 6))\n        }, {\n            measurementId: '3001', type: 'Hardware Version', measurementValue: getHardVersion(messageValue.substring(6, 10))\n        }, {\n            measurementId: '3940', type: 'Work Mode', measurementValue: getWorkingMode(messageValue.substring(10, 12))\n        }, {\n            measurementId: '3942', type: 'Heartbeat Interval', measurementValue: getOneWeekInterval(messageValue.substring(14, 18))\n        }, {\n            measurementId: '3943', type: 'Periodic Interval', measurementValue: getOneWeekInterval(messageValue.substring(18, 22))\n        }, {\n            measurementId: '3944', type: 'Event Interval', measurementValue: getOneWeekInterval(messageValue.substring(22, 26))\n        }, {\n            measurementId: '3941', type: 'SOS Mode', measurementValue: getSOSMode(messageValue.substring(28, 30))\n        }\n    ]\n}\nfunction getBattery (batteryStr) {\n    return loraWANV2DataFormat(batteryStr)\n}\nfunction getSoftVersion (softVersion) {\n    return `${loraWANV2DataFormat(softVersion.substring(0, 2))}.${loraWANV2DataFormat(softVersion.substring(2, 4))}`\n}\nfunction getHardVersion (hardVersion) {\n    return `${loraWANV2DataFormat(hardVersion.substring(0, 2))}.${loraWANV2DataFormat(hardVersion.substring(2, 4))}`\n}\n\nfunction getOneWeekInterval (str) {\n    return loraWANV2DataFormat(str) * 60\n}\nfunction getSensorValue (str, dig) {\n    if (str === '8000') {\n        return null\n    } else {\n        return loraWANV2DataFormat(str, dig)\n    }\n}\n\nfunction bytes2HexString (arrBytes) {\n    var str = ''\n    for (var i = 0; i < arrBytes.length; i++) {\n        var tmp\n        var num = arrBytes[i]\n        if (num < 0) {\n            tmp = (255 + num + 1).toString(16)\n        } else {\n            tmp = num.toString(16)\n        }\n        if (tmp.length === 1) {\n            tmp = '0' + tmp\n        }\n        str += tmp\n    }\n    return str\n}\nfunction loraWANV2DataFormat (str, divisor = 1) {\n    let strReverse = bigEndianTransform(str)\n    let str2 = toBinary(strReverse)\n    if (str2.substring(0, 1) === '1') {\n        let arr = str2.split('')\n        let reverseArr = arr.map((item) => {\n            if (parseInt(item) === 1) {\n                return 0\n            } else {\n                return 1\n            }\n        })\n        str2 = parseInt(reverseArr.join(''), 2) + 1\n        return '-' + str2 / divisor\n    }\n    return parseInt(str2, 2) / divisor\n}\n\nfunction bigEndianTransform (data) {\n    let dataArray = []\n    for (let i = 0; i < data.length; i += 2) {\n        dataArray.push(data.substring(i, i + 2))\n    }\n    return dataArray\n}\n\nfunction toBinary (arr) {\n    let binaryData = arr.map((item) => {\n        let data = parseInt(item, 16)\n            .toString(2)\n        let dataLength = data.length\n        if (data.length !== 8) {\n            for (let i = 0; i < 8 - dataLength; i++) {\n                data = `0` + data\n            }\n        }\n        return data\n    })\n    return binaryData.toString().replace(/,/g, '')\n}\n\nfunction getSOSMode (str) {\n    return loraWANV2DataFormat(str)\n}\n\nfunction getMacAndRssiObj (pair) {\n    let pairs = []\n    if (pair.length % 14 === 0) {\n        for (let i = 0; i < pair.length; i += 14) {\n            let mac = getMacAddress(pair.substring(i, i + 12))\n            if (mac) {\n                let rssi = getInt8RSSI(pair.substring(i + 12, i + 14))\n                pairs.push({mac: mac, rssi: rssi})\n            } else {\n                continue\n            }\n        }\n    }\n    return pairs\n}\n\nfunction getMacAddress (str) {\n    if (str.toLowerCase() === 'ffffffffffff') {\n        return null\n    }\n    let macArr = []\n    for (let i = 1; i < str.length; i++) {\n        if (i % 2 === 1) {\n            macArr.push(str.substring(i - 1, i + 1))\n        }\n    }\n    let mac = ''\n    for (let i = 0; i < macArr.length; i++) {\n        mac = mac + macArr[i]\n        if (i < macArr.length - 1) {\n            mac = mac + ':'\n        }\n    }\n    return mac\n}\n\nfunction getInt8RSSI (str) {\n    return loraWANV2DataFormat(str)\n}\n\nfunction getInt (str) {\n    return parseInt(str)\n}\n\n/**\n *  1.MOVING_STARTING\n *  2.MOVING_END\n *  3.DEVICE_STATIC\n *  4.SHOCK_EVENT\n *  5.TEMP_EVENT\n *  6.LIGHTING_EVENT\n *  7.SOS_EVENT\n *  8.CUSTOMER_EVENT\n * */\nfunction getEventStatus (str) {\n    let bitStr = getByteArray(str)\n    let event = []\n    for (let i = bitStr.length; i >= 0; i--) {\n        if (i === 0) {\n            event[i] = bitStr.substring(0)\n        } else {\n            event[i] = bitStr.substring(i - 1, i)\n        }\n    }\n    return event.reverse()\n}\n\nfunction getByteArray (str) {\n    let bytes = []\n    for (let i = 0; i < str.length; i += 2) {\n        bytes.push(str.substring(i, i + 2))\n    }\n    return toBinary(bytes)\n}\n\nfunction getWorkingMode (workingMode) {\n    return getInt(workingMode)\n}\n\nfunction getUTCTimestamp(str){\n    return parseInt(loraWANV2PositiveDataFormat(str)) * 1000\n}\n\nfunction loraWANV2PositiveDataFormat (str, divisor = 1) {\n    let strReverse = bigEndianTransform(str)\n    let str2 = toBinary(strReverse)\n    return parseInt(str2, 2) / divisor\n}\n\nexports.handler = async (event) => {\n  try {\n    const lorawan_info = event[\"WirelessMetadata\"][\"LoRaWAN\"];\n    const lorawan_data = event[\"PayloadData\"];\n\n    const params = {\n      topic: 'sensecap/t1000',\n      payload: JSON.stringify({\n        eui: lorawan_info[\"DevEui\"],\n        timestamp:  lorawan_info[\"Timestamp\"],\n        data: decodeUplink(lorawan_data)[\"data\"]\n      }),\n      qos: 0\n    };\n\n    await iotdata.publish(params).promise();\n\n    return {\n      statusCode: 200,\n      body: 'Message published successfully'+JSON.stringify(event)\n    };\n  } catch (error) {\n    console.error('Error publishing message:', error);\n\n    return {\n      statusCode: 500,\n      body: 'Error publishing message'\n    };\n  }\n};\n"))),(0,r.yg)("h3",{id:"wio-tracker-1110-dev-board"},"Wio Tracker 1110 Dev Board"),(0,r.yg)("p",null,"The ",(0,r.yg)("a",{parentName:"p",href:"https://www.seeedstudio.com/Wio-Tracker-1110-Dev-Board-p-5799.html"},"Wio Tracker 1110 Dev Board")," is based on ",(0,r.yg)("a",{parentName:"p",href:"https://www.seeedstudio.com/Wio-WM1110-Module-LR1110-and-nRF52840-p-5676.html"},"Wio-WM1110 Wireless Module")," and integrates ",(0,r.yg)("a",{parentName:"p",href:"https://www.semtech.com/products/wireless-rf/lora-edge/lr1110"},"Semtech's LR1110")," LoRa\xae transceiver and a multi-purpose radio front-end for geolocation, it's a user-friendly, LoRa-based tracking development platform. "),(0,r.yg)("p",null,"With its compact size and rich interfaces, the Wio Tracker 1110 Dev Board is conveniently equipped with an onboard antenna for easy deployment. It supports the Arduino development environment and LoRaWAN protocol stack, making it ideal for tracking-related IoT projects."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/wio_tracker/wio-tracker.png",alt:"pir",width:700,height:"auto"})),(0,r.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,r.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Wio-Tracker-1110-Dev-Board-p-5799.html"},(0,r.yg)("strong",null,(0,r.yg)("span",null,(0,r.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now "))))),(0,r.yg)("h4",{id:"decoder-1"},"Decoder"),(0,r.yg)("details",null,(0,r.yg)("summary",null,"For TTN"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"function decodeUplink (input) {\n    const bytes = input['bytes']\n    const fport = parseInt(input['fPort'])\n    const bytesString = bytes2HexString(bytes)\n    const originMessage = bytesString.toLocaleUpperCase()\n    const decoded = {\n        valid: true,\n        err: 0,\n        payload: bytesString,\n        messages: []\n    }\n    if (fport === 199 || fport === 192) {\n        decoded.messages.push({fport: fport, payload: bytesString})\n        return { data: decoded }\n    }\n    if (fport !== 5) {\n        decoded.valid = false\n        return { data: decoded }\n    }\n    let measurement = messageAnalyzed(originMessage)\n    if (measurement.length === 0) {\n        decoded.valid = false\n        return { data: decoded }\n    }\n\n    for (let message of measurement) {\n        if (message.length === 0) {\n            continue\n        }\n        let elements = []\n        for (let element of message) {\n            if (element.errorCode) {\n                decoded.err = element.errorCode\n                decoded.errMessage = element.error\n            } else {\n                elements.push(element)\n            }\n        }\n        if (elements.length > 0) {\n            decoded.messages.push(elements)\n        }\n    }\n    // decoded.messages = measurement\n    return { data: decoded }\n}\n\nfunction messageAnalyzed (messageValue) {\n    try {\n        let frames = unpack(messageValue)\n        let measurementResultArray = []\n        for (let i = 0; i < frames.length; i++) {\n            let item = frames[i]\n            let dataId = item.dataId\n            let dataValue = item.dataValue\n            let measurementArray = deserialize(dataId, dataValue)\n            measurementResultArray.push(measurementArray)\n        }\n        return measurementResultArray\n    } catch (e) {\n        return e.toString()\n    }\n}\n\nfunction unpack (messageValue) {\n    let frameArray = []\n\n    for (let i = 0; i < messageValue.length; i++) {\n        let remainMessage = messageValue\n        let dataId = remainMessage.substring(0, 2).toUpperCase()\n        let dataValue\n        let dataObj = {}\n        let packageLen\n        switch (dataId) {\n            case '12':\n                packageLen = getInt(remainMessage.substring(8, 10)) * 2 + 10\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, 8) + remainMessage.substring(10, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '13':\n                packageLen = 24\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '14':\n                packageLen = 74\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '15':\n                packageLen = 60\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '16':\n                packageLen = 18\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '17':\n                let byteCount = parseInt(remainMessage.substring(2, 4), 16)\n                packageLen = getInt(remainMessage.substring(2, 4)) * 2\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(4, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                if (isNaN(byteCount) || byteCount < 13 || (byteCount - 9) % 4 !== 0 || byteCount > 49) {\n                    continue\n                }\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '18':\n                packageLen = 56\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            default:\n                return frameArray\n        }\n        if (dataValue.length < 2) {\n            break\n        }\n        frameArray.push(dataObj)\n    }\n    return frameArray\n}\n\nfunction deserialize (dataId, dataValue) {\n    let measurementArray = []\n    let eventList = []\n    let measurement = {}\n    let collectTime = parseInt(new Date().getTime() / 1000)\n    let groupId = 0\n    let shardFlag = {}\n    let payload = ''\n    let value\n    let result = []\n    let dataArr = []\n    switch (dataId) {\n        case '12':\n            shardFlag = getShardFlag(dataValue.substring(0, 2))\n            groupId = getInt(dataValue.substring(2, 6))\n            payload = dataValue.substring(6)\n            measurement = {\n                measurementId: '6152',\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'gnss-ng payload',\n                measurementValue: payload\n            }\n            measurementArray.push(measurement)\n            break\n        case '13':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            shardFlag = getShardFlag(dataValue.substring(16, 18))\n            groupId = getInt(dataValue.substring(18, 22))\n            measurementArray.push({\n                measurementId: '4200',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'Event Status',\n                measurementValue: getEventStatus(dataValue.substring(0, 6))\n            })\n            break\n        case '14':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray = [\n                {measurementId: '4200', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Event Status', measurementValue: getEventStatus(dataValue.substring(0, 6))},\n                {measurementId: '5001', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Wi-Fi Scan', measurementValue: getMacAndRssiObj(dataValue.substring(16, 72))}\n            ]\n            break\n        case '15':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray = [\n                {measurementId: '4200', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Event Status', measurementValue: getEventStatus(dataValue.substring(0, 6))},\n                {measurementId: '5002', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'BLE Scan', measurementValue: getMacAndRssiObj(dataValue.substring(16, 58))},\n            ]\n            break\n        case '16':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray.push({\n                measurementId: '3576',\n                timestamp: collectTime,\n                type: 'Positioning Status',\n                measurementValue: getPositingStatus(dataValue.substring(0, 2))\n            })\n            measurementArray.push({\n                timestamp: collectTime,\n                measurementId: '4200',\n                type: 'Event Status',\n                measurementValue: getEventStatus(dataValue.substring(2, 8))\n            })\n            break\n        case '17':\n            collectTime = getUTCTimestamp(dataValue.substring(6, 14))\n            value = getUnsignedSensorValue(dataValue.substring(0, 6))\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4208',\n                    measureTime: collectTime,\n                    type: 'Custom Event Status',\n                    measurementValue: value\n                })\n            }\n            let initId = 4165\n            for (let i = 14; i < dataValue.length; i += 8) {\n                value = getUnsignedSensorValue(dataValue.substring(i, i + 8))\n                if (value !== null) {\n                    measurementArray.push({\n                        timestamp: collectTime,\n                        measurementId: initId++,\n                        type: 'Custom Measurement Type',\n                        measurementValue: value\n                    })\n                }\n            }\n            break\n        case '18':\n            collectTime = getUTCTimestamp(dataValue.substring(6, 14))\n            measurementArray.push({\n                measurementId: '4200',\n                timestamp: collectTime,\n                type: 'Event Status',\n                measurementValue: getEventStatus(dataValue.substring(0, 6))\n            })\n            value = getSignSensorValue(dataValue.substring(14, 18), 10)\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4097',\n                    timestamp: collectTime,\n                    type: 'Air Temperature',\n                    measurementValue: value\n                })\n            }\n            value = getUnsignedSensorValue(dataValue.substring(18, 20), 1)\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4098',\n                    timestamp: collectTime,\n                    type: 'Air Humidity',\n                    measurementValue: value\n                })\n            }\n            value = getUnsignedSensorValue(dataValue.substring(20, 26), 1)\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4101',\n                    timestamp: collectTime,\n                    type: 'Barometric Pressure',\n                    measurementValue: value\n                })\n            }\n            value = getUnsignedSensorValue(dataValue.substring(26, 30), 1)\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4115',\n                    timestamp: collectTime,\n                    type: 'Distance',\n                    measurementValue: value\n                })\n            }\n            value = getUnsignedSensorValue(dataValue.substring(30, 34), 100)\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4190',\n                    timestamp: collectTime,\n                    type: 'UV Index',\n                    measurementValue: value\n                })\n            }\n            value = getUnsignedSensorValue(dataValue.substring(34, 38), 1)\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4206',\n                    timestamp: collectTime,\n                    type: 'VOC_INDEX',\n                    measurementValue: value\n                })\n            }\n            value = getUnsignedSensorValue(dataValue.substring(38, 42), 1)\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4207',\n                    timestamp: collectTime,\n                    type: 'Noise',\n                    measurementValue: value\n                })\n            }\n            value = getSignSensorValue(dataValue.substring(42, 46), 100)\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4150',\n                    timestamp: collectTime,\n                    type: ' AccelerometerX',\n                    measurementValue: value\n                })\n            }\n            value = getSignSensorValue(dataValue.substring(46, 50), 100)\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4151',\n                    timestamp: collectTime,\n                    type: 'AccelerometerY',\n                    measurementValue: value\n                })\n            }\n            value = getSignSensorValue(dataValue.substring(50, 54), 100)\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4152',\n                    timestamp: collectTime,\n                    type: 'AccelerometerZ',\n                    measurementValue: value\n                })\n            }\n            break\n    }\n    return measurementArray\n}\n\nfunction getMotionId (str) {\n    return getInt(str)\n}\n\nfunction getPositingStatus (str) {\n    let status = getInt(str)\n    switch (status) {\n        case 0:\n            return {id:status, statusName:\"Positioning successful.\"}\n        case 1:\n            return {id:status, statusName:\"The GNSS scan timed out and failed to obtain the location.\"}\n        case 2:\n            return {id:status, statusName:\"The Wi-Fi scan timed out and failed to obtain the location.\"}\n        case 3:\n            return {id:status, statusName:\"The Wi-Fi + GNSS scan timed out and failed to obtain the location.\"}\n        case 4:\n            return {id:status, statusName:\"The GNSS + Wi-Fi scan timed out and failed to obtain the location.\"}\n        case 5:\n            return {id:status, statusName:\"The Bluetooth scan timed out and failed to obtain the location.\"}\n        case 6:\n            return {id:status, statusName:\"The Bluetooth + Wi-Fi scan timed out and failed to obtain the location.\"}\n        case 7:\n            return {id:status, statusName:\"The Bluetooth + GNSS scan timed out and failed to obtain the location.\"}\n        case 8:\n            return {id:status, statusName:\"The Bluetooth + Wi-Fi + GNSS scan timed out and failed to obtain the location.\"}\n        case 9:\n            return {id:status, statusName:\"Location Server failed to parse the GNSS location.\"}\n        case 10:\n            return {id:status, statusName:\"Location Server failed to parse the Wi-Fi location.\"}\n        case 11:\n            return {id:status, statusName:\"Location Server failed to parse the Bluetooth location.\"}\n        case 12:\n            return {id:status, statusName:\"Failed to parse the GNSS location due to the poor accuracy.\"}\n        case 13:\n            return {id:status, statusName:\"Time synchronization failed.\"}\n        case 14:\n            return {id:status, statusName:\"Failed to obtain location due to the old Almanac.\"}\n    }\n    return getInt(str)\n}\n\nfunction getShardFlag (str) {\n    let bitStr = getByteArray(str)\n    return {\n        count: parseInt(bitStr.substring(0, 4), 2),\n        index: parseInt(bitStr.substring(4), 2)\n    }\n}\n\nfunction bytes2HexString (arrBytes) {\n    var str = ''\n    for (var i = 0; i < arrBytes.length; i++) {\n        var tmp\n        var num = arrBytes[i]\n        if (num < 0) {\n            tmp = (255 + num + 1).toString(16)\n        } else {\n            tmp = num.toString(16)\n        }\n        if (tmp.length === 1) {\n            tmp = '0' + tmp\n        }\n        str += tmp\n    }\n    return str\n}\nfunction loraWANV2DataFormat (str, divisor = 1) {\n    let strReverse = bigEndianTransform(str)\n    let str2 = toBinary(strReverse)\n    if (str2.substring(0, 1) === '1') {\n        let arr = str2.split('')\n        let reverseArr = arr.map((item) => {\n            if (parseInt(item) === 1) {\n                return 0\n            } else {\n                return 1\n            }\n        })\n        str2 = parseInt(reverseArr.join(''), 2) + 1\n        return parseFloat('-' + str2 / divisor)\n    }\n    return parseInt(str2, 2) / divisor\n}\n\nfunction bigEndianTransform (data) {\n    let dataArray = []\n    for (let i = 0; i < data.length; i += 2) {\n        dataArray.push(data.substring(i, i + 2))\n    }\n    return dataArray\n}\n\nfunction toBinary (arr) {\n    let binaryData = arr.map((item) => {\n        let data = parseInt(item, 16)\n            .toString(2)\n        let dataLength = data.length\n        if (data.length !== 8) {\n            for (let i = 0; i < 8 - dataLength; i++) {\n                data = `0` + data\n            }\n        }\n        return data\n    })\n    return binaryData.toString().replace(/,/g, '')\n}\n\nfunction getMacAndRssiObj (pair) {\n    let pairs = []\n    if (pair.length % 14 === 0) {\n        for (let i = 0; i < pair.length; i += 14) {\n            let mac = getMacAddress(pair.substring(i, i + 12))\n            if (mac) {\n                let rssi = getInt8RSSI(pair.substring(i + 12, i + 14))\n                pairs.push({mac: mac, rssi: rssi})\n            } else {\n                continue\n            }\n        }\n    }\n    return pairs\n}\n\nfunction getMacAddress (str) {\n    if (str.toLowerCase() === 'ffffffffffff') {\n        return null\n    }\n    let macArr = []\n    for (let i = 1; i < str.length; i++) {\n        if (i % 2 === 1) {\n            macArr.push(str.substring(i - 1, i + 1))\n        }\n    }\n    let mac = ''\n    for (let i = 0; i < macArr.length; i++) {\n        mac = mac + macArr[i]\n        if (i < macArr.length - 1) {\n            mac = mac + ':'\n        }\n    }\n    return mac\n}\n\nfunction getInt8RSSI (str) {\n    return loraWANV2DataFormat(str)\n}\n\nfunction getInt (str) {\n    return parseInt(str, 16)\n}\n\nfunction getEventStatus (str) {\n    // return getInt(str)\n    let bitStr = getByteArray(str)\n    let bitArr = []\n    for (let i = 0; i < bitStr.length; i++) {\n        bitArr[i] = bitStr.substring(i, i + 1)\n    }\n    bitArr = bitArr.reverse()\n    let event = []\n    for (let i = 0; i < bitArr.length; i++) {\n        if (bitArr[i] !== '1') {\n            continue\n        }\n        switch (i){\n            case 0:\n                event.push({id:1, eventName:\"Start moving event.\"})\n                break\n            case 1:\n                event.push({id:2, eventName:\"End movement event.\"})\n                break\n            case 2:\n                event.push({id:3, eventName:\"Motionless event.\"})\n                break\n            case 3:\n                event.push({id:4, eventName:\"Shock event.\"})\n                break\n            case 4:\n                event.push({id:5, eventName:\"Temperature event.\"})\n                break\n            case 5:\n                event.push({id:6, eventName:\"Light event.\"})\n                break\n            case 6:\n                event.push({id:7, eventName:\"SOS event.\"})\n                break\n            case 7:\n                event.push({id:8, eventName:\"Press once event.\"})\n                break\n        }\n    }\n    return event\n}\n\nfunction getByteArray (str) {\n    let bytes = []\n    for (let i = 0; i < str.length; i += 2) {\n        bytes.push(str.substring(i, i + 2))\n    }\n    return toBinary(bytes)\n}\n\nfunction getUTCTimestamp(str){\n    return parseInt(loraWANV2PositiveDataFormat(str)) * 1000\n}\nfunction getUnsignedSensorValue (str, dig = 1) {\n    if (isNull(str)) {\n        return null\n    }\n    return parseInt(str, 16) / dig\n}\nfunction isNull (str) {\n    if (str.substring(0, 1) !== '8') {\n        return false\n    }\n    for (let i = 1; i < str.length; i++) {\n        if (str.substring(i, i + 1) !== '0') {\n            return false\n        }\n    }\n    return true\n}\nfunction getSignSensorValue (str, dig = 1) {\n    if (isNull(str)) {\n        return null\n    }\n    return loraWANV2DataFormat(str, dig)\n}\nfunction loraWANV2PositiveDataFormat (str, divisor = 1) {\n    let strReverse = bigEndianTransform(str)\n    let str2 = toBinary(strReverse)\n    return parseInt(str2, 2) / divisor\n}\n"))),(0,r.yg)("details",null,(0,r.yg)("summary",null,"For Helium"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"function Decoder (bytes, port) {\n    const bytesString = bytes2HexString(bytes)\n    const originMessage = bytesString.toLocaleUpperCase()\n    const fport = parseInt(port)\n    const decoded = {\n        valid: true,\n        err: 0,\n        payload: bytesString,\n        messages: []\n    }\n\n    if (fport === 199 || fport === 192) {\n        decoded.messages.push({fport: fport, payload: bytesString})\n        return { data: decoded }\n    }\n    if (fport !== 5) {\n        decoded.valid = false\n        return { data: decoded }\n    }\n\n    let measurement = messageAnalyzed(originMessage)\n    if (measurement.length === 0) {\n        decoded.valid = false\n        return { data: decoded }\n    }\n\n    for (let message of measurement) {\n        if (message.length === 0) {\n            continue\n        }\n        let elements = []\n        for (let element of message) {\n            if (element.errorCode) {\n                decoded.err = element.errorCode\n                decoded.errMessage = element.error\n            } else {\n                elements.push(element)\n            }\n        }\n        if (elements.length > 0) {\n            decoded.messages.push(elements)\n        }\n    }\n    // decoded.messages = measurement\n    return { data: decoded }\n}\n\nfunction messageAnalyzed (messageValue) {\n    try {\n        let frames = unpack(messageValue)\n        let measurementResultArray = []\n        for (let i = 0; i < frames.length; i++) {\n            let item = frames[i]\n            let dataId = item.dataId\n            let dataValue = item.dataValue\n            let measurementArray = deserialize(dataId, dataValue)\n            measurementResultArray.push(measurementArray)\n        }\n        return measurementResultArray\n    } catch (e) {\n        return e.toString()\n    }\n}\n\nfunction unpack (messageValue) {\n    let frameArray = []\n\n    for (let i = 0; i < messageValue.length; i++) {\n        let remainMessage = messageValue\n        let dataId = remainMessage.substring(0, 2).toUpperCase()\n        let dataValue\n        let dataObj = {}\n        let packageLen\n        switch (dataId) {\n            case '12':\n                packageLen = getInt(remainMessage.substring(8, 10)) * 2 + 10\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, 8) + remainMessage.substring(10, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '13':\n                packageLen = 24\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '14':\n                packageLen = 74\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '15':\n                packageLen = 60\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '16':\n                packageLen = 18\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '17':\n                let byteCount = parseInt(remainMessage.substring(2, 4), 16)\n                packageLen = getInt(remainMessage.substring(2, 4)) * 2\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(4, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                if (isNaN(byteCount) || byteCount < 13 || (byteCount - 9) % 4 !== 0 || byteCount > 49) {\n                    continue\n                }\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            case '18':\n                packageLen = 56\n                if (remainMessage.length < packageLen) {\n                    return frameArray\n                }\n                dataValue = remainMessage.substring(2, packageLen)\n                messageValue = remainMessage.substring(packageLen)\n                dataObj = {\n                    'dataId': dataId, 'dataValue': dataValue\n                }\n                break\n            default:\n                return frameArray\n        }\n        if (dataValue.length < 2) {\n            break\n        }\n        frameArray.push(dataObj)\n    }\n    return frameArray\n}\n\nfunction deserialize (dataId, dataValue) {\n    let measurementArray = []\n    let eventList = []\n    let measurement = {}\n    let collectTime = parseInt(new Date().getTime() / 1000)\n    let groupId = 0\n    let shardFlag = {}\n    let payload = ''\n    let value\n    let result = []\n    let dataArr = []\n    switch (dataId) {\n        case '12':\n            shardFlag = getShardFlag(dataValue.substring(0, 2))\n            groupId = getInt(dataValue.substring(2, 6))\n            payload = dataValue.substring(6)\n            measurement = {\n                measurementId: '6152',\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'gnss-ng payload',\n                measurementValue: payload\n            }\n            measurementArray.push(measurement)\n            break\n        case '13':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            shardFlag = getShardFlag(dataValue.substring(16, 18))\n            groupId = getInt(dataValue.substring(18, 22))\n            measurementArray.push({\n                measurementId: '4200',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'Event Status',\n                measurementValue: getEventStatus(dataValue.substring(0, 6))\n            })\n            break\n        case '14':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray = [\n                {measurementId: '4200', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Event Status', measurementValue: getEventStatus(dataValue.substring(0, 6))},\n                {measurementId: '5001', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Wi-Fi Scan', measurementValue: getMacAndRssiObj(dataValue.substring(16, 72))}\n            ]\n            break\n        case '15':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray = [\n                {measurementId: '4200', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'Event Status', measurementValue: getEventStatus(dataValue.substring(0, 6))},\n                {measurementId: '5002', timestamp: collectTime, motionId: getMotionId(dataValue.substring(6, 8)), type: 'BLE Scan', measurementValue: getMacAndRssiObj(dataValue.substring(16, 58))},\n            ]\n            break\n        case '16':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n            measurementArray.push({\n                measurementId: '3576',\n                timestamp: collectTime,\n                type: 'Positioning Status',\n                measurementValue: getPositingStatus(dataValue.substring(0, 2))\n            })\n            measurementArray.push({\n                timestamp: collectTime,\n                measurementId: '4200',\n                type: 'Event Status',\n                measurementValue: getEventStatus(dataValue.substring(2, 8))\n            })\n            break\n        case '17':\n            collectTime = getUTCTimestamp(dataValue.substring(6, 14))\n            value = getUnsignedSensorValue(dataValue.substring(0, 6))\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4208',\n                    measureTime: collectTime,\n                    type: 'Custom Event Status',\n                    measurementValue: value\n                })\n            }\n            let initId = 4165\n            for (let i = 14; i < dataValue.length; i += 8) {\n                value = getUnsignedSensorValue(dataValue.substring(i, i + 8))\n                if (value !== null) {\n                    measurementArray.push({\n                        timestamp: collectTime,\n                        measurementId: initId++,\n                        type: 'Custom Measurement Type',\n                        measurementValue: value\n                    })\n                }\n            }\n            break\n        case '18':\n            collectTime = getUTCTimestamp(dataValue.substring(6, 14))\n            measurementArray.push({\n                measurementId: '4200',\n                timestamp: collectTime,\n                type: 'Event Status',\n                measurementValue: getEventStatus(dataValue.substring(0, 6))\n            })\n            value = getSignSensorValue(dataValue.substring(14, 18), 10)\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4097',\n                    timestamp: collectTime,\n                    type: 'Air Temperature',\n                    measurementValue: value\n                })\n            }\n            value = getUnsignedSensorValue(dataValue.substring(18, 20), 1)\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4098',\n                    timestamp: collectTime,\n                    type: 'Air Humidity',\n                    measurementValue: value\n                })\n            }\n            value = getUnsignedSensorValue(dataValue.substring(20, 26), 1)\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4101',\n                    timestamp: collectTime,\n                    type: 'Barometric Pressure',\n                    measurementValue: value\n                })\n            }\n            value = getUnsignedSensorValue(dataValue.substring(26, 30), 1)\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4115',\n                    timestamp: collectTime,\n                    type: 'Distance',\n                    measurementValue: value\n                })\n            }\n            value = getUnsignedSensorValue(dataValue.substring(30, 34), 100)\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4190',\n                    timestamp: collectTime,\n                    type: 'UV Index',\n                    measurementValue: value\n                })\n            }\n            value = getUnsignedSensorValue(dataValue.substring(34, 38), 1)\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4206',\n                    timestamp: collectTime,\n                    type: 'VOC_INDEX',\n                    measurementValue: value\n                })\n            }\n            value = getUnsignedSensorValue(dataValue.substring(38, 42), 1)\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4207',\n                    timestamp: collectTime,\n                    type: 'Noise',\n                    measurementValue: value\n                })\n            }\n            value = getSignSensorValue(dataValue.substring(42, 46), 100)\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4150',\n                    timestamp: collectTime,\n                    type: ' AccelerometerX',\n                    measurementValue: value\n                })\n            }\n            value = getSignSensorValue(dataValue.substring(46, 50), 100)\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4151',\n                    timestamp: collectTime,\n                    type: 'AccelerometerY',\n                    measurementValue: value\n                })\n            }\n            value = getSignSensorValue(dataValue.substring(50, 54), 100)\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4152',\n                    timestamp: collectTime,\n                    type: 'AccelerometerZ',\n                    measurementValue: value\n                })\n            }\n            break\n    }\n    return measurementArray\n}\n\nfunction getMotionId (str) {\n    return getInt(str)\n}\n\nfunction getPositingStatus (str) {\n    let status = getInt(str)\n    switch (status) {\n        case 0:\n            return {id:status, statusName:\"Positioning successful.\"}\n        case 1:\n            return {id:status, statusName:\"The GNSS scan timed out and failed to obtain the location.\"}\n        case 2:\n            return {id:status, statusName:\"The Wi-Fi scan timed out and failed to obtain the location.\"}\n        case 3:\n            return {id:status, statusName:\"The Wi-Fi + GNSS scan timed out and failed to obtain the location.\"}\n        case 4:\n            return {id:status, statusName:\"The GNSS + Wi-Fi scan timed out and failed to obtain the location.\"}\n        case 5:\n            return {id:status, statusName:\"The Bluetooth scan timed out and failed to obtain the location.\"}\n        case 6:\n            return {id:status, statusName:\"The Bluetooth + Wi-Fi scan timed out and failed to obtain the location.\"}\n        case 7:\n            return {id:status, statusName:\"The Bluetooth + GNSS scan timed out and failed to obtain the location.\"}\n        case 8:\n            return {id:status, statusName:\"The Bluetooth + Wi-Fi + GNSS scan timed out and failed to obtain the location.\"}\n        case 9:\n            return {id:status, statusName:\"Location Server failed to parse the GNSS location.\"}\n        case 10:\n            return {id:status, statusName:\"Location Server failed to parse the Wi-Fi location.\"}\n        case 11:\n            return {id:status, statusName:\"Location Server failed to parse the Bluetooth location.\"}\n        case 12:\n            return {id:status, statusName:\"Failed to parse the GNSS location due to the poor accuracy.\"}\n        case 13:\n            return {id:status, statusName:\"Time synchronization failed.\"}\n        case 14:\n            return {id:status, statusName:\"Failed to obtain location due to the old Almanac.\"}\n    }\n    return getInt(str)\n}\n\nfunction getShardFlag (str) {\n    let bitStr = getByteArray(str)\n    return {\n        count: parseInt(bitStr.substring(0, 4), 2),\n        index: parseInt(bitStr.substring(4), 2)\n    }\n}\n\nfunction bytes2HexString (arrBytes) {\n    var str = ''\n    for (var i = 0; i < arrBytes.length; i++) {\n        var tmp\n        var num = arrBytes[i]\n        if (num < 0) {\n            tmp = (255 + num + 1).toString(16)\n        } else {\n            tmp = num.toString(16)\n        }\n        if (tmp.length === 1) {\n            tmp = '0' + tmp\n        }\n        str += tmp\n    }\n    return str\n}\nfunction loraWANV2DataFormat (str, divisor = 1) {\n    let strReverse = bigEndianTransform(str)\n    let str2 = toBinary(strReverse)\n    if (str2.substring(0, 1) === '1') {\n        let arr = str2.split('')\n        let reverseArr = arr.map((item) => {\n            if (parseInt(item) === 1) {\n                return 0\n            } else {\n                return 1\n            }\n        })\n        str2 = parseInt(reverseArr.join(''), 2) + 1\n        return parseFloat('-' + str2 / divisor)\n    }\n    return parseInt(str2, 2) / divisor\n}\n\nfunction bigEndianTransform (data) {\n    let dataArray = []\n    for (let i = 0; i < data.length; i += 2) {\n        dataArray.push(data.substring(i, i + 2))\n    }\n    return dataArray\n}\n\nfunction toBinary (arr) {\n    let binaryData = arr.map((item) => {\n        let data = parseInt(item, 16)\n            .toString(2)\n        let dataLength = data.length\n        if (data.length !== 8) {\n            for (let i = 0; i < 8 - dataLength; i++) {\n                data = `0` + data\n            }\n        }\n        return data\n    })\n    return binaryData.toString().replace(/,/g, '')\n}\n\nfunction getMacAndRssiObj (pair) {\n    let pairs = []\n    if (pair.length % 14 === 0) {\n        for (let i = 0; i < pair.length; i += 14) {\n            let mac = getMacAddress(pair.substring(i, i + 12))\n            if (mac) {\n                let rssi = getInt8RSSI(pair.substring(i + 12, i + 14))\n                pairs.push({mac: mac, rssi: rssi})\n            } else {\n                continue\n            }\n        }\n    }\n    return pairs\n}\n\nfunction getMacAddress (str) {\n    if (str.toLowerCase() === 'ffffffffffff') {\n        return null\n    }\n    let macArr = []\n    for (let i = 1; i < str.length; i++) {\n        if (i % 2 === 1) {\n            macArr.push(str.substring(i - 1, i + 1))\n        }\n    }\n    let mac = ''\n    for (let i = 0; i < macArr.length; i++) {\n        mac = mac + macArr[i]\n        if (i < macArr.length - 1) {\n            mac = mac + ':'\n        }\n    }\n    return mac\n}\n\nfunction getInt8RSSI (str) {\n    return loraWANV2DataFormat(str)\n}\n\nfunction getInt (str) {\n    return parseInt(str, 16)\n}\n\nfunction getEventStatus (str) {\n    // return getInt(str)\n    let bitStr = getByteArray(str)\n    let bitArr = []\n    for (let i = 0; i < bitStr.length; i++) {\n        bitArr[i] = bitStr.substring(i, i + 1)\n    }\n    bitArr = bitArr.reverse()\n    let event = []\n    for (let i = 0; i < bitArr.length; i++) {\n        if (bitArr[i] !== '1') {\n            continue\n        }\n        switch (i){\n            case 0:\n                event.push({id:1, eventName:\"Start moving event.\"})\n                break\n            case 1:\n                event.push({id:2, eventName:\"End movement event.\"})\n                break\n            case 2:\n                event.push({id:3, eventName:\"Motionless event.\"})\n                break\n            case 3:\n                event.push({id:4, eventName:\"Shock event.\"})\n                break\n            case 4:\n                event.push({id:5, eventName:\"Temperature event.\"})\n                break\n            case 5:\n                event.push({id:6, eventName:\"Light event.\"})\n                break\n            case 6:\n                event.push({id:7, eventName:\"SOS event.\"})\n                break\n            case 7:\n                event.push({id:8, eventName:\"Press once event.\"})\n                break\n        }\n    }\n    return event\n}\n\nfunction getByteArray (str) {\n    let bytes = []\n    for (let i = 0; i < str.length; i += 2) {\n        bytes.push(str.substring(i, i + 2))\n    }\n    return toBinary(bytes)\n}\n\nfunction getUTCTimestamp(str){\n    return parseInt(loraWANV2PositiveDataFormat(str)) * 1000\n}\nfunction getUnsignedSensorValue (str, dig = 1) {\n    if (isNull(str)) {\n        return null\n    }\n    return parseInt(str, 16) / dig\n}\nfunction isNull (str) {\n    if (str.substring(0, 1) !== '8') {\n        return false\n    }\n    for (let i = 1; i < str.length; i++) {\n        if (str.substring(i, i + 1) !== '0') {\n            return false\n        }\n    }\n    return true\n}\nfunction getSignSensorValue (str, dig = 1) {\n    if (isNull(str)) {\n        return null\n    }\n    return loraWANV2DataFormat(str, dig)\n}\nfunction loraWANV2PositiveDataFormat (str, divisor = 1) {\n    let strReverse = bigEndianTransform(str)\n    let str2 = toBinary(strReverse)\n    return parseInt(str2, 2) / divisor\n}\n"))),(0,r.yg)("details",null,(0,r.yg)("summary",null,"For Chirp Stack"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"function Decode(fPort, bytes, variables) {\n    var bytesString = bytes2HexString(bytes).toLocaleUpperCase();\n    var fport = parseInt(fPort);\n    var originMessage = bytesString.toLocaleUpperCase();\n    var decoded = {\n        valid: true,\n        err: 0,\n        payload: bytesString,\n        messages: []\n    };\n    if (fport === 199 || fport === 192) {\n        decoded.messages.push({\n            fport: fport,\n            payload: bytesString\n        });\n        return {\n            data: decoded\n        };\n    }\n    if (fport !== 5) {\n        decoded.valid = false;\n        return {\n            data: decoded\n        };\n    }\n    var measurement = messageAnalyzed(originMessage);\n    if (measurement.length === 0) {\n        decoded.valid = false;\n        return {\n            data: decoded\n        };\n    }\n    var _iterator = _createForOfIteratorHelper(measurement),\n        _step;\n    try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var message = _step.value;\n            if (message.length === 0) {\n                continue;\n            }\n            var elements = [];\n            var _iterator2 = _createForOfIteratorHelper(message),\n                _step2;\n            try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    var element = _step2.value;\n                    if (element.errorCode) {\n                        decoded.err = element.errorCode;\n                        decoded.errMessage = element.error;\n                    } else {\n                        elements.push(element);\n                    }\n                }\n            } catch (err) {\n                _iterator2.e(err);\n            } finally {\n                _iterator2.f();\n            }\n            if (elements.length > 0) {\n                decoded.messages.push(elements);\n            }\n        }\n        // decoded.messages = measurement\n    } catch (err) {\n        _iterator.e(err);\n    } finally {\n        _iterator.f();\n    }\n    return {\n        data: decoded\n    };\n}\nfunction messageAnalyzed(messageValue) {\n    try {\n        var frames = unpack(messageValue);\n        var measurementResultArray = [];\n        for (var i = 0; i < frames.length; i++) {\n            var item = frames[i];\n            var dataId = item.dataId;\n            var dataValue = item.dataValue;\n            var measurementArray = deserialize(dataId, dataValue);\n            measurementResultArray.push(measurementArray);\n        }\n        return measurementResultArray;\n    } catch (e) {\n        return e.toString();\n    }\n}\nfunction unpack(messageValue) {\n    var frameArray = [];\n    for (var i = 0; i < messageValue.length; i++) {\n        var remainMessage = messageValue;\n        var dataId = remainMessage.substring(0, 2).toUpperCase();\n        var dataValue = void 0;\n        var dataObj = {};\n        var packageLen = void 0;\n        switch (dataId) {\n            case '12':\n                packageLen = getInt(remainMessage.substring(8, 10)) * 2 + 10;\n                if (remainMessage.length < packageLen) {\n                    return frameArray;\n                }\n                dataValue = remainMessage.substring(2, 8) + remainMessage.substring(10, packageLen);\n                messageValue = remainMessage.substring(packageLen);\n                dataObj = {\n                    'dataId': dataId,\n                    'dataValue': dataValue\n                };\n                break;\n            case '13':\n                packageLen = 24;\n                if (remainMessage.length < packageLen) {\n                    return frameArray;\n                }\n                dataValue = remainMessage.substring(2, packageLen);\n                messageValue = remainMessage.substring(packageLen);\n                dataObj = {\n                    'dataId': dataId,\n                    'dataValue': dataValue\n                };\n                break;\n            case '14':\n                packageLen = 74;\n                if (remainMessage.length < packageLen) {\n                    return frameArray;\n                }\n                dataValue = remainMessage.substring(2, packageLen);\n                messageValue = remainMessage.substring(packageLen);\n                dataObj = {\n                    'dataId': dataId,\n                    'dataValue': dataValue\n                };\n                break;\n            case '15':\n                packageLen = 60;\n                if (remainMessage.length < packageLen) {\n                    return frameArray;\n                }\n                dataValue = remainMessage.substring(2, packageLen);\n                messageValue = remainMessage.substring(packageLen);\n                dataObj = {\n                    'dataId': dataId,\n                    'dataValue': dataValue\n                };\n                break;\n            case '16':\n                packageLen = 18;\n                if (remainMessage.length < packageLen) {\n                    return frameArray;\n                }\n                dataValue = remainMessage.substring(2, packageLen);\n                messageValue = remainMessage.substring(packageLen);\n                dataObj = {\n                    'dataId': dataId,\n                    'dataValue': dataValue\n                };\n                break;\n            case '17':\n                var byteCount = parseInt(remainMessage.substring(2, 4), 16);\n                packageLen = getInt(remainMessage.substring(2, 4)) * 2;\n                if (remainMessage.length < packageLen) {\n                    return frameArray;\n                }\n                dataValue = remainMessage.substring(4, packageLen);\n                messageValue = remainMessage.substring(packageLen);\n                if (isNaN(byteCount) || byteCount < 13 || (byteCount - 9) % 4 !== 0 || byteCount > 49) {\n                    continue;\n                }\n                dataObj = {\n                    'dataId': dataId,\n                    'dataValue': dataValue\n                };\n                break;\n            case '18':\n                packageLen = 56;\n                if (remainMessage.length < packageLen) {\n                    return frameArray;\n                }\n                dataValue = remainMessage.substring(2, packageLen);\n                messageValue = remainMessage.substring(packageLen);\n                dataObj = {\n                    'dataId': dataId,\n                    'dataValue': dataValue\n                };\n                break;\n            default:\n                return frameArray;\n        }\n        if (dataValue.length < 2) {\n            break;\n        }\n        frameArray.push(dataObj);\n    }\n    return frameArray;\n}\nfunction deserialize(dataId, dataValue) {\n    var measurementArray = [];\n    var eventList = [];\n    var measurement = {};\n    var collectTime = parseInt(new Date().getTime() / 1000);\n    var groupId = 0;\n    var shardFlag = {};\n    var payload = '';\n    var value;\n    var result = [];\n    var dataArr = [];\n    switch (dataId) {\n        case '12':\n            shardFlag = getShardFlag(dataValue.substring(0, 2));\n            groupId = getInt(dataValue.substring(2, 6));\n            payload = dataValue.substring(6);\n            measurement = {\n                measurementId: '6152',\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'gnss-ng payload',\n                measurementValue: payload\n            };\n            measurementArray.push(measurement);\n            break;\n        case '13':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16));\n            shardFlag = getShardFlag(dataValue.substring(16, 18));\n            groupId = getInt(dataValue.substring(18, 22));\n            measurementArray.push({\n                measurementId: '4200',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                groupId: groupId,\n                index: shardFlag.index,\n                count: shardFlag.count,\n                type: 'Event Status',\n                measurementValue: getEventStatus(dataValue.substring(0, 6))\n            });\n            break;\n        case '14':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16));\n            measurementArray = [{\n                measurementId: '4200',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'Event Status',\n                measurementValue: getEventStatus(dataValue.substring(0, 6))\n            }, {\n                measurementId: '5001',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'Wi-Fi Scan',\n                measurementValue: getMacAndRssiObj(dataValue.substring(16, 72))\n            }];\n            break;\n        case '15':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16));\n            measurementArray = [{\n                measurementId: '4200',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'Event Status',\n                measurementValue: getEventStatus(dataValue.substring(0, 6))\n            }, {\n                measurementId: '5002',\n                timestamp: collectTime,\n                motionId: getMotionId(dataValue.substring(6, 8)),\n                type: 'BLE Scan',\n                measurementValue: getMacAndRssiObj(dataValue.substring(16, 58))\n            }];\n            break;\n        case '16':\n            collectTime = getUTCTimestamp(dataValue.substring(8, 16));\n            measurementArray.push({\n                measurementId: '3576',\n                timestamp: collectTime,\n                type: 'Positioning Status',\n                measurementValue: getPositingStatus(dataValue.substring(0, 2))\n            });\n            measurementArray.push({\n                timestamp: collectTime,\n                measurementId: '4200',\n                type: 'Event Status',\n                measurementValue: getEventStatus(dataValue.substring(2, 8))\n            });\n            break;\n        case '17':\n            collectTime = getUTCTimestamp(dataValue.substring(6, 14));\n            value = getUnsignedSensorValue(dataValue.substring(0, 6));\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4208',\n                    measureTime: collectTime,\n                    type: 'Custom Event Status',\n                    measurementValue: value\n                });\n            }\n            var initId = 4165;\n            for (var i = 14; i < dataValue.length; i += 8) {\n                value = getUnsignedSensorValue(dataValue.substring(i, i + 8));\n                if (value !== null) {\n                    measurementArray.push({\n                        timestamp: collectTime,\n                        measurementId: initId++,\n                        type: 'Custom Measurement Type',\n                        measurementValue: value\n                    });\n                }\n            }\n            break;\n        case '18':\n            collectTime = getUTCTimestamp(dataValue.substring(6, 14));\n            measurementArray.push({\n                measurementId: '4200',\n                timestamp: collectTime,\n                type: 'Event Status',\n                measurementValue: getEventStatus(dataValue.substring(0, 6))\n            });\n            value = getSignSensorValue(dataValue.substring(14, 18), 10);\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4097',\n                    timestamp: collectTime,\n                    type: 'Air Temperature',\n                    measurementValue: value\n                });\n            }\n            value = getUnsignedSensorValue(dataValue.substring(18, 20), 1);\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4098',\n                    timestamp: collectTime,\n                    type: 'Air Humidity',\n                    measurementValue: value\n                });\n            }\n            value = getUnsignedSensorValue(dataValue.substring(20, 26), 1);\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4101',\n                    timestamp: collectTime,\n                    type: 'Barometric Pressure',\n                    measurementValue: value\n                });\n            }\n            value = getUnsignedSensorValue(dataValue.substring(26, 30), 1);\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4115',\n                    timestamp: collectTime,\n                    type: 'Distance',\n                    measurementValue: value\n                });\n            }\n            value = getUnsignedSensorValue(dataValue.substring(30, 34), 100);\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4190',\n                    timestamp: collectTime,\n                    type: 'UV Index',\n                    measurementValue: value\n                });\n            }\n            value = getUnsignedSensorValue(dataValue.substring(34, 38), 1);\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4206',\n                    timestamp: collectTime,\n                    type: 'VOC_INDEX',\n                    measurementValue: value\n                });\n            }\n            value = getUnsignedSensorValue(dataValue.substring(38, 42), 1);\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4207',\n                    timestamp: collectTime,\n                    type: 'Noise',\n                    measurementValue: value\n                });\n            }\n            value = getSignSensorValue(dataValue.substring(42, 46), 100);\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4150',\n                    timestamp: collectTime,\n                    type: ' AccelerometerX',\n                    measurementValue: value\n                });\n            }\n            value = getSignSensorValue(dataValue.substring(46, 50), 100);\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4151',\n                    timestamp: collectTime,\n                    type: 'AccelerometerY',\n                    measurementValue: value\n                });\n            }\n            value = getSignSensorValue(dataValue.substring(50, 54), 100);\n            if (value !== null) {\n                measurementArray.push({\n                    measurementId: '4152',\n                    timestamp: collectTime,\n                    type: 'AccelerometerZ',\n                    measurementValue: value\n                });\n            }\n            break;\n    }\n    return measurementArray;\n}\nfunction getMotionId(str) {\n    return getInt(str);\n}\nfunction getPositingStatus(str) {\n    var status = getInt(str);\n    switch (status) {\n        case 0:\n            return {\n                id: status,\n                statusName: \"Positioning successful.\"\n            };\n        case 1:\n            return {\n                id: status,\n                statusName: \"The GNSS scan timed out and failed to obtain the location.\"\n            };\n        case 2:\n            return {\n                id: status,\n                statusName: \"The Wi-Fi scan timed out and failed to obtain the location.\"\n            };\n        case 3:\n            return {\n                id: status,\n                statusName: \"The Wi-Fi + GNSS scan timed out and failed to obtain the location.\"\n            };\n        case 4:\n            return {\n                id: status,\n                statusName: \"The GNSS + Wi-Fi scan timed out and failed to obtain the location.\"\n            };\n        case 5:\n            return {\n                id: status,\n                statusName: \"The Bluetooth scan timed out and failed to obtain the location.\"\n            };\n        case 6:\n            return {\n                id: status,\n                statusName: \"The Bluetooth + Wi-Fi scan timed out and failed to obtain the location.\"\n            };\n        case 7:\n            return {\n                id: status,\n                statusName: \"The Bluetooth + GNSS scan timed out and failed to obtain the location.\"\n            };\n        case 8:\n            return {\n                id: status,\n                statusName: \"The Bluetooth + Wi-Fi + GNSS scan timed out and failed to obtain the location.\"\n            };\n        case 9:\n            return {\n                id: status,\n                statusName: \"Location Server failed to parse the GNSS location.\"\n            };\n        case 10:\n            return {\n                id: status,\n                statusName: \"Location Server failed to parse the Wi-Fi location.\"\n            };\n        case 11:\n            return {\n                id: status,\n                statusName: \"Location Server failed to parse the Bluetooth location.\"\n            };\n        case 12:\n            return {\n                id: status,\n                statusName: \"Failed to parse the GNSS location due to the poor accuracy.\"\n            };\n        case 13:\n            return {\n                id: status,\n                statusName: \"Time synchronization failed.\"\n            };\n        case 14:\n            return {\n                id: status,\n                statusName: \"Failed to obtain location due to the old Almanac.\"\n            };\n    }\n    return getInt(str);\n}\nfunction getShardFlag(str) {\n    var bitStr = getByteArray(str);\n    return {\n        count: parseInt(bitStr.substring(0, 4), 2),\n        index: parseInt(bitStr.substring(4), 2)\n    };\n}\nfunction bytes2HexString(arrBytes) {\n    var str = '';\n    for (var i = 0; i < arrBytes.length; i++) {\n        var tmp;\n        var num = arrBytes[i];\n        if (num < 0) {\n            tmp = (255 + num + 1).toString(16);\n        } else {\n            tmp = num.toString(16);\n        }\n        if (tmp.length === 1) {\n            tmp = '0' + tmp;\n        }\n        str += tmp;\n    }\n    return str;\n}\nfunction loraWANV2DataFormat(str) {\n    var divisor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var strReverse = bigEndianTransform(str);\n    var str2 = toBinary(strReverse);\n    if (str2.substring(0, 1) === '1') {\n        var arr = str2.split('');\n        var reverseArr = arr.map(function (item) {\n            if (parseInt(item) === 1) {\n                return 0;\n            } else {\n                return 1;\n            }\n        });\n        str2 = parseInt(reverseArr.join(''), 2) + 1;\n        return parseFloat('-' + str2 / divisor);\n    }\n    return parseInt(str2, 2) / divisor;\n}\nfunction bigEndianTransform(data) {\n    var dataArray = [];\n    for (var i = 0; i < data.length; i += 2) {\n        dataArray.push(data.substring(i, i + 2));\n    }\n    return dataArray;\n}\nfunction toBinary(arr) {\n    var binaryData = arr.map(function (item) {\n        var data = parseInt(item, 16).toString(2);\n        var dataLength = data.length;\n        if (data.length !== 8) {\n            for (var i = 0; i < 8 - dataLength; i++) {\n                data = \"0\" + data;\n            }\n        }\n        return data;\n    });\n    return binaryData.toString().replace(/,/g, '');\n}\nfunction getMacAndRssiObj(pair) {\n    var pairs = [];\n    if (pair.length % 14 === 0) {\n        for (var i = 0; i < pair.length; i += 14) {\n            var mac = getMacAddress(pair.substring(i, i + 12));\n            if (mac) {\n                var rssi = getInt8RSSI(pair.substring(i + 12, i + 14));\n                pairs.push({\n                    mac: mac,\n                    rssi: rssi\n                });\n            } else {\n                continue;\n            }\n        }\n    }\n    return pairs;\n}\nfunction getMacAddress(str) {\n    if (str.toLowerCase() === 'ffffffffffff') {\n        return null;\n    }\n    var macArr = [];\n    for (var i = 1; i < str.length; i++) {\n        if (i % 2 === 1) {\n            macArr.push(str.substring(i - 1, i + 1));\n        }\n    }\n    var mac = '';\n    for (var _i = 0; _i < macArr.length; _i++) {\n        mac = mac + macArr[_i];\n        if (_i < macArr.length - 1) {\n            mac = mac + ':';\n        }\n    }\n    return mac;\n}\nfunction getInt8RSSI(str) {\n    return loraWANV2DataFormat(str);\n}\nfunction getInt(str) {\n    return parseInt(str, 16);\n}\nfunction getEventStatus(str) {\n    // return getInt(str)\n    var bitStr = getByteArray(str);\n    var bitArr = [];\n    for (var i = 0; i < bitStr.length; i++) {\n        bitArr[i] = bitStr.substring(i, i + 1);\n    }\n    bitArr = bitArr.reverse();\n    var event = [];\n    for (var _i2 = 0; _i2 < bitArr.length; _i2++) {\n        if (bitArr[_i2] !== '1') {\n            continue;\n        }\n        switch (_i2) {\n            case 0:\n                event.push({\n                    id: 1,\n                    eventName: \"Start moving event.\"\n                });\n                break;\n            case 1:\n                event.push({\n                    id: 2,\n                    eventName: \"End movement event.\"\n                });\n                break;\n            case 2:\n                event.push({\n                    id: 3,\n                    eventName: \"Motionless event.\"\n                });\n                break;\n            case 3:\n                event.push({\n                    id: 4,\n                    eventName: \"Shock event.\"\n                });\n                break;\n            case 4:\n                event.push({\n                    id: 5,\n                    eventName: \"Temperature event.\"\n                });\n                break;\n            case 5:\n                event.push({\n                    id: 6,\n                    eventName: \"Light event.\"\n                });\n                break;\n            case 6:\n                event.push({\n                    id: 7,\n                    eventName: \"SOS event.\"\n                });\n                break;\n            case 7:\n                event.push({\n                    id: 8,\n                    eventName: \"Press once event.\"\n                });\n                break;\n        }\n    }\n    return event;\n}\nfunction getByteArray(str) {\n    var bytes = [];\n    for (var i = 0; i < str.length; i += 2) {\n        bytes.push(str.substring(i, i + 2));\n    }\n    return toBinary(bytes);\n}\nfunction getUTCTimestamp(str) {\n    return parseInt(loraWANV2PositiveDataFormat(str)) * 1000;\n}\nfunction getUnsignedSensorValue(str) {\n    var dig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    if (isNull(str)) {\n        return null;\n    }\n    return parseInt(str, 16) / dig;\n}\nfunction isNull(str) {\n    if (str.substring(0, 1) !== '8') {\n        return false;\n    }\n    for (var i = 1; i < str.length; i++) {\n        if (str.substring(i, i + 1) !== '0') {\n            return false;\n        }\n    }\n    return true;\n}\nfunction getSignSensorValue(str) {\n    var dig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    if (isNull(str)) {\n        return null;\n    }\n    return loraWANV2DataFormat(str, dig);\n}\nfunction loraWANV2PositiveDataFormat(str) {\n    var divisor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var strReverse = bigEndianTransform(str);\n    var str2 = toBinary(strReverse);\n    return parseInt(str2, 2) / divisor;\n}\n"))),(0,r.yg)("h3",{id:"sensecap-s210x-lorawan-sensors"},"SenseCAP S210X LoRaWAN Sensors"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.seeedstudio.com/catalogsearch/result/?q=s210x"},"SenseCAP S210X")," is a series of wireless LoRaWAN\xae sensors. It can cover a transmission range of 2km in urban scenes and 10km in line-of-sight scenes while keeping lower power consumption during the transmission process.\nTogether with a replaceable battery that supports up to 10 years of usage and an industrial IP66 enclosure. It supports -40 ~ 85\u2103 operating temperature and can be deployed in harsh environments. SenseCAP S210X is compatible with LoRaWAN\xae V1.0.3 protocol and can work with LoRaWAN\xae gateway. "),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://media-cdn.seeedstudio.com/media/wysiwyg/111_1.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,r.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/SenseCAP-S2101-LoRaWAN-Air-Temperature-and-Humidity-Sensor-p-5354.html"},(0,r.yg)("strong",null,(0,r.yg)("span",null,(0,r.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f"))))),(0,r.yg)("h4",{id:"decoder-2"},"Decoder"),(0,r.yg)(s.A,{mdxType:"Tabs"},(0,r.yg)(u.A,{value:"For TTN",label:"For TTN",mdxType:"TabItem"},(0,r.yg)("details",null,(0,r.yg)("summary",null,"For TTN"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'/**\n * SenseCAP & TTN (new v3) Converter\n *\n * @since 3.0\n * @return Object\n *      @param  Boolean     valid       Indicates whether the payload is a valid payload.\n *      @param  String      err         The reason for the payload to be invalid. 0 means valid, minus means invalid.\n *      @param  String      payload     Hexadecimal string, to show the payload.\n *      @param  Array       messages    One or more messages are parsed according to payload.\n *                              type // Enum:\n *                                   //   - "report_telemetry"\n *                                   //   - "upload_battery"\n *                                   //   - "upload_interval"\n *                                   //   - "upload_version"\n *                                   //   - "upload_sensor_id"\n *                                   //   - "report_remove_sensor"\n *                                   //   - "unknown_message"\n *\n *\n *\n *\n *  @sample-1\n *      var sample = Decoder(["00", "00", "00", "01", "01", "00", "01", "00", "07", "00", "64", "00", "3C", "00", "01", "20", "01", "00", "00", "00", "00", "28", "90"], null);\n *      {\n *        valid: true,\n *        err: 0,\n *        payload: \'0000000101000100070064003C00012001000000002890\',\n *        messages: [\n *           { type: \'upload_version\',\n *             hardwareVersion: \'1.0\',\n *             softwareVersion: \'1.1\' },\n *           { type: \'upload_battery\', battery: 100 },\n *           { type: \'upload_interval\', interval: 3600 },\n *           { type: \'report_remove_sensor\', channel: 1 }\n *        ]\n *      }\n * @sample-2\n *      var sample = Decoder(["01", "01", "10", "98", "53", "00", "00", "01", "02", "10", "A8", "7A", "00", "00", "AF", "51"], null);\n *      {\n *        valid: true,\n *        err: 0,\n *        payload: \'01011098530000010210A87A0000AF51\',\n *        messages: [\n *           { type: \'report_telemetry\',\n *             measurementId: 4097,\n *             measurementValue: 21.4 },\n *           { type: \'report_telemetry\',\n *             measurementId: 4098,\n *             measurementValue: 31.4 }\n *        ]\n *      }\n * @sample-3\n *      var sample = Decoder(["01", "01", "00", "01", "01", "00", "01", "01", "02", "00", "6A", "01", "00", "15", "01", "03", "00", "30", "F1", "F7", "2C", "01", "04", "00", "09", "0C", "13", "14", "01", "05", "00", "7F", "4D", "00", "00", "01", "06", "00", "00", "00", "00", "00", "4C", "BE"], null);\n *      {\n *        valid: true,\n *        err: 0,\n *        payload: \'010100010100010102006A01001501030030F1F72C010400090C13140105007F4D0000010600000000004CBE\',\n *        messages: [\n *            { type: \'upload_sensor_id\', sensorId: \'30F1F72C6A010015\', channel: 1 }\n *        ]\n *      }\n */\n\n/**\n * Entry, decoder.js\n */\nfunction decodeUplink (input) {\n    var bytes = input[\'bytes\'];\n    // // init\n    var bytesString = bytes2HexString(bytes)\n        .toLocaleUpperCase();\n    // var bytesString = input\n    var decoded = {\n      // valid\n      valid: true, err: 0, // bytes\n      payload: bytesString, // messages array\n      messages: []\n    }\n  \n    // CRC check\n    if (!crc16Check(bytesString)) {\n      decoded[\'valid\'] = false\n      decoded[\'err\'] = -1 // "crc check fail."\n      return { data: decoded }\n    }\n  \n    // Length Check\n    if ((((bytesString.length / 2) - 2) % 7) !== 0) {\n      decoded[\'valid\'] = false\n      decoded[\'err\'] = -2 // "length check fail."\n      return { data: decoded }\n    }\n  \n    // Cache sensor id\n    var sensorEuiLowBytes\n    var sensorEuiHighBytes\n  \n    // Handle each frame\n    var frameArray = divideBy7Bytes(bytesString)\n    for (var forFrame = 0; forFrame < frameArray.length; forFrame++) {\n      var frame = frameArray[forFrame]\n      // Extract key parameters\n      var channel = strTo10SysNub(frame.substring(0, 2))\n      var dataID = strTo10SysNub(frame.substring(2, 6))\n      var dataValue = frame.substring(6, 14)\n      var realDataValue = isSpecialDataId(dataID) ? ttnDataSpecialFormat(dataID, dataValue) : ttnDataFormat(dataValue)\n  \n      if (checkDataIdIsMeasureUpload(dataID)) {\n        // if telemetry.\n        decoded.messages.push({\n          type: \'report_telemetry\', measurementId: dataID, measurementValue: realDataValue\n        })\n      } else if (isSpecialDataId(dataID) || (dataID === 5) || (dataID === 6)) {\n        // if special order, except "report_sensor_id".\n        switch (dataID) {\n          case 0x00:\n            // node version\n            var versionData = sensorAttrForVersion(realDataValue)\n            decoded.messages.push({\n              type: \'upload_version\', hardwareVersion: versionData.ver_hardware, softwareVersion: versionData.ver_software\n            })\n            break\n          case 1:\n            // sensor version\n            break\n          case 2:\n            // sensor eui, low bytes\n            sensorEuiLowBytes = realDataValue\n            break\n          case 3:\n            // sensor eui, high bytes\n            sensorEuiHighBytes = realDataValue\n            break\n          case 7:\n            // battery power && interval\n            decoded.messages.push({\n              type: \'upload_battery\', battery: realDataValue.power\n            }, {\n              type: \'upload_interval\', interval: parseInt(realDataValue.interval) * 60\n            })\n            break\n          case 9:\n            decoded.messages.push({\n              type: \'model_info\',\n              detectionType: realDataValue.detectionType,\n              modelId: realDataValue.modelId,\n              modelVer: realDataValue.modelVer\n            })\n            break\n          case 0x120:\n            // remove sensor\n            decoded.messages.push({\n              type: \'report_remove_sensor\', channel: 1\n            })\n            break\n          default:\n            break\n        }\n      } else {\n        decoded.messages.push({\n          type: \'unknown_message\', dataID: dataID, dataValue: dataValue\n        })\n      }\n  \n    }\n  \n    // if the complete id received, as "upload_sensor_id"\n    if (sensorEuiHighBytes && sensorEuiLowBytes) {\n      decoded.messages.unshift({\n        type: \'upload_sensor_id\', channel: 1, sensorId: (sensorEuiHighBytes + sensorEuiLowBytes).toUpperCase()\n      })\n    }\n    // return\n    return { data: decoded }\n  }\n  \n  function crc16Check (data) {\n    return true\n  }\n  \n  // util\n  function bytes2HexString (arrBytes) {\n    var str = \'\'\n    for (var i = 0; i < arrBytes.length; i++) {\n      var tmp\n      var num = arrBytes[i]\n      if (num < 0) {\n        tmp = (255 + num + 1).toString(16)\n      } else {\n        tmp = num.toString(16)\n      }\n      if (tmp.length === 1) {\n        tmp = \'0\' + tmp\n      }\n      str += tmp\n    }\n    return str\n  }\n  \n  // util\n  function divideBy7Bytes (str) {\n    var frameArray = []\n    for (var i = 0; i < str.length - 4; i += 14) {\n      var data = str.substring(i, i + 14)\n      frameArray.push(data)\n    }\n    return frameArray\n  }\n  \n  // util\n  function littleEndianTransform (data) {\n    var dataArray = []\n    for (var i = 0; i < data.length; i += 2) {\n      dataArray.push(data.substring(i, i + 2))\n    }\n    dataArray.reverse()\n    return dataArray\n  }\n  \n  // util\n  function strTo10SysNub (str) {\n    var arr = littleEndianTransform(str)\n    return parseInt(arr.toString()\n      .replace(/,/g, \'\'), 16)\n  }\n  \n  // util\n  function checkDataIdIsMeasureUpload (dataId) {\n    return parseInt(dataId) > 4096\n  }\n  \n  // configurable.\n  function isSpecialDataId (dataID) {\n    switch (dataID) {\n      case 0:\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 7:\n      case 9:\n      case 0x120:\n        return true\n      default:\n        return false\n    }\n  }\n  \n  // configurable\n  function ttnDataSpecialFormat (dataId, str) {\n    var strReverse = littleEndianTransform(str)\n    if (dataId === 2 || dataId === 3) {\n      return strReverse.join(\'\')\n    }\n  \n    // handle unsigned number\n    var str2 = toBinary(strReverse)\n    var dataArray = []\n    switch (dataId) {\n      case 0: // DATA_BOARD_VERSION\n      case 1: // DATA_SENSOR_VERSION\n        // Using point segmentation\n        for (var k = 0; k < str2.length; k += 16) {\n          var tmp146 = str2.substring(k, k + 16)\n          tmp146 = (parseInt(tmp146.substring(0, 8), 2) || 0) + \'.\' + (parseInt(tmp146.substring(8, 16), 2) || 0)\n          dataArray.push(tmp146)\n        }\n        return dataArray.join(\',\')\n      case 4:\n        for (var i = 0; i < str2.length; i += 8) {\n          var item = parseInt(str2.substring(i, i + 8), 2)\n          if (item < 10) {\n            item = \'0\' + item.toString()\n          } else {\n            item = item.toString()\n          }\n          dataArray.push(item)\n        }\n        return dataArray.join(\'\')\n      case 7:\n        // battery && interval\n        return {\n          interval: parseInt(str2.substr(0, 16), 2), power: parseInt(str2.substr(-16, 16), 2)\n        }\n      case 9:\n        let dataValue = {\n          detectionType: parseInt(str2.substring(0, 8), 2),\n          modelId: parseInt(str2.substring(8, 16), 2),\n          modelVer: parseInt(str2.substring(16, 24), 2)\n        }\n        // 01010000\n        return dataValue\n    }\n  }\n  \n  // util\n  function ttnDataFormat (str) {\n    var strReverse = littleEndianTransform(str)\n    var str2 = toBinary(strReverse)\n    if (str2.substring(0, 1) === \'1\') {\n      var arr = str2.split(\'\')\n      var reverseArr = []\n      for (var forArr = 0; forArr < arr.length; forArr++) {\n        var item = arr[forArr]\n        if (parseInt(item) === 1) {\n          reverseArr.push(0)\n        } else {\n          reverseArr.push(1)\n        }\n      }\n      str2 = parseInt(reverseArr.join(\'\'), 2) + 1\n      return parseFloat(\'-\' + str2 / 1000)\n    }\n    return parseInt(str2, 2) / 1000\n  }\n  \n  // util\n  function sensorAttrForVersion (dataValue) {\n    var dataValueSplitArray = dataValue.split(\',\')\n    return {\n      ver_hardware: dataValueSplitArray[0], ver_software: dataValueSplitArray[1]\n    }\n  }\n  \n  // util\n  function toBinary (arr) {\n    var binaryData = []\n    for (var forArr = 0; forArr < arr.length; forArr++) {\n      var item = arr[forArr]\n      var data = parseInt(item, 16)\n        .toString(2)\n      var dataLength = data.length\n      if (data.length !== 8) {\n        for (var i = 0; i < 8 - dataLength; i++) {\n          data = \'0\' + data\n        }\n      }\n      binaryData.push(data)\n    }\n    return binaryData.toString()\n      .replace(/,/g, \'\')\n  }\n  \n  // Samples\n  // var sample = Decoder(["00", "00", "00", "01", "01", "00", "01", "00", "07", "00", "64", "00", "3C", "00", "01", "20", "01", "00", "00", "00", "00", "28", "90"], null);\n  // var sample = Decoder(["01", "01", "10", "98", "53", "00", "00", "01", "02", "10", "A8", "7A", "00", "00", "AF", "51"], null);\n  // var sample = Decoder(["01", "01", "00", "01", "01", "00", "01", "01", "02", "00", "6A", "01", "00", "15", "01", "03", "00", "30", "F1", "F7", "2C", "01", "04", "00", "09", "0C", "13", "14", "01", "05", "00", "7F", "4D", "00", "00", "01", "06", "00", "00", "00", "00", "00", "4C", "BE"], null);\n  // console.log(sample);\n')))),(0,r.yg)(u.A,{value:"For Helium",label:"For Helium",mdxType:"TabItem"},(0,r.yg)("details",null,(0,r.yg)("summary",null,"For Helium"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"/**\n * Entry, decoder.js\n */\nfunction Decoder (bytes, port) {\n    // init\n    var bytesString = bytes2HexString(bytes)\n      .toLocaleUpperCase()\n    // var bytesString = bytes\n    var decoded = {\n        // valid\n        valid: true, err: 0, // bytes\n        payload: bytesString, // messages array\n        messages: []\n    }\n\n    // CRC check\n    if (!crc16Check(bytesString)) {\n        decoded['valid'] = false\n        decoded['err'] = -1 // \"crc check fail.\"\n        return decoded\n    }\n\n    // Length Check\n    if ((((bytesString.length / 2) - 2) % 7) !== 0) {\n        decoded['valid'] = false\n        decoded['err'] = -2 // \"length check fail.\"\n        return decoded\n    }\n\n    // Cache sensor id\n    var sensorEuiLowBytes\n    var sensorEuiHighBytes\n\n    // Handle each frame\n    var frameArray = divideBy7Bytes(bytesString)\n    for (var forFrame = 0; forFrame < frameArray.length; forFrame++) {\n        var frame = frameArray[forFrame]\n        // Extract key parameters\n        var channel = strTo10SysNub(frame.substring(0, 2))\n        var dataID = strTo10SysNub(frame.substring(2, 6))\n        var dataValue = frame.substring(6, 14)\n        var realDataValue = isSpecialDataId(dataID) ? ttnDataSpecialFormat(dataID, dataValue) : ttnDataFormat(dataValue)\n\n        if (checkDataIdIsMeasureUpload(dataID)) {\n            // if telemetry.\n            decoded.messages.push({\n                type: 'report_telemetry', measurementId: dataID, measurementValue: realDataValue\n            })\n        } else if (isSpecialDataId(dataID) || (dataID === 5) || (dataID === 6) || (dataID === 9)) {\n            // if special order, except \"report_sensor_id\".\n            switch (dataID) {\n                case 0x00:\n                    // node version\n                    var versionData = sensorAttrForVersion(realDataValue)\n                    decoded.messages.push({\n                        type: 'upload_version', hardwareVersion: versionData.ver_hardware, softwareVersion: versionData.ver_software\n                    })\n                    break\n                case 1:\n                    // sensor version\n                    break\n                case 2:\n                    // sensor eui, low bytes\n                    sensorEuiLowBytes = realDataValue\n                    break\n                case 3:\n                    // sensor eui, high bytes\n                    sensorEuiHighBytes = realDataValue\n                    break\n                case 7:\n                    // battery power && interval\n                    decoded.messages.push({\n                        type: 'upload_battery', battery: realDataValue.power\n                    }, {\n                        type: 'upload_interval', interval: parseInt(realDataValue.interval) * 60\n                    })\n                    break\n                case 9:\n                    decoded.messages.push({\n                        type: 'model_info',\n                        detectionType: realDataValue.detectionType,\n                        modelId: realDataValue.modelId,\n                        modelVer: realDataValue.modelVer\n                    })\n                    break\n                case 0x120:\n                    // remove sensor\n                    decoded.messages.push({\n                        type: 'report_remove_sensor', channel: 1\n                    })\n                    break\n                default:\n                    break\n            }\n        } else {\n            decoded.messages.push({\n                type: 'unknown_message', dataID: dataID, dataValue: dataValue\n            })\n        }\n\n    }\n\n    // if the complete id received, as \"upload_sensor_id\"\n    if (sensorEuiHighBytes && sensorEuiLowBytes) {\n        decoded.messages.unshift({\n            type: 'upload_sensor_id', channel: 1, sensorId: (sensorEuiHighBytes + sensorEuiLowBytes).toUpperCase()\n        })\n    }\n\n    // return\n    //return decoded;\n    var datacakeFields = []\n    var messages = decoded.messages\n    for (var i = 0; i < messages.length; i++) {\n        var message = messages[i]\n        var id = message.measurementId\n        var type = message.type\n        var value = message.measurementValue\n        switch (type) {\n            case 'upload_battery':\n                datacakeFields.push({\n                    'field': 'BATTERY', 'value': message.battery\n                })\n                break\n            case 'upload_interval':\n                datacakeFields.push({\n                    'field': 'UPLOAD_INTERVAL', 'value': message.interval\n                })\n                break\n            case 'upload_version':\n                datacakeFields.push({\n                    'field': 'HARDWARE_VERSION', 'value': message.hardwareVersion\n                }, {\n                    'field': 'SOFTWARE_VERSION', 'value': message.softwareVersion\n                })\n                break\n            case 'model_info':\n                datacakeFields.push({\n                    'field': 'MODEL_INFO',\n                    'value': { detectionType: message.detectionType, modelId: message.modelId, modelVer: message.modelVer }\n                })\n                break\n        }\n        switch (id) {\n            case 4097:\n                datacakeFields.push({\n                    'field': 'TEMPERATURE', 'value': value\n                })\n                break\n            case 4098:\n                datacakeFields.push({\n                    'field': 'HUMIDITY', 'value': value\n                })\n                break\n            case 4099:\n                datacakeFields.push({\n                    'field': 'LIGHT_INTENSITY', 'value': value\n                })\n                break\n            case 4100:\n                datacakeFields.push({\n                    'field': 'CO2', 'value': value\n                })\n                break\n            case 4101:\n                datacakeFields.push({\n                    'field': 'BAROMETRIC_PRESSURE', 'value': value\n                })\n                break\n            case 4102:\n                datacakeFields.push({\n                    'field': 'SOIL_TEMPERATURE', 'value': value\n                })\n                break\n            case 4103:\n                datacakeFields.push({\n                    'field': 'SOIL_MOISTURE', 'value': value\n                })\n                break\n            case 4104:\n                datacakeFields.push({\n                    'field': 'WIND_DIRECTION', 'value': value\n                })\n                break\n            case 4105:\n                datacakeFields.push({\n                    'field': 'WIND_SPEED', 'value': value\n                })\n                break\n            case 4106:\n                datacakeFields.push({\n                    'field': 'PH', 'value': value\n                })\n                break\n            case 4107:\n                datacakeFields.push({\n                    'field': 'LIGHT_QUANTUM', 'value': value\n                })\n                break\n            case 4108:\n                datacakeFields.push({\n                    'field': 'ELECTRICAL_CONDUCTIVITY', 'value': value\n                })\n                break\n            case 4109:\n                datacakeFields.push({\n                    'field': 'DISSOLVED_OXYGEN', 'value': value\n                })\n                break\n            case 4110:\n                datacakeFields.push({\n                    'field': 'SOIL_VOLUMETRIC_WATER_CONTENT', 'value': value\n                })\n                break\n            case 4111:\n                datacakeFields.push({\n                    'field': 'SOIL_ELECTRICAL_CONDUCTIVITY', 'value': value\n                })\n                break\n            case 4112:\n                datacakeFields.push({\n                    'field': 'SOIL_TEMPERATURE(SOIL_TEMPERATURE, VWC & EC Sensor)', 'value': value\n                })\n                break\n            case 4113:\n                datacakeFields.push({\n                    'field': 'RAINFALL_HOURLY', 'value': value\n                })\n                break\n            case 4115:\n                datacakeFields.push({\n                    'field': 'DISTANCE', 'value': value\n                })\n                break\n            case 4116:\n                datacakeFields.push({\n                    'field': 'WATER_LEAK', 'value': value\n                })\n                break\n            case 4117:\n                datacakeFields.push({\n                    'field': 'LIGUID_LEVEL', 'value': value\n                })\n                break\n            case 4118:\n                datacakeFields.push({\n                    'field': 'NH3', 'value': value\n                })\n                break\n            case 4119:\n                datacakeFields.push({\n                    'field': 'H2S', 'value': value\n                })\n                break\n            case 4120:\n                datacakeFields.push({\n                    'field': 'FLOW_RATE', 'value': value\n                })\n                break\n            case 4121:\n                datacakeFields.push({\n                    'field': 'TOTAL_FLOW', 'value': value\n                })\n                break\n            case 4122:\n                datacakeFields.push({\n                    'field': 'OXYGEN_CONCENTRATION', 'value': value\n                })\n                break\n            case 4123:\n                datacakeFields.push({\n                    'field': 'WATER_ELETRICAL_CONDUCTIVITY', 'value': value\n                })\n                break\n            case 4124:\n                datacakeFields.push({\n                    'field': 'WATER_TEMPERATURE', 'value': value\n                })\n                break\n            case 4125:\n                datacakeFields.push({\n                    'field': 'SOIL_HEAT_FLUX', 'value': value\n                })\n                break\n            case 4126:\n                datacakeFields.push({\n                    'field': 'SUNSHINE_DURATION', 'value': value\n                })\n                break\n            case 4127:\n                datacakeFields.push({\n                    'field': 'TOTAL_SOLAR_RADIATION', 'value': value\n                })\n                break\n            case 4128:\n                datacakeFields.push({\n                    'field': 'WATER_SURFACE_EVAPORATION', 'value': value\n                })\n                break\n            case 4129:\n                datacakeFields.push({\n                    'field': 'PHOTOSYNTHETICALLY_ACTIVE_RADIATION_PAR', 'value': value\n                })\n                break\n            case 4130:\n                datacakeFields.push({\n                    'field': 'ACCELEROMETER', 'value': value\n                })\n                break\n            case 4131:\n                datacakeFields.push({\n                    'field': 'VOLUME', 'value': value\n                })\n                break\n            case 4133:\n                datacakeFields.push({\n                    'field': 'SOIL_TENSION', 'value': value\n                })\n                break\n            case 4134:\n                datacakeFields.push({\n                    'field': 'SALINITY', 'value': value\n                })\n                break\n            case 4135:\n                datacakeFields.push({\n                    'field': 'TDS', 'value': value\n                })\n                break\n            case 4136:\n                datacakeFields.push({\n                    'field': 'LEAF_TEMPERATURE', 'value': value\n                })\n                break\n            case 4137:\n                datacakeFields.push({\n                    'field': 'LEAF_WETNESS', 'value': value\n                })\n                break\n            case 4138:\n                datacakeFields.push({\n                    'field': 'SOIL_MOISTURE_10CM', 'value': value\n                })\n                break\n            case 4139:\n                datacakeFields.push({\n                    'field': 'SOIL_MOISTURE_20CM', 'value': value\n                })\n                break\n            case 4140:\n                datacakeFields.push({\n                    'field': 'SOIL_MOISTURE_30CM', 'value': value\n                })\n                break\n            case 4141:\n                datacakeFields.push({\n                    'field': 'SOIL_MOISTURE_40CM', 'value': value\n                })\n                break\n            case 4142:\n                datacakeFields.push({\n                    'field': 'SOIL_TEMPERATURE_10CM', 'value': value\n                })\n                break\n            case 4143:\n                datacakeFields.push({\n                    'field': 'SOIL_TEMPERATURE_20CM', 'value': value\n                })\n                break\n            case 4144:\n                datacakeFields.push({\n                    'field': 'SOIL_TEMPERATURE_30CM', 'value': value\n                })\n                break\n            case 4145:\n                datacakeFields.push({\n                    'field': 'SOIL_TEMPERATURE_40CM', 'value': value\n                })\n                break\n            case 4146:\n                datacakeFields.push({\n                    'field': 'PM2_5', 'value': value\n                })\n                break\n            case 4147:\n                datacakeFields.push({\n                    'field': 'PM10', 'value': value\n                })\n                break\n            case 4148:\n                datacakeFields.push({\n                    'field': 'NOISE', 'value': value\n                })\n                break\n            case 4150:\n                datacakeFields.push({\n                    'field': 'ACCELEROMETERX', 'value': value\n                })\n                break\n            case 4151:\n                datacakeFields.push({\n                    'field': 'ACCELEROMETERY', 'value': value\n                })\n                break\n            case 4152:\n                datacakeFields.push({\n                    'field': 'ACCELEROMETERZ', 'value': value\n                })\n                break\n            case 4175:\n                datacakeFields.push({\n                    'field': 'AI_DETECTION_NO_01', 'value': value\n                })\n                break\n            case 4176:\n                datacakeFields.push({\n                    'field': 'AI_DETECTION_NO_02', 'value': value\n                })\n                break\n            case 4177:\n                datacakeFields.push({\n                    'field': 'AI_DETECTION_NO_03', 'value': value\n                })\n                break\n            case 4178:\n                datacakeFields.push({\n                    'field': 'AI_DETECTION_NO_04', 'value': value\n                })\n                break\n            case 4179:\n                datacakeFields.push({\n                    'field': 'AI_DETECTION_NO_05', 'value': value\n                })\n                break\n            case 4180:\n                datacakeFields.push({\n                    'field': 'AI_DETECTION_NO_06', 'value': value\n                })\n                break\n            case 4181:\n                datacakeFields.push({\n                    'field': 'AI_DETECTION_NO_07', 'value': value\n                })\n                break\n            case 4182:\n                datacakeFields.push({\n                    'field': 'AI_DETECTION_NO_08', 'value': value\n                })\n                break\n            case 4183:\n                datacakeFields.push({\n                    'field': 'AI_DETECTION_NO_09', 'value': value\n                })\n                break\n            case 5100:\n                datacakeFields.push({\n                    'field': 'SWITCH', 'value': value\n                })\n                break\n            case 9990100:\n                datacakeFields.push({\n                    'field': 'BATTERY', 'value': message.battery\n                })\n                break\n            case 9990200:\n                datacakeFields.push({\n                    'field': 'INTERVAL', 'value': message.interval\n                })\n                break\n            case 9990300:\n                datacakeFields.push({\n                    'field': 'REMOVED', 'value': message.interval\n                })\n                break\n        }\n    }\n    return datacakeFields\n}\n\nfunction crc16Check (data) {\n    var crc16tab = [0x0000, 0x1189, 0x2312, 0x329b, 0x4624, 0x57ad, 0x6536, 0x74bf, 0x8c48, 0x9dc1, 0xaf5a, 0xbed3, 0xca6c, 0xdbe5, 0xe97e, 0xf8f7, 0x1081, 0x0108, 0x3393, 0x221a, 0x56a5, 0x472c, 0x75b7, 0x643e, 0x9cc9, 0x8d40, 0xbfdb, 0xae52, 0xdaed, 0xcb64, 0xf9ff, 0xe876, 0x2102, 0x308b, 0x0210, 0x1399, 0x6726, 0x76af, 0x4434, 0x55bd, 0xad4a, 0xbcc3, 0x8e58, 0x9fd1, 0xeb6e, 0xfae7, 0xc87c, 0xd9f5, 0x3183, 0x200a, 0x1291, 0x0318, 0x77a7, 0x662e, 0x54b5, 0x453c, 0xbdcb, 0xac42, 0x9ed9, 0x8f50, 0xfbef, 0xea66, 0xd8fd, 0xc974, 0x4204, 0x538d, 0x6116, 0x709f, 0x0420, 0x15a9, 0x2732, 0x36bb, 0xce4c, 0xdfc5, 0xed5e, 0xfcd7, 0x8868, 0x99e1, 0xab7a, 0xbaf3, 0x5285, 0x430c, 0x7197, 0x601e, 0x14a1, 0x0528, 0x37b3, 0x263a, 0xdecd, 0xcf44, 0xfddf, 0xec56, 0x98e9, 0x8960, 0xbbfb, 0xaa72, 0x6306, 0x728f, 0x4014, 0x519d, 0x2522, 0x34ab, 0x0630, 0x17b9, 0xef4e, 0xfec7, 0xcc5c, 0xddd5, 0xa96a, 0xb8e3, 0x8a78, 0x9bf1, 0x7387, 0x620e, 0x5095, 0x411c, 0x35a3, 0x242a, 0x16b1, 0x0738, 0xffcf, 0xee46, 0xdcdd, 0xcd54, 0xb9eb, 0xa862, 0x9af9, 0x8b70, 0x8408, 0x9581, 0xa71a, 0xb693, 0xc22c, 0xd3a5, 0xe13e, 0xf0b7, 0x0840, 0x19c9, 0x2b52, 0x3adb, 0x4e64, 0x5fed, 0x6d76, 0x7cff, 0x9489, 0x8500, 0xb79b, 0xa612, 0xd2ad, 0xc324, 0xf1bf, 0xe036, 0x18c1, 0x0948, 0x3bd3, 0x2a5a, 0x5ee5, 0x4f6c, 0x7df7, 0x6c7e, 0xa50a, 0xb483, 0x8618, 0x9791, 0xe32e, 0xf2a7, 0xc03c, 0xd1b5, 0x2942, 0x38cb, 0x0a50, 0x1bd9, 0x6f66, 0x7eef, 0x4c74, 0x5dfd, 0xb58b, 0xa402, 0x9699, 0x8710, 0xf3af, 0xe226, 0xd0bd, 0xc134, 0x39c3, 0x284a, 0x1ad1, 0x0b58, 0x7fe7, 0x6e6e, 0x5cf5, 0x4d7c, 0xc60c, 0xd785, 0xe51e, 0xf497, 0x8028, 0x91a1, 0xa33a, 0xb2b3, 0x4a44, 0x5bcd, 0x6956, 0x78df, 0x0c60, 0x1de9, 0x2f72, 0x3efb, 0xd68d, 0xc704, 0xf59f, 0xe416, 0x90a9, 0x8120, 0xb3bb, 0xa232, 0x5ac5, 0x4b4c, 0x79d7, 0x685e, 0x1ce1, 0x0d68, 0x3ff3, 0x2e7a, 0xe70e, 0xf687, 0xc41c, 0xd595, 0xa12a, 0xb0a3, 0x8238, 0x93b1, 0x6b46, 0x7acf, 0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9, 0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330, 0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78]\n    var result = false\n    var crc = 0\n    var dataArray = []\n    for (var i = 0; i < data.length; i += 2) {\n        dataArray.push(data.substring(i, i + 2))\n    }\n\n    for (var j = 0; j < dataArray.length; j++) {\n        var item = dataArray[j]\n        crc = (crc >> 8) ^ crc16tab[(crc ^ parseInt(item, 16)) & 0xFF]\n    }\n    if (crc === 0) {\n        result = true\n    }\n    return result\n}\n\n// util\nfunction bytes2HexString (arrBytes) {\n    var str = ''\n    for (var i = 0; i < arrBytes.length; i++) {\n        var tmp\n        var num = arrBytes[i]\n        if (num < 0) {\n            tmp = (255 + num + 1).toString(16)\n        } else {\n            tmp = num.toString(16)\n        }\n        if (tmp.length === 1) {\n            tmp = '0' + tmp\n        }\n        str += tmp\n    }\n    return str\n}\n\n// util\nfunction divideBy7Bytes (str) {\n    var frameArray = []\n    for (var i = 0; i < str.length - 4; i += 14) {\n        var data = str.substring(i, i + 14)\n        frameArray.push(data)\n    }\n    return frameArray\n}\n\n// util\nfunction littleEndianTransform (data) {\n    var dataArray = []\n    for (var i = 0; i < data.length; i += 2) {\n        dataArray.push(data.substring(i, i + 2))\n    }\n    dataArray.reverse()\n    return dataArray\n}\n\n// util\nfunction strTo10SysNub (str) {\n    var arr = littleEndianTransform(str)\n    return parseInt(arr.toString()\n      .replace(/,/g, ''), 16)\n}\n\n// util\nfunction checkDataIdIsMeasureUpload (dataId) {\n    return parseInt(dataId) > 4096\n}\n\n// configurable.\nfunction isSpecialDataId (dataID) {\n    switch (dataID) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 7:\n        case 9:\n        case 0x120:\n            return true\n        default:\n            return false\n    }\n}\n\n// configurable\nfunction ttnDataSpecialFormat (dataId, str) {\n    var strReverse = littleEndianTransform(str)\n    if (dataId === 2 || dataId === 3) {\n        return strReverse.join('')\n    }\n\n    // handle unsigned number\n    var str2 = toBinary(strReverse)\n\n    var dataArray = []\n    switch (dataId) {\n        case 0: // DATA_BOARD_VERSION\n        case 1: // DATA_SENSOR_VERSION\n            // Using point segmentation\n            for (var k = 0; k < str2.length; k += 16) {\n                var tmp146 = str2.substring(k, k + 16)\n                tmp146 = (parseInt(tmp146.substring(0, 8), 2) || 0) + '.' + (parseInt(tmp146.substring(8, 16), 2) || 0)\n                dataArray.push(tmp146)\n            }\n            return dataArray.join(',')\n        case 4:\n            for (var i = 0; i < str2.length; i += 8) {\n                var item = parseInt(str2.substring(i, i + 8), 2)\n                if (item < 10) {\n                    item = '0' + item.toString()\n                } else {\n                    item = item.toString()\n                }\n                dataArray.push(item)\n            }\n            return dataArray.join('')\n        case 7:\n            // battery && interval\n            return {\n                interval: parseInt(str2.substr(0, 16), 2), power: parseInt(str2.substr(-16, 16), 2)\n            }\n        case 9:\n            let dataValue = {\n                detectionType: parseInt(str2.substring(0, 8), 2),\n                modelId: parseInt(str2.substring(8, 16), 2),\n                modelVer: parseInt(str2.substring(16, 24), 2)\n            }\n            // 01010000\n            return dataValue\n\n    }\n}\n\n// util\nfunction ttnDataFormat (str) {\n    var strReverse = littleEndianTransform(str)\n    var str2 = toBinary(strReverse)\n    if (str2.substring(0, 1) === '1') {\n        var arr = str2.split('')\n        var reverseArr = []\n        for (var forArr = 0; forArr < arr.length; forArr++) {\n            var item = arr[forArr]\n            if (parseInt(item) === 1) {\n                reverseArr.push(0)\n            } else {\n                reverseArr.push(1)\n            }\n        }\n        str2 = parseInt(reverseArr.join(''), 2) + 1\n        return parseFloat('-' + str2 / 1000)\n    }\n    return parseInt(str2, 2) / 1000\n}\n\n// util\nfunction sensorAttrForVersion (dataValue) {\n    var dataValueSplitArray = dataValue.split(',')\n    return {\n        ver_hardware: dataValueSplitArray[0], ver_software: dataValueSplitArray[1]\n    }\n}\n\n// util\nfunction toBinary (arr) {\n    var binaryData = []\n    for (var forArr = 0; forArr < arr.length; forArr++) {\n        var item = arr[forArr]\n        var data = parseInt(item, 16)\n          .toString(2)\n        var dataLength = data.length\n        if (data.length !== 8) {\n            for (var i = 0; i < 8 - dataLength; i++) {\n                data = '0' + data\n            }\n        }\n        binaryData.push(data)\n    }\n    return binaryData.toString()\n      .replace(/,/g, '')\n}\n"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"sensecap-s2100-data-logger"},"SenseCAP S2100 Data Logger"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.seeedstudio.com/SenseCAP-S2100-LoRaWAN-Data-Logger-p-5361.html"},"SenseCAP S2100 Data Logger")," is a versatile device that can connect to MODBUS-RTU RS485/Analog/GPIO sensors, allowing for easy transmission of data to the LoRaWAN network. With its LoRa and IP66 design, this device boasts impressive stability and reliability, and can cover a long transmission range while keeping ultra-low power consumption. It is perfect for outdoor use, and can be powered by battery or connected to a 12V external power supply for even greater flexibility. When connected to the 12V power supply, the replaceable built-in battery acts as a backup power source. Additionally, the S2100 Data Logger is optimized for OTA with built-in Bluetooth, making setup and updates quick and simple. To top it off, the S2110 converter enables the S2100 Data Logger to connect to Grove Sensors, making it an excellent choice for DIY industrial-level LoRaWAN sensors and small-scale deployment."),(0,r.yg)("div",{align:"center"},(0,r.yg)("img",{width:"{600}",src:"https://files.seeedstudio.com/wiki/SenseCAP/Data_Logger/1.png"})),(0,r.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,r.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/SenseCAP-S2100-LoRaWAN-Data-Logger-p-5361.html"},(0,r.yg)("strong",null,(0,r.yg)("span",null,(0,r.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f"))))),(0,r.yg)("h4",{id:"decoder-3"},"Decoder"),(0,r.yg)(s.A,{mdxType:"Tabs2"},(0,r.yg)(u.A,{value:"For TTN",label:"For TTN",mdxType:"TabItem2"},(0,r.yg)("details",null,(0,r.yg)("summary",null,"For TTN"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"/**\n * Entry, decoder.js\n */\nfunction decodeUplink (input, port) {\n    // data split\n  \n    var bytes = input['bytes']\n    // init\n    bytes = bytes2HexString(bytes)\n      .toLocaleUpperCase()\n  \n    let result = {\n      'err': 0, 'payload': bytes, 'valid': true, messages: []\n    }\n    let splitArray = dataSplit(bytes)\n    // data decoder\n    let decoderArray = []\n    for (let i = 0; i < splitArray.length; i++) {\n      let item = splitArray[i]\n      let dataId = item.dataId\n      let dataValue = item.dataValue\n      let messages = dataIdAndDataValueJudge(dataId, dataValue)\n      decoderArray.push(messages)\n    }\n    result.messages = decoderArray\n    return { data: result }\n  }\n  \n  /**\n   * data splits\n   * @param bytes\n   * @returns {*[]}\n   */\n  function dataSplit (bytes) {\n    let frameArray = []\n  \n    for (let i = 0; i < bytes.length; i++) {\n      let remainingValue = bytes\n      let dataId = remainingValue.substring(0, 2)\n      let dataValue\n      let dataObj = {}\n      switch (dataId) {\n        case '01' :\n        case '20' :\n        case '21' :\n        case '30' :\n        case '31' :\n        case '33' :\n        case '40' :\n        case '41' :\n        case '42' :\n        case '43' :\n        case '44' :\n        case '45' :\n          dataValue = remainingValue.substring(2, 22)\n          bytes = remainingValue.substring(22)\n          dataObj = {\n            'dataId': dataId, 'dataValue': dataValue\n          }\n          break\n        case '02':\n          dataValue = remainingValue.substring(2, 18)\n          bytes = remainingValue.substring(18)\n          dataObj = {\n            'dataId': '02', 'dataValue': dataValue\n          }\n          break\n        case '03' :\n        case '06':\n          dataValue = remainingValue.substring(2, 4)\n          bytes = remainingValue.substring(4)\n          dataObj = {\n            'dataId': dataId, 'dataValue': dataValue\n          }\n          break\n        case '05' :\n        case '34':\n          dataValue = bytes.substring(2, 10)\n          bytes = remainingValue.substring(10)\n          dataObj = {\n            'dataId': dataId, 'dataValue': dataValue\n          }\n          break\n        case '04':\n        case '10':\n        case '32':\n        case '35':\n        case '36':\n        case '37':\n        case '38':\n        case '39':\n          dataValue = bytes.substring(2, 20)\n          bytes = remainingValue.substring(20)\n          dataObj = {\n            'dataId': dataId, 'dataValue': dataValue\n          }\n          break\n        default:\n          dataValue = '9'\n          break\n      }\n      if (dataValue.length < 2) {\n        break\n      }\n      frameArray.push(dataObj)\n    }\n    return frameArray\n  }\n  \n  function dataIdAndDataValueJudge (dataId, dataValue) {\n    let messages = []\n    switch (dataId) {\n      case '01':\n        let temperature = dataValue.substring(0, 4)\n        let humidity = dataValue.substring(4, 6)\n        let illumination = dataValue.substring(6, 14)\n        let uv = dataValue.substring(14, 16)\n        let windSpeed = dataValue.substring(16, 20)\n        messages = [{\n          measurementValue: loraWANV2DataFormat(temperature, 10), measurementId: '4097', type: 'Air Temperature'\n        }, {\n          measurementValue: loraWANV2DataFormat(humidity), measurementId: '4098', type: 'Air Humidity'\n        }, {\n          measurementValue: loraWANV2DataFormat(illumination), measurementId: '4099', type: 'Light Intensity'\n        }, {\n          measurementValue: loraWANV2DataFormat(uv, 10), measurementId: '4190', type: 'UV Index'\n        }, {\n          measurementValue: loraWANV2DataFormat(windSpeed, 10), measurementId: '4105', type: 'Wind Speed'\n        }]\n        break\n      case '02':\n        let windDirection = dataValue.substring(0, 4)\n        let rainfall = dataValue.substring(4, 12)\n        let airPressure = dataValue.substring(12, 16)\n        messages = [{\n          measurementValue: loraWANV2DataFormat(windDirection), measurementId: '4104', type: 'Wind Direction Sensor'\n        }, {\n          measurementValue: loraWANV2DataFormat(rainfall, 1000), measurementId: '4113', type: 'Rain Gauge'\n        }, {\n  \n          measurementValue: loraWANV2DataFormat(airPressure, 0.1), measurementId: '4101', type: 'Barometric Pressure'\n        }]\n        break\n      case '03':\n        let Electricity = dataValue\n        messages = [{\n          'Battery(%)': loraWANV2DataFormat(Electricity)\n        }]\n        break\n      case '04':\n        let electricityWhether = dataValue.substring(0, 2)\n        let hwv = dataValue.substring(2, 6)\n        let bdv = dataValue.substring(6, 10)\n        let sensorAcquisitionInterval = dataValue.substring(10, 14)\n        let gpsAcquisitionInterval = dataValue.substring(14, 18)\n        messages = [{\n          'Battery(%)': loraWANV2DataFormat(electricityWhether),\n          'Hardware Version': `${loraWANV2DataFormat(hwv.substring(0, 2))}.${loraWANV2DataFormat(hwv.substring(2, 4))}`,\n          'Firmware Version': `${loraWANV2DataFormat(bdv.substring(0, 2))}.${loraWANV2DataFormat(bdv.substring(2, 4))}`,\n          'measureInterval': parseInt(loraWANV2DataFormat(sensorAcquisitionInterval)) * 60,\n          'gpsInterval': parseInt(loraWANV2DataFormat(gpsAcquisitionInterval)) * 60\n        }]\n        break\n      case '05':\n        let sensorAcquisitionIntervalFive = dataValue.substring(0, 4)\n        let gpsAcquisitionIntervalFive = dataValue.substring(4, 8)\n        messages = [{\n          'measureInterval': parseInt(loraWANV2DataFormat(sensorAcquisitionIntervalFive)) * 60,\n          'gpsInterval': parseInt(loraWANV2DataFormat(gpsAcquisitionIntervalFive)) * 60\n        }]\n        break\n      case '06':\n        let errorCode = dataValue\n        let descZh\n        switch (errorCode) {\n          case '00':\n            descZh = 'CCL_SENSOR_ERROR_NONE'\n            break\n          case '01':\n            descZh = 'CCL_SENSOR_NOT_FOUND'\n            break\n          case '02':\n            descZh = 'CCL_SENSOR_WAKEUP_ERROR'\n            break\n          case '03':\n            descZh = 'CCL_SENSOR_NOT_RESPONSE'\n            break\n          case '04':\n            descZh = 'CCL_SENSOR_DATA_EMPTY'\n            break\n          case '05':\n            descZh = 'CCL_SENSOR_DATA_HEAD_ERROR'\n            break\n          case '06':\n            descZh = 'CCL_SENSOR_DATA_CRC_ERROR'\n            break\n          case '07':\n            descZh = 'CCL_SENSOR_DATA_B1_NO_VALID'\n            break\n          case '08':\n            descZh = 'CCL_SENSOR_DATA_B2_NO_VALID'\n            break\n          case '09':\n            descZh = 'CCL_SENSOR_RANDOM_NOT_MATCH'\n            break\n          case '0A':\n            descZh = 'CCL_SENSOR_PUBKEY_SIGN_VERIFY_FAILED'\n            break\n          case '0B':\n            descZh = 'CCL_SENSOR_DATA_SIGN_VERIFY_FAILED'\n            break\n          case '0C':\n            descZh = 'CCL_SENSOR_DATA_VALUE_HI'\n            break\n          case '0D':\n            descZh = 'CCL_SENSOR_DATA_VALUE_LOW'\n            break\n          case '0E':\n            descZh = 'CCL_SENSOR_DATA_VALUE_MISSED'\n            break\n          case '0F':\n            descZh = 'CCL_SENSOR_ARG_INVAILD'\n            break\n          case '10':\n            descZh = 'CCL_SENSOR_RS485_MASTER_BUSY'\n            break\n          case '11':\n            descZh = 'CCL_SENSOR_RS485_REV_DATA_ERROR'\n            break\n          case '12':\n            descZh = 'CCL_SENSOR_RS485_REG_MISSED'\n            break\n          case '13':\n            descZh = 'CCL_SENSOR_RS485_FUN_EXE_ERROR'\n            break\n          case '14':\n            descZh = 'CCL_SENSOR_RS485_WRITE_STRATEGY_ERROR'\n            break\n          case '15':\n            descZh = 'CCL_SENSOR_CONFIG_ERROR'\n            break\n          case 'FF':\n            descZh = 'CCL_SENSOR_DATA_ERROR_UNKONW'\n            break\n          default:\n            descZh = 'CC_OTHER_FAILED'\n            break\n        }\n        messages = [{\n          measurementId: '4101', type: 'sensor_error_event', errCode: errorCode, descZh\n        }]\n        break\n      case '10':\n        let statusValue = dataValue.substring(0, 2)\n        let { status, type } = loraWANV2BitDataFormat(statusValue)\n        let sensecapId = dataValue.substring(2)\n        messages = [{\n          status: status, channelType: type, sensorEui: sensecapId\n        }]\n        break\n      case '20':\n        let initmeasurementId = 4175\n        let sensor = []\n        for (let i = 0; i < dataValue.length; i += 4) {\n          let modelId = loraWANV2DataFormat(dataValue.substring(i, i + 2))\n          let detectionType = loraWANV2DataFormat(dataValue.substring(i + 2, i + 4))\n          let aiHeadValues = `${modelId}.${detectionType}`\n          sensor.push({\n            measurementValue: aiHeadValues, measurementId: initmeasurementId\n          })\n          initmeasurementId++\n        }\n        messages = sensor\n        break\n      case '21':\n        // Vision AI:\n        // AI \u8bc6\u522b\u8f93\u51fa\u5e27\n        let tailValueArray = []\n        let initTailmeasurementId = 4180\n        for (let i = 0; i < dataValue.length; i += 4) {\n          let modelId = loraWANV2DataFormat(dataValue.substring(i, i + 2))\n          let detectionType = loraWANV2DataFormat(dataValue.substring(i + 2, i + 4))\n          let aiTailValues = `${modelId}.${detectionType}`\n          tailValueArray.push({\n            measurementValue: aiTailValues, measurementId: initTailmeasurementId, type: `AI Detection ${i}`\n          })\n          initTailmeasurementId++\n        }\n        messages = tailValueArray\n        break\n      case '30':\n      case '31':\n        // \u9996\u5e27\u6216\u8005\u9996\u5e27\u8f93\u51fa\u5e27\n        let channelInfoOne = loraWANV2ChannelBitFormat(dataValue.substring(0, 2))\n        let dataOne = {\n          measurementValue: loraWANV2DataFormat(dataValue.substring(4, 12), 1000),\n          measurementId: parseInt(channelInfoOne.one),\n          type: 'Measurement'\n        }\n        let dataTwo = {\n          measurementValue: loraWANV2DataFormat(dataValue.substring(12, 20), 1000),\n          measurementId: parseInt(channelInfoOne.two),\n          type: 'Measurement'\n        }\n        let cacheArrayInfo = []\n        if (parseInt(channelInfoOne.one)) {\n          cacheArrayInfo.push(dataOne)\n        }\n        if (parseInt(channelInfoOne.two)) {\n          cacheArrayInfo.push(dataTwo)\n        }\n        cacheArrayInfo.forEach(item => {\n          messages.push(item)\n        })\n        break\n      case '32':\n        let channelInfoTwo = loraWANV2ChannelBitFormat(dataValue.substring(0, 2))\n        let dataThree = {\n          measurementValue: loraWANV2DataFormat(dataValue.substring(2, 10), 1000),\n          measurementId: parseInt(channelInfoTwo.one),\n          type: 'Measurement'\n        }\n        let dataFour = {\n          measurementValue: loraWANV2DataFormat(dataValue.substring(10, 18), 1000),\n          measurementId: parseInt(channelInfoTwo.two),\n          type: 'Measurement'\n        }\n        if (parseInt(channelInfoTwo.one)) {\n          messages.push(dataThree)\n        }\n        if (parseInt(channelInfoTwo.two)) {\n          messages.push(dataFour)\n        }\n        break\n      case '33':\n        let channelInfoThree = loraWANV2ChannelBitFormat(dataValue.substring(0, 2))\n        let dataFive = {\n          measurementValue: loraWANV2DataFormat(dataValue.substring(4, 12), 1000),\n          measurementId: parseInt(channelInfoThree.one),\n          type: 'Measurement'\n        }\n        let dataSix = {\n          measurementValue: loraWANV2DataFormat(dataValue.substring(12, 20), 1000),\n          measurementId: parseInt(channelInfoThree.two),\n          type: 'Measurement'\n        }\n        if (parseInt(channelInfoThree.one)) {\n          messages.push(dataFive)\n        }\n        if (parseInt(channelInfoThree.two)) {\n          messages.push(dataSix)\n        }\n  \n        break\n      case '34':\n        let model = loraWANV2DataFormat(dataValue.substring(0, 2))\n        let GPIOInput = loraWANV2DataFormat(dataValue.substring(2, 4))\n        let simulationModel = loraWANV2DataFormat(dataValue.substring(4, 6))\n        let simulationInterface = loraWANV2DataFormat(dataValue.substring(6, 8))\n        messages = [{\n          'dataloggerProtocol': model,\n          'dataloggerGPIOInput': GPIOInput,\n          'dataloggerAnalogType': simulationModel,\n          'dataloggerAnalogInterface': simulationInterface\n        }]\n        break\n      case '35':\n      case '36':\n        let channelTDOne = loraWANV2ChannelBitFormat(dataValue.substring(0, 2))\n        let channelSortTDOne = 3920 + (parseInt(channelTDOne.one) - 1) * 2\n        let channelSortTDTWO = 3921 + (parseInt(channelTDOne.one) - 1) * 2\n        messages = [{\n          [channelSortTDOne]: loraWANV2DataFormat(dataValue.substring(2, 10), 1000),\n          [channelSortTDTWO]: loraWANV2DataFormat(dataValue.substring(10, 18), 1000)\n        }]\n        break\n      case '37':\n        let channelTDInfoTwo = loraWANV2ChannelBitFormat(dataValue.substring(0, 2))\n        let channelSortOne = 3920 + (parseInt(channelTDInfoTwo.one) - 1) * 2\n        let channelSortTWO = 3921 + (parseInt(channelTDInfoTwo.one) - 1) * 2\n        messages = [{\n          [channelSortOne]: loraWANV2DataFormat(dataValue.substring(2, 10), 1000),\n          [channelSortTWO]: loraWANV2DataFormat(dataValue.substring(10, 18), 1000)\n        }]\n        break\n      case '38':\n        let channelTDInfoThree = loraWANV2ChannelBitFormat(dataValue.substring(0, 2))\n        let channelSortThreeOne = 3920 + (parseInt(channelTDInfoThree.one) - 1) * 2\n        let channelSortThreeTWO = 3921 + (parseInt(channelTDInfoThree.one) - 1) * 2\n        messages = [{\n          [channelSortThreeOne]: loraWANV2DataFormat(dataValue.substring(2, 10), 1000),\n          [channelSortThreeTWO]: loraWANV2DataFormat(dataValue.substring(10, 18), 1000)\n        }]\n        break\n      case '39':\n        let electricityWhetherTD = dataValue.substring(0, 2)\n        let hwvTD = dataValue.substring(2, 6)\n        let bdvTD = dataValue.substring(6, 10)\n        let sensorAcquisitionIntervalTD = dataValue.substring(10, 14)\n        let gpsAcquisitionIntervalTD = dataValue.substring(14, 18)\n        messages = [{\n          'Battery(%)': loraWANV2DataFormat(electricityWhetherTD),\n          'Hardware Version': `${loraWANV2DataFormat(hwvTD.substring(0, 2))}.${loraWANV2DataFormat(hwvTD.substring(2, 4))}`,\n          'Firmware Version': `${loraWANV2DataFormat(bdvTD.substring(0, 2))}.${loraWANV2DataFormat(bdvTD.substring(2, 4))}`,\n          'measureInterval': parseInt(loraWANV2DataFormat(sensorAcquisitionIntervalTD)) * 60,\n          'thresholdMeasureInterval': parseInt(loraWANV2DataFormat(gpsAcquisitionIntervalTD))\n        }]\n        break\n      case '40':\n      case '41':\n        let lightIntensity = dataValue.substring(0, 4)\n        let loudness = dataValue.substring(4, 8)\n        // X\n        let accelerateX = dataValue.substring(8, 12)\n        // Y\n        let accelerateY = dataValue.substring(12, 16)\n        // Z\n        let accelerateZ = dataValue.substring(16, 20)\n        messages = [{\n          measurementValue: loraWANV2DataFormat(lightIntensity), measurementId: '4193', type: 'Light Intensity'\n        }, {\n          measurementValue: loraWANV2DataFormat(loudness), measurementId: '4192', type: 'Sound Intensity'\n        }, {\n  \n          measurementValue: loraWANV2DataFormat(accelerateX, 100), measurementId: '4150', type: 'AccelerometerX'\n        }, {\n  \n          measurementValue: loraWANV2DataFormat(accelerateY, 100), measurementId: '4151', type: 'AccelerometerY'\n        }, {\n  \n          measurementValue: loraWANV2DataFormat(accelerateZ, 100), measurementId: '4152', type: 'AccelerometerZ'\n        }]\n        break\n      case '42':\n        let airTemperature = dataValue.substring(0, 4)\n        let AirHumidity = dataValue.substring(4, 8)\n        let tVOC = dataValue.substring(8, 12)\n        let CO2eq = dataValue.substring(12, 16)\n        let soilMoisture = dataValue.substring(16, 20)\n        messages = [{\n          measurementValue: loraWANV2DataFormat(airTemperature, 100), measurementId: '4097', type: 'Air Temperature'\n        }, {\n          measurementValue: loraWANV2DataFormat(AirHumidity, 100), measurementId: '4098', type: 'Air Humidity'\n        }, {\n          measurementValue: loraWANV2DataFormat(tVOC), measurementId: '4195', type: 'Total Volatile Organic Compounds'\n        }, {\n          measurementValue: loraWANV2DataFormat(CO2eq), measurementId: '4100', type: 'CO2'\n        }, {\n          measurementValue: loraWANV2DataFormat(soilMoisture), measurementId: '4196', type: 'Soil moisture intensity'\n        }]\n        break\n      case '43':\n      case '44':\n        let headerDevKitValueArray = []\n        let initDevkitmeasurementId = 4175\n        for (let i = 0; i < dataValue.length; i += 4) {\n          let modelId = loraWANV2DataFormat(dataValue.substring(i, i + 2))\n          let detectionType = loraWANV2DataFormat(dataValue.substring(i + 2, i + 4))\n          let aiHeadValues = `${modelId}.${detectionType}`\n          headerDevKitValueArray.push({\n            measurementValue: aiHeadValues, measurementId: initDevkitmeasurementId, type: `AI Detection ${i}`\n          })\n          initDevkitmeasurementId++\n        }\n        messages = headerDevKitValueArray\n        break\n      case '45':\n        let initTailDevKitmeasurementId = 4180\n        for (let i = 0; i < dataValue.length; i += 4) {\n          let modelId = loraWANV2DataFormat(dataValue.substring(i, i + 2))\n          let detectionType = loraWANV2DataFormat(dataValue.substring(i + 2, i + 4))\n          let aiTailValues = `${modelId}.${detectionType}`\n          messages.push({\n            measurementValue: aiTailValues, measurementId: initTailDevKitmeasurementId, type: `AI Detection ${i}`\n          })\n          initTailDevKitmeasurementId++\n        }\n        break\n      default:\n        break\n    }\n    return messages\n  }\n  \n  /**\n   *\n   * data formatting\n   * @param str\n   * @param divisor\n   * @returns {string|number}\n   */\n  function loraWANV2DataFormat (str, divisor = 1) {\n    let strReverse = bigEndianTransform(str)\n    let str2 = toBinary(strReverse)\n    if (str2.substring(0, 1) === '1') {\n      let arr = str2.split('')\n      let reverseArr = arr.map((item) => {\n        if (parseInt(item) === 1) {\n          return 0\n        } else {\n          return 1\n        }\n      })\n      str2 = parseInt(reverseArr.join(''), 2) + 1\n      return '-' + str2 / divisor\n    }\n    return parseInt(str2, 2) / divisor\n  }\n  \n  /**\n   * Handling big-endian data formats\n   * @param data\n   * @returns {*[]}\n   */\n  function bigEndianTransform (data) {\n    let dataArray = []\n    for (let i = 0; i < data.length; i += 2) {\n      dataArray.push(data.substring(i, i + 2))\n    }\n    // array of hex\n    return dataArray\n  }\n  \n  /**\n   * Convert to an 8-digit binary number with 0s in front of the number\n   * @param arr\n   * @returns {string}\n   */\n  function toBinary (arr) {\n    let binaryData = arr.map((item) => {\n      let data = parseInt(item, 16)\n        .toString(2)\n      let dataLength = data.length\n      if (data.length !== 8) {\n        for (let i = 0; i < 8 - dataLength; i++) {\n          data = `0` + data\n        }\n      }\n      return data\n    })\n    let ret = binaryData.toString()\n      .replace(/,/g, '')\n    return ret\n  }\n  \n  /**\n   * sensor\n   * @param str\n   * @returns {{channel: number, type: number, status: number}}\n   */\n  function loraWANV2BitDataFormat (str) {\n    let strReverse = bigEndianTransform(str)\n    let str2 = toBinary(strReverse)\n    let channel = parseInt(str2.substring(0, 4), 2)\n    let status = parseInt(str2.substring(4, 5), 2)\n    let type = parseInt(str2.substring(5), 2)\n    return { channel, status, type }\n  }\n  \n  /**\n   * channel info\n   * @param str\n   * @returns {{channelTwo: number, channelOne: number}}\n   */\n  function loraWANV2ChannelBitFormat (str) {\n    let strReverse = bigEndianTransform(str)\n    let str2 = toBinary(strReverse)\n    let one = parseInt(str2.substring(0, 4), 2)\n    let two = parseInt(str2.substring(4, 8), 2)\n    let resultInfo = {\n      one: one, two: two\n    }\n    return resultInfo\n  }\n  \n  /**\n   * data log status bit\n   * @param str\n   * @returns {{total: number, level: number, isTH: number}}\n   */\n  function loraWANV2DataLogBitFormat (str) {\n    let strReverse = bigEndianTransform(str)\n    let str2 = toBinary(strReverse)\n    let isTH = parseInt(str2.substring(0, 1), 2)\n    let total = parseInt(str2.substring(1, 5), 2)\n    let left = parseInt(str2.substring(5), 2)\n    let resultInfo = {\n      isTH: isTH, total: total, left: left\n    }\n    return resultInfo\n  }\n  \n  function bytes2HexString (arrBytes) {\n    var str = ''\n    for (var i = 0; i < arrBytes.length; i++) {\n      var tmp\n      var num = arrBytes[i]\n      if (num < 0) {\n        tmp = (255 + num + 1).toString(16)\n      } else {\n        tmp = num.toString(16)\n      }\n      if (tmp.length === 1) {\n        tmp = '0' + tmp\n      }\n      str += tmp\n    }\n    return str\n  }\n")))),(0,r.yg)(u.A,{value:"For Helium",label:"For Helium",mdxType:"TabItem2"},(0,r.yg)("details",null,(0,r.yg)("summary",null,"For Helium"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"/**\n * Entry, decoder.js\n */\nfunction Decoder (bytes, port) {\n  // data split\n\n  bytes = bytes2HexString(bytes)\n    .toLocaleUpperCase()\n\n  let result = {\n    'err': 0, 'payload': bytes, 'valid': true, messages: []\n  }\n  let splitArray = dataSplit(bytes)\n  // data decoder\n  let decoderArray = []\n  for (let i = 0; i < splitArray.length; i++) {\n    let item = splitArray[i]\n    let dataId = item.dataId\n    let dataValue = item.dataValue\n    let messages = dataIdAndDataValueJudge(dataId, dataValue)\n    decoderArray.push(messages)\n  }\n  result.messages = decoderArray\n  return { data: result }\n}\n\n/**\n * data splits\n * @param bytes\n * @returns {*[]}\n */\nfunction dataSplit (bytes) {\n  let frameArray = []\n\n  for (let i = 0; i < bytes.length; i++) {\n    let remainingValue = bytes\n    let dataId = remainingValue.substring(0, 2)\n    let dataValue\n    let dataObj = {}\n    switch (dataId) {\n      case '01' :\n      case '20' :\n      case '21' :\n      case '30' :\n      case '31' :\n      case '33' :\n      case '40' :\n      case '41' :\n      case '42' :\n      case '43' :\n      case '44' :\n      case '45' :\n        dataValue = remainingValue.substring(2, 22)\n        bytes = remainingValue.substring(22)\n        dataObj = {\n          'dataId': dataId, 'dataValue': dataValue\n        }\n        break\n      case '02':\n        dataValue = remainingValue.substring(2, 18)\n        bytes = remainingValue.substring(18)\n        dataObj = {\n          'dataId': '02', 'dataValue': dataValue\n        }\n        break\n      case '03' :\n      case '06':\n        dataValue = remainingValue.substring(2, 4)\n        bytes = remainingValue.substring(4)\n        dataObj = {\n          'dataId': dataId, 'dataValue': dataValue\n        }\n        break\n      case '05' :\n      case '34':\n        dataValue = bytes.substring(2, 10)\n        bytes = remainingValue.substring(10)\n        dataObj = {\n          'dataId': dataId, 'dataValue': dataValue\n        }\n        break\n      case '04':\n      case '10':\n      case '32':\n      case '35':\n      case '36':\n      case '37':\n      case '38':\n      case '39':\n        dataValue = bytes.substring(2, 20)\n        bytes = remainingValue.substring(20)\n        dataObj = {\n          'dataId': dataId, 'dataValue': dataValue\n        }\n        break\n      default:\n        dataValue = '9'\n        break\n    }\n    if (dataValue.length < 2) {\n      break\n    }\n    frameArray.push(dataObj)\n  }\n  return frameArray\n}\n\nfunction dataIdAndDataValueJudge (dataId, dataValue) {\n  let messages = []\n  switch (dataId) {\n    case '01':\n      let temperature = dataValue.substring(0, 4)\n      let humidity = dataValue.substring(4, 6)\n      let illumination = dataValue.substring(6, 14)\n      let uv = dataValue.substring(14, 16)\n      let windSpeed = dataValue.substring(16, 20)\n      messages = [{\n        measurementValue: loraWANV2DataFormat(temperature, 10), measurementId: '4097', type: 'Air Temperature'\n      }, {\n        measurementValue: loraWANV2DataFormat(humidity), measurementId: '4098', type: 'Air Humidity'\n      }, {\n        measurementValue: loraWANV2DataFormat(illumination), measurementId: '4099', type: 'Light Intensity'\n      }, {\n        measurementValue: loraWANV2DataFormat(uv, 10), measurementId: '4190', type: 'UV Index'\n      }, {\n        measurementValue: loraWANV2DataFormat(windSpeed, 10), measurementId: '4105', type: 'Wind Speed'\n      }]\n      break\n    case '02':\n      let windDirection = dataValue.substring(0, 4)\n      let rainfall = dataValue.substring(4, 12)\n      let airPressure = dataValue.substring(12, 16)\n      messages = [{\n        measurementValue: loraWANV2DataFormat(windDirection), measurementId: '4104', type: 'Wind Direction Sensor'\n      }, {\n        measurementValue: loraWANV2DataFormat(rainfall, 1000), measurementId: '4113', type: 'Rain Gauge'\n      }, {\n\n        measurementValue: loraWANV2DataFormat(airPressure, 0.1), measurementId: '4101', type: 'Barometric Pressure'\n      }]\n      break\n    case '03':\n      let Electricity = dataValue\n      messages = [{\n        'Battery(%)': loraWANV2DataFormat(Electricity)\n      }]\n      break\n    case '04':\n      let electricityWhether = dataValue.substring(0, 2)\n      let hwv = dataValue.substring(2, 6)\n      let bdv = dataValue.substring(6, 10)\n      let sensorAcquisitionInterval = dataValue.substring(10, 14)\n      let gpsAcquisitionInterval = dataValue.substring(14, 18)\n      messages = [{\n        'Battery(%)': loraWANV2DataFormat(electricityWhether),\n        'Hardware Version': `${loraWANV2DataFormat(hwv.substring(0, 2))}.${loraWANV2DataFormat(hwv.substring(2, 4))}`,\n        'Firmware Version': `${loraWANV2DataFormat(bdv.substring(0, 2))}.${loraWANV2DataFormat(bdv.substring(2, 4))}`,\n        'measureInterval': parseInt(loraWANV2DataFormat(sensorAcquisitionInterval)) * 60,\n        'gpsInterval': parseInt(loraWANV2DataFormat(gpsAcquisitionInterval)) * 60\n      }]\n      break\n    case '05':\n      let sensorAcquisitionIntervalFive = dataValue.substring(0, 4)\n      let gpsAcquisitionIntervalFive = dataValue.substring(4, 8)\n      messages = [{\n        'measureInterval': parseInt(loraWANV2DataFormat(sensorAcquisitionIntervalFive)) * 60,\n        'gpsInterval': parseInt(loraWANV2DataFormat(gpsAcquisitionIntervalFive)) * 60\n      }]\n      break\n    case '06':\n      let errorCode = dataValue\n      let descZh\n      switch (errorCode) {\n        case '00':\n          descZh = 'CCL_SENSOR_ERROR_NONE'\n          break\n        case '01':\n          descZh = 'CCL_SENSOR_NOT_FOUND'\n          break\n        case '02':\n          descZh = 'CCL_SENSOR_WAKEUP_ERROR'\n          break\n        case '03':\n          descZh = 'CCL_SENSOR_NOT_RESPONSE'\n          break\n        case '04':\n          descZh = 'CCL_SENSOR_DATA_EMPTY'\n          break\n        case '05':\n          descZh = 'CCL_SENSOR_DATA_HEAD_ERROR'\n          break\n        case '06':\n          descZh = 'CCL_SENSOR_DATA_CRC_ERROR'\n          break\n        case '07':\n          descZh = 'CCL_SENSOR_DATA_B1_NO_VALID'\n          break\n        case '08':\n          descZh = 'CCL_SENSOR_DATA_B2_NO_VALID'\n          break\n        case '09':\n          descZh = 'CCL_SENSOR_RANDOM_NOT_MATCH'\n          break\n        case '0A':\n          descZh = 'CCL_SENSOR_PUBKEY_SIGN_VERIFY_FAILED'\n          break\n        case '0B':\n          descZh = 'CCL_SENSOR_DATA_SIGN_VERIFY_FAILED'\n          break\n        case '0C':\n          descZh = 'CCL_SENSOR_DATA_VALUE_HI'\n          break\n        case '0D':\n          descZh = 'CCL_SENSOR_DATA_VALUE_LOW'\n          break\n        case '0E':\n          descZh = 'CCL_SENSOR_DATA_VALUE_MISSED'\n          break\n        case '0F':\n          descZh = 'CCL_SENSOR_ARG_INVAILD'\n          break\n        case '10':\n          descZh = 'CCL_SENSOR_RS485_MASTER_BUSY'\n          break\n        case '11':\n          descZh = 'CCL_SENSOR_RS485_REV_DATA_ERROR'\n          break\n        case '12':\n          descZh = 'CCL_SENSOR_RS485_REG_MISSED'\n          break\n        case '13':\n          descZh = 'CCL_SENSOR_RS485_FUN_EXE_ERROR'\n          break\n        case '14':\n          descZh = 'CCL_SENSOR_RS485_WRITE_STRATEGY_ERROR'\n          break\n        case '15':\n          descZh = 'CCL_SENSOR_CONFIG_ERROR'\n          break\n        case 'FF':\n          descZh = 'CCL_SENSOR_DATA_ERROR_UNKONW'\n          break\n        default:\n          descZh = 'CC_OTHER_FAILED'\n          break\n      }\n      messages = [{\n        measurementId: '4101', type: 'sensor_error_event', errCode: errorCode, descZh\n      }]\n      break\n    case '10':\n      let statusValue = dataValue.substring(0, 2)\n      let { status, type } = loraWANV2BitDataFormat(statusValue)\n      let sensecapId = dataValue.substring(2)\n      messages = [{\n        status: status, channelType: type, sensorEui: sensecapId\n      }]\n      break\n    case '20':\n      let initmeasurementId = 4175\n      let sensor = []\n      for (let i = 0; i < dataValue.length; i += 4) {\n        let modelId = loraWANV2DataFormat(dataValue.substring(i, i + 2))\n        let detectionType = loraWANV2DataFormat(dataValue.substring(i + 2, i + 4))\n        let aiHeadValues = `${modelId}.${detectionType}`\n        sensor.push({\n          measurementValue: aiHeadValues, measurementId: initmeasurementId\n        })\n        initmeasurementId++\n      }\n      messages = sensor\n      break\n    case '21':\n      // Vision AI:\n      // AI \u8bc6\u522b\u8f93\u51fa\u5e27\n      let tailValueArray = []\n      let initTailmeasurementId = 4180\n      for (let i = 0; i < dataValue.length; i += 4) {\n        let modelId = loraWANV2DataFormat(dataValue.substring(i, i + 2))\n        let detectionType = loraWANV2DataFormat(dataValue.substring(i + 2, i + 4))\n        let aiTailValues = `${modelId}.${detectionType}`\n        tailValueArray.push({\n          measurementValue: aiTailValues, measurementId: initTailmeasurementId, type: `AI Detection ${i}`\n        })\n        initTailmeasurementId++\n      }\n      messages = tailValueArray\n      break\n    case '30':\n    case '31':\n      // \u9996\u5e27\u6216\u8005\u9996\u5e27\u8f93\u51fa\u5e27\n      let channelInfoOne = loraWANV2ChannelBitFormat(dataValue.substring(0, 2))\n      let dataOne = {\n        measurementValue: loraWANV2DataFormat(dataValue.substring(4, 12), 1000),\n        measurementId: parseInt(channelInfoOne.one),\n        type: 'Measurement'\n      }\n      let dataTwo = {\n        measurementValue: loraWANV2DataFormat(dataValue.substring(12, 20), 1000),\n        measurementId: parseInt(channelInfoOne.two),\n        type: 'Measurement'\n      }\n      let cacheArrayInfo = []\n      if (parseInt(channelInfoOne.one)) {\n        cacheArrayInfo.push(dataOne)\n      }\n      if (parseInt(channelInfoOne.two)) {\n        cacheArrayInfo.push(dataTwo)\n      }\n      cacheArrayInfo.forEach(item => {\n        messages.push(item)\n      })\n      break\n    case '32':\n      let channelInfoTwo = loraWANV2ChannelBitFormat(dataValue.substring(0, 2))\n      let dataThree = {\n        measurementValue: loraWANV2DataFormat(dataValue.substring(2, 10), 1000),\n        measurementId: parseInt(channelInfoTwo.one),\n        type: 'Measurement'\n      }\n      let dataFour = {\n        measurementValue: loraWANV2DataFormat(dataValue.substring(10, 18), 1000),\n        measurementId: parseInt(channelInfoTwo.two),\n        type: 'Measurement'\n      }\n      if (parseInt(channelInfoTwo.one)) {\n        messages.push(dataThree)\n      }\n      if (parseInt(channelInfoTwo.two)) {\n        messages.push(dataFour)\n      }\n      break\n    case '33':\n      let channelInfoThree = loraWANV2ChannelBitFormat(dataValue.substring(0, 2))\n      let dataFive = {\n        measurementValue: loraWANV2DataFormat(dataValue.substring(4, 12), 1000),\n        measurementId: parseInt(channelInfoThree.one),\n        type: 'Measurement'\n      }\n      let dataSix = {\n        measurementValue: loraWANV2DataFormat(dataValue.substring(12, 20), 1000),\n        measurementId: parseInt(channelInfoThree.two),\n        type: 'Measurement'\n      }\n      if (parseInt(channelInfoThree.one)) {\n        messages.push(dataFive)\n      }\n      if (parseInt(channelInfoThree.two)) {\n        messages.push(dataSix)\n      }\n\n      break\n    case '34':\n      let model = loraWANV2DataFormat(dataValue.substring(0, 2))\n      let GPIOInput = loraWANV2DataFormat(dataValue.substring(2, 4))\n      let simulationModel = loraWANV2DataFormat(dataValue.substring(4, 6))\n      let simulationInterface = loraWANV2DataFormat(dataValue.substring(6, 8))\n      messages = [{\n         'dataloggerProtocol': model, 'dataloggerGPIOInput': GPIOInput, 'dataloggerAnalogType': simulationModel, 'dataloggerAnalogInterface': simulationInterface\n      }]\n      break\n    case '35':\n    case '36':\n      let channelTDOne = loraWANV2ChannelBitFormat(dataValue.substring(0, 2))\n      let channelSortTDOne = 3920 + (parseInt(channelTDOne.one) - 1) * 2\n      let channelSortTDTWO = 3921 + (parseInt(channelTDOne.one) - 1) * 2\n      messages = [{\n        [channelSortTDOne]: loraWANV2DataFormat(dataValue.substring(2, 10), 1000),\n        [channelSortTDTWO]: loraWANV2DataFormat(dataValue.substring(10, 18), 1000)\n      }]\n      break\n    case '37':\n      let channelTDInfoTwo = loraWANV2ChannelBitFormat(dataValue.substring(0, 2))\n      let channelSortOne = 3920 + (parseInt(channelTDInfoTwo.one) - 1) * 2\n      let channelSortTWO = 3921 + (parseInt(channelTDInfoTwo.one) - 1) * 2\n      messages = [{\n        [channelSortOne]: loraWANV2DataFormat(dataValue.substring(2, 10), 1000),\n        [channelSortTWO]: loraWANV2DataFormat(dataValue.substring(10, 18), 1000)\n      }]\n      break\n    case '38':\n      let channelTDInfoThree = loraWANV2ChannelBitFormat(dataValue.substring(0, 2))\n      let channelSortThreeOne = 3920 + (parseInt(channelTDInfoThree.one) - 1) * 2\n      let channelSortThreeTWO = 3921 + (parseInt(channelTDInfoThree.one) - 1) * 2\n      messages = [{\n        [channelSortThreeOne]: loraWANV2DataFormat(dataValue.substring(2, 10), 1000),\n        [channelSortThreeTWO]: loraWANV2DataFormat(dataValue.substring(10, 18), 1000)\n      }]\n      break\n    case '39':\n      let electricityWhetherTD = dataValue.substring(0, 2)\n      let hwvTD = dataValue.substring(2, 6)\n      let bdvTD = dataValue.substring(6, 10)\n      let sensorAcquisitionIntervalTD = dataValue.substring(10, 14)\n      let gpsAcquisitionIntervalTD = dataValue.substring(14, 18)\n      messages = [{\n        'Battery(%)': loraWANV2DataFormat(electricityWhetherTD),\n        'Hardware Version': `${loraWANV2DataFormat(hwvTD.substring(0, 2))}.${loraWANV2DataFormat(hwvTD.substring(2, 4))}`,\n        'Firmware Version': `${loraWANV2DataFormat(bdvTD.substring(0, 2))}.${loraWANV2DataFormat(bdvTD.substring(2, 4))}`,\n        'measureInterval': parseInt(loraWANV2DataFormat(sensorAcquisitionIntervalTD)) * 60,\n        'thresholdMeasureInterval': parseInt(loraWANV2DataFormat(gpsAcquisitionIntervalTD))\n      }]\n      break\n    case '40':\n    case '41':\n      let lightIntensity = dataValue.substring(0, 4)\n      let loudness = dataValue.substring(4, 8)\n      // X\n      let accelerateX = dataValue.substring(8, 12)\n      // Y\n      let accelerateY = dataValue.substring(12, 16)\n      // Z\n      let accelerateZ = dataValue.substring(16, 20)\n      messages = [{\n        measurementValue: loraWANV2DataFormat(lightIntensity), measurementId: '4193', type: 'Light Intensity'\n      }, {\n        measurementValue: loraWANV2DataFormat(loudness), measurementId: '4192', type: 'Sound Intensity'\n      }, {\n\n        measurementValue: loraWANV2DataFormat(accelerateX, 100), measurementId: '4150', type: 'AccelerometerX'\n      }, {\n\n        measurementValue: loraWANV2DataFormat(accelerateY, 100), measurementId: '4151', type: 'AccelerometerY'\n      }, {\n\n        measurementValue: loraWANV2DataFormat(accelerateZ, 100), measurementId: '4152', type: 'AccelerometerZ'\n      }]\n      break\n    case '42':\n      let airTemperature = dataValue.substring(0, 4)\n      let AirHumidity = dataValue.substring(4, 8)\n      let tVOC = dataValue.substring(8, 12)\n      let CO2eq = dataValue.substring(12, 16)\n      let soilMoisture = dataValue.substring(16, 20)\n      messages = [{\n        measurementValue: loraWANV2DataFormat(airTemperature, 100), measurementId: '4097', type: 'Air Temperature'\n      }, {\n        measurementValue: loraWANV2DataFormat(AirHumidity, 100), measurementId: '4098', type: 'Air Humidity'\n      }, {\n        measurementValue: loraWANV2DataFormat(tVOC), measurementId: '4195', type: 'Total Volatile Organic Compounds'\n      }, {\n        measurementValue: loraWANV2DataFormat(CO2eq), measurementId: '4100', type: 'CO2'\n      }, {\n        measurementValue: loraWANV2DataFormat(soilMoisture), measurementId: '4196', type: 'Soil moisture intensity'\n      }]\n      break\n    case '43':\n    case '44':\n      let headerDevKitValueArray = []\n      let initDevkitmeasurementId = 4175\n      for (let i = 0; i < dataValue.length; i += 4) {\n        let modelId = loraWANV2DataFormat(dataValue.substring(i, i + 2))\n        let detectionType = loraWANV2DataFormat(dataValue.substring(i + 2, i + 4))\n        let aiHeadValues = `${modelId}.${detectionType}`\n        headerDevKitValueArray.push({\n          measurementValue: aiHeadValues, measurementId: initDevkitmeasurementId, type: `AI Detection ${i}`\n        })\n        initDevkitmeasurementId++\n      }\n      messages = headerDevKitValueArray\n      break\n    case '45':\n      let initTailDevKitmeasurementId = 4180\n      for (let i = 0; i < dataValue.length; i += 4) {\n        let modelId = loraWANV2DataFormat(dataValue.substring(i, i + 2))\n        let detectionType = loraWANV2DataFormat(dataValue.substring(i + 2, i + 4))\n        let aiTailValues = `${modelId}.${detectionType}`\n        messages.push({\n          measurementValue: aiTailValues, measurementId: initTailDevKitmeasurementId, type: `AI Detection ${i}`\n        })\n        initTailDevKitmeasurementId++\n      }\n      break\n    default:\n      break\n  }\n  return messages\n}\n\n/**\n *\n * data formatting\n * @param str\n * @param divisor\n * @returns {string|number}\n */\nfunction loraWANV2DataFormat (str, divisor = 1) {\n  let strReverse = bigEndianTransform(str)\n  let str2 = toBinary(strReverse)\n  if (str2.substring(0, 1) === '1') {\n    let arr = str2.split('')\n    let reverseArr = arr.map((item) => {\n      if (parseInt(item) === 1) {\n        return 0\n      } else {\n        return 1\n      }\n    })\n    str2 = parseInt(reverseArr.join(''), 2) + 1\n    return '-' + str2 / divisor\n  }\n  return parseInt(str2, 2) / divisor\n}\n\n/**\n * Handling big-endian data formats\n * @param data\n * @returns {*[]}\n */\nfunction bigEndianTransform (data) {\n  let dataArray = []\n  for (let i = 0; i < data.length; i += 2) {\n    dataArray.push(data.substring(i, i + 2))\n  }\n  // array of hex\n  return dataArray\n}\n\n/**\n * Convert to an 8-digit binary number with 0s in front of the number\n * @param arr\n * @returns {string}\n */\nfunction toBinary (arr) {\n  let binaryData = arr.map((item) => {\n    let data = parseInt(item, 16)\n      .toString(2)\n    let dataLength = data.length\n    if (data.length !== 8) {\n      for (let i = 0; i < 8 - dataLength; i++) {\n        data = `0` + data\n      }\n    }\n    return data\n  })\n  let ret = binaryData.toString()\n    .replace(/,/g, '')\n  return ret\n}\n\n/**\n * sensor\n * @param str\n * @returns {{channel: number, type: number, status: number}}\n */\nfunction loraWANV2BitDataFormat (str) {\n  let strReverse = bigEndianTransform(str)\n  let str2 = toBinary(strReverse)\n  let channel = parseInt(str2.substring(0, 4), 2)\n  let status = parseInt(str2.substring(4, 5), 2)\n  let type = parseInt(str2.substring(5), 2)\n  return { channel, status, type }\n}\n\n/**\n * channel info\n * @param str\n * @returns {{channelTwo: number, channelOne: number}}\n */\nfunction loraWANV2ChannelBitFormat (str) {\n  let strReverse = bigEndianTransform(str)\n  let str2 = toBinary(strReverse)\n  let one = parseInt(str2.substring(0, 4), 2)\n  let two = parseInt(str2.substring(4, 8), 2)\n  let resultInfo = {\n    one: one, two: two\n  }\n  return resultInfo\n}\n\n/**\n * data log status bit\n * @param str\n * @returns {{total: number, level: number, isTH: number}}\n */\nfunction loraWANV2DataLogBitFormat (str) {\n  let strReverse = bigEndianTransform(str)\n  let str2 = toBinary(strReverse)\n  let isTH = parseInt(str2.substring(0, 1), 2)\n  let total = parseInt(str2.substring(1, 5), 2)\n  let left = parseInt(str2.substring(5), 2)\n  let resultInfo = {\n    isTH: isTH, total: total, left: left\n  }\n  return resultInfo\n}\n\nfunction bytes2HexString (arrBytes) {\n  var str = ''\n  for (var i = 0; i < arrBytes.length; i++) {\n    var tmp\n    var num = arrBytes[i]\n    if (num < 0) {\n      tmp = (255 + num + 1).toString(16)\n    } else {\n      tmp = num.toString(16)\n    }\n    if (tmp.length === 1) {\n      tmp = '0' + tmp\n    }\n    str += tmp\n  }\n  return str\n}\n"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"sensecap-s2120-8-in-1-weather-sensor"},"SenseCAP S2120 8-in-1 Weather Sensor"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.seeedstudio.com/sensecap-s2120-lorawan-8-in-1-weather-sensor-p-5436.html"},"SenseCAP S2120 8-in-1 LoRaWAN Weather Sensor")," measures air temperature, humidity, wind speed, wind direction, rainfall, light intensity, UV index, and barometric pressure. It enables low maintenance cost for its ultra-low power consumption, reliable performance, built-in Bluetooth, and app service for OTA configuration and remote device management.\xa0It supports multi-scenario applications like backyard,\xa0gardens, smart agriculture, meteorology, smart city, etc."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://media-cdn.seeedstudio.com/media/catalog/product/cache/bb49d3ec4ee05b6f018e93f896b8a25d/f/o/font_5.png",alt:"pir",width:600,height:"auto"})),(0,r.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,r.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/sensecap-s2120-lorawan-8-in-1-weather-sensor-p-5436.html"},(0,r.yg)("strong",null,(0,r.yg)("span",null,(0,r.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f"))))),(0,r.yg)("h4",{id:"decoder-4"},"Decoder"),(0,r.yg)(s.A,{mdxType:"Tabs3"},(0,r.yg)(u.A,{value:"For TTN",label:"For TTN",mdxType:"TabItem3"},(0,r.yg)("details",null,(0,r.yg)("summary",null,"For TTN"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"/**\n * Entry, decoder.js\n */\nfunction decodeUplink (input, port) {\n  // data split\n\n  var bytes = input['bytes']\n  // init\n  bytes = bytes2HexString(bytes)\n    .toLocaleUpperCase()\n\n  let result = {\n    'err': 0, 'payload': bytes, 'valid': true, messages: []\n  }\n  let splitArray = dataSplit(bytes)\n  // data decoder\n  let decoderArray = []\n  for (let i = 0; i < splitArray.length; i++) {\n    let item = splitArray[i]\n    let dataId = item.dataId\n    let dataValue = item.dataValue\n    let messages = dataIdAndDataValueJudge(dataId, dataValue)\n    decoderArray.push(messages)\n  }\n  result.messages = decoderArray\n  return { data: result }\n}\n\n/**\n * data splits\n * @param bytes\n * @returns {*[]}\n */\nfunction dataSplit (bytes) {\n  let frameArray = []\n\n  for (let i = 0; i < bytes.length; i++) {\n    let remainingValue = bytes\n    let dataId = remainingValue.substring(0, 2)\n    let dataValue\n    let dataObj = {}\n    switch (dataId) {\n      case '01' :\n      case '20' :\n      case '21' :\n      case '30' :\n      case '31' :\n      case '33' :\n      case '40' :\n      case '41' :\n      case '42' :\n      case '43' :\n      case '44' :\n      case '45' :\n        dataValue = remainingValue.substring(2, 22)\n        bytes = remainingValue.substring(22)\n        dataObj = {\n          'dataId': dataId, 'dataValue': dataValue\n        }\n        break\n      case '02':\n        dataValue = remainingValue.substring(2, 18)\n        bytes = remainingValue.substring(18)\n        dataObj = {\n          'dataId': '02', 'dataValue': dataValue\n        }\n        break\n      case '03' :\n      case '06':\n        dataValue = remainingValue.substring(2, 4)\n        bytes = remainingValue.substring(4)\n        dataObj = {\n          'dataId': dataId, 'dataValue': dataValue\n        }\n        break\n      case '05' :\n      case '34':\n        dataValue = bytes.substring(2, 10)\n        bytes = remainingValue.substring(10)\n        dataObj = {\n          'dataId': dataId, 'dataValue': dataValue\n        }\n        break\n      case '04':\n      case '10':\n      case '32':\n      case '35':\n      case '36':\n      case '37':\n      case '38':\n      case '39':\n        dataValue = bytes.substring(2, 20)\n        bytes = remainingValue.substring(20)\n        dataObj = {\n          'dataId': dataId, 'dataValue': dataValue\n        }\n        break\n      default:\n        dataValue = '9'\n        break\n    }\n    if (dataValue.length < 2) {\n      break\n    }\n    frameArray.push(dataObj)\n  }\n  return frameArray\n}\n\nfunction dataIdAndDataValueJudge (dataId, dataValue) {\n  let messages = []\n  switch (dataId) {\n    case '01':\n      let temperature = dataValue.substring(0, 4)\n      let humidity = dataValue.substring(4, 6)\n      let illumination = dataValue.substring(6, 14)\n      let uv = dataValue.substring(14, 16)\n      let windSpeed = dataValue.substring(16, 20)\n      messages = [{\n        measurementValue: loraWANV2DataFormat(temperature, 10), measurementId: '4097', type: 'Air Temperature'\n      }, {\n        measurementValue: loraWANV2DataFormat(humidity), measurementId: '4098', type: 'Air Humidity'\n      }, {\n        measurementValue: loraWANV2DataFormat(illumination), measurementId: '4099', type: 'Light Intensity'\n      }, {\n        measurementValue: loraWANV2DataFormat(uv, 10), measurementId: '4190', type: 'UV Index'\n      }, {\n        measurementValue: loraWANV2DataFormat(windSpeed, 10), measurementId: '4105', type: 'Wind Speed'\n      }]\n      break\n    case '02':\n      let windDirection = dataValue.substring(0, 4)\n      let rainfall = dataValue.substring(4, 12)\n      let airPressure = dataValue.substring(12, 16)\n      messages = [{\n        measurementValue: loraWANV2DataFormat(windDirection), measurementId: '4104', type: 'Wind Direction Sensor'\n      }, {\n        measurementValue: loraWANV2DataFormat(rainfall, 1000), measurementId: '4113', type: 'Rain Gauge'\n      }, {\n\n        measurementValue: loraWANV2DataFormat(airPressure, 0.1), measurementId: '4101', type: 'Barometric Pressure'\n      }]\n      break\n    case '03':\n      let Electricity = dataValue\n      messages = [{\n        'Battery(%)': loraWANV2DataFormat(Electricity)\n      }]\n      break\n    case '04':\n      let electricityWhether = dataValue.substring(0, 2)\n      let hwv = dataValue.substring(2, 6)\n      let bdv = dataValue.substring(6, 10)\n      let sensorAcquisitionInterval = dataValue.substring(10, 14)\n      let gpsAcquisitionInterval = dataValue.substring(14, 18)\n      messages = [{\n        'Battery(%)': loraWANV2DataFormat(electricityWhether),\n        'Hardware Version': `${loraWANV2DataFormat(hwv.substring(0, 2))}.${loraWANV2DataFormat(hwv.substring(2, 4))}`,\n        'Firmware Version': `${loraWANV2DataFormat(bdv.substring(0, 2))}.${loraWANV2DataFormat(bdv.substring(2, 4))}`,\n        'measureInterval': parseInt(loraWANV2DataFormat(sensorAcquisitionInterval)) * 60,\n        'gpsInterval': parseInt(loraWANV2DataFormat(gpsAcquisitionInterval)) * 60\n      }]\n      break\n    case '05':\n      let sensorAcquisitionIntervalFive = dataValue.substring(0, 4)\n      let gpsAcquisitionIntervalFive = dataValue.substring(4, 8)\n      messages = [{\n        'measureInterval': parseInt(loraWANV2DataFormat(sensorAcquisitionIntervalFive)) * 60,\n        'gpsInterval': parseInt(loraWANV2DataFormat(gpsAcquisitionIntervalFive)) * 60\n      }]\n      break\n    case '06':\n      let errorCode = dataValue\n      let descZh\n      switch (errorCode) {\n        case '00':\n          descZh = 'CCL_SENSOR_ERROR_NONE'\n          break\n        case '01':\n          descZh = 'CCL_SENSOR_NOT_FOUND'\n          break\n        case '02':\n          descZh = 'CCL_SENSOR_WAKEUP_ERROR'\n          break\n        case '03':\n          descZh = 'CCL_SENSOR_NOT_RESPONSE'\n          break\n        case '04':\n          descZh = 'CCL_SENSOR_DATA_EMPTY'\n          break\n        case '05':\n          descZh = 'CCL_SENSOR_DATA_HEAD_ERROR'\n          break\n        case '06':\n          descZh = 'CCL_SENSOR_DATA_CRC_ERROR'\n          break\n        case '07':\n          descZh = 'CCL_SENSOR_DATA_B1_NO_VALID'\n          break\n        case '08':\n          descZh = 'CCL_SENSOR_DATA_B2_NO_VALID'\n          break\n        case '09':\n          descZh = 'CCL_SENSOR_RANDOM_NOT_MATCH'\n          break\n        case '0A':\n          descZh = 'CCL_SENSOR_PUBKEY_SIGN_VERIFY_FAILED'\n          break\n        case '0B':\n          descZh = 'CCL_SENSOR_DATA_SIGN_VERIFY_FAILED'\n          break\n        case '0C':\n          descZh = 'CCL_SENSOR_DATA_VALUE_HI'\n          break\n        case '0D':\n          descZh = 'CCL_SENSOR_DATA_VALUE_LOW'\n          break\n        case '0E':\n          descZh = 'CCL_SENSOR_DATA_VALUE_MISSED'\n          break\n        case '0F':\n          descZh = 'CCL_SENSOR_ARG_INVAILD'\n          break\n        case '10':\n          descZh = 'CCL_SENSOR_RS485_MASTER_BUSY'\n          break\n        case '11':\n          descZh = 'CCL_SENSOR_RS485_REV_DATA_ERROR'\n          break\n        case '12':\n          descZh = 'CCL_SENSOR_RS485_REG_MISSED'\n          break\n        case '13':\n          descZh = 'CCL_SENSOR_RS485_FUN_EXE_ERROR'\n          break\n        case '14':\n          descZh = 'CCL_SENSOR_RS485_WRITE_STRATEGY_ERROR'\n          break\n        case '15':\n          descZh = 'CCL_SENSOR_CONFIG_ERROR'\n          break\n        case 'FF':\n          descZh = 'CCL_SENSOR_DATA_ERROR_UNKONW'\n          break\n        default:\n          descZh = 'CC_OTHER_FAILED'\n          break\n      }\n      messages = [{\n        measurementId: '4101', type: 'sensor_error_event', errCode: errorCode, descZh\n      }]\n      break\n    case '10':\n      let statusValue = dataValue.substring(0, 2)\n      let { status, type } = loraWANV2BitDataFormat(statusValue)\n      let sensecapId = dataValue.substring(2)\n      messages = [{\n        status: status, channelType: type, sensorEui: sensecapId\n      }]\n      break\n    default:\n      break\n  }\n  return messages\n}\n\n/**\n *\n * data formatting\n * @param str\n * @param divisor\n * @returns {string|number}\n */\nfunction loraWANV2DataFormat (str, divisor = 1) {\n  let strReverse = bigEndianTransform(str)\n  let str2 = toBinary(strReverse)\n  if (str2.substring(0, 1) === '1') {\n    let arr = str2.split('')\n    let reverseArr = arr.map((item) => {\n      if (parseInt(item) === 1) {\n        return 0\n      } else {\n        return 1\n      }\n    })\n    str2 = parseInt(reverseArr.join(''), 2) + 1\n    return '-' + str2 / divisor\n  }\n  return parseInt(str2, 2) / divisor\n}\n\n/**\n * Handling big-endian data formats\n * @param data\n * @returns {*[]}\n */\nfunction bigEndianTransform (data) {\n  let dataArray = []\n  for (let i = 0; i < data.length; i += 2) {\n    dataArray.push(data.substring(i, i + 2))\n  }\n  // array of hex\n  return dataArray\n}\n\n/**\n * Convert to an 8-digit binary number with 0s in front of the number\n * @param arr\n * @returns {string}\n */\nfunction toBinary (arr) {\n  let binaryData = arr.map((item) => {\n    let data = parseInt(item, 16)\n      .toString(2)\n    let dataLength = data.length\n    if (data.length !== 8) {\n      for (let i = 0; i < 8 - dataLength; i++) {\n        data = `0` + data\n      }\n    }\n    return data\n  })\n  let ret = binaryData.toString()\n    .replace(/,/g, '')\n  return ret\n}\n\n/**\n * sensor\n * @param str\n * @returns {{channel: number, type: number, status: number}}\n */\nfunction loraWANV2BitDataFormat (str) {\n  let strReverse = bigEndianTransform(str)\n  let str2 = toBinary(strReverse)\n  let channel = parseInt(str2.substring(0, 4), 2)\n  let status = parseInt(str2.substring(4, 5), 2)\n  let type = parseInt(str2.substring(5), 2)\n  return { channel, status, type }\n}\n\n/**\n * channel info\n * @param str\n * @returns {{channelTwo: number, channelOne: number}}\n */\nfunction loraWANV2ChannelBitFormat (str) {\n  let strReverse = bigEndianTransform(str)\n  let str2 = toBinary(strReverse)\n  let one = parseInt(str2.substring(0, 4), 2)\n  let two = parseInt(str2.substring(4, 8), 2)\n  let resultInfo = {\n    one: one, two: two\n  }\n  return resultInfo\n}\n\n/**\n * data log status bit\n * @param str\n * @returns {{total: number, level: number, isTH: number}}\n */\nfunction loraWANV2DataLogBitFormat (str) {\n  let strReverse = bigEndianTransform(str)\n  let str2 = toBinary(strReverse)\n  let isTH = parseInt(str2.substring(0, 1), 2)\n  let total = parseInt(str2.substring(1, 5), 2)\n  let left = parseInt(str2.substring(5), 2)\n  let resultInfo = {\n    isTH: isTH, total: total, left: left\n  }\n  return resultInfo\n}\n\nfunction bytes2HexString (arrBytes) {\n  var str = ''\n  for (var i = 0; i < arrBytes.length; i++) {\n    var tmp\n    var num = arrBytes[i]\n    if (num < 0) {\n      tmp = (255 + num + 1).toString(16)\n    } else {\n      tmp = num.toString(16)\n    }\n    if (tmp.length === 1) {\n      tmp = '0' + tmp\n    }\n    str += tmp\n  }\n  return str\n}\n")))),(0,r.yg)(u.A,{value:"For Helium",label:"For Helium",mdxType:"TabItem3"},(0,r.yg)("details",null,(0,r.yg)("summary",null,"For Helium"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"/**\n * Entry, decoder.js\n */\nfunction Decoder (bytes, port) {\n    // data split\n  \n    bytes = bytes2HexString(bytes)\n      .toLocaleUpperCase()\n  \n    let result = {\n      'err': 0, 'payload': bytes, 'valid': true, messages: []\n    }\n    let splitArray = dataSplit(bytes)\n    // data decoder\n    let decoderArray = []\n    for (let i = 0; i < splitArray.length; i++) {\n      let item = splitArray[i]\n      let dataId = item.dataId\n      let dataValue = item.dataValue\n      let messages = dataIdAndDataValueJudge(dataId, dataValue)\n      decoderArray.push(messages)\n    }\n    result.messages = decoderArray\n    return { data: result }\n  }\n  \n  /**\n   * data splits\n   * @param bytes\n   * @returns {*[]}\n   */\n  function dataSplit (bytes) {\n    let frameArray = []\n  \n    for (let i = 0; i < bytes.length; i++) {\n      let remainingValue = bytes\n      let dataId = remainingValue.substring(0, 2)\n      let dataValue\n      let dataObj = {}\n      switch (dataId) {\n        case '01' :\n        case '20' :\n        case '21' :\n        case '30' :\n        case '31' :\n        case '33' :\n        case '40' :\n        case '41' :\n        case '42' :\n        case '43' :\n        case '44' :\n        case '45' :\n          dataValue = remainingValue.substring(2, 22)\n          bytes = remainingValue.substring(22)\n          dataObj = {\n            'dataId': dataId, 'dataValue': dataValue\n          }\n          break\n        case '02':\n          dataValue = remainingValue.substring(2, 18)\n          bytes = remainingValue.substring(18)\n          dataObj = {\n            'dataId': '02', 'dataValue': dataValue\n          }\n          break\n        case '03' :\n        case '06':\n          dataValue = remainingValue.substring(2, 4)\n          bytes = remainingValue.substring(4)\n          dataObj = {\n            'dataId': dataId, 'dataValue': dataValue\n          }\n          break\n        case '05' :\n        case '34':\n          dataValue = bytes.substring(2, 10)\n          bytes = remainingValue.substring(10)\n          dataObj = {\n            'dataId': dataId, 'dataValue': dataValue\n          }\n          break\n        case '04':\n        case '10':\n        case '32':\n        case '35':\n        case '36':\n        case '37':\n        case '38':\n        case '39':\n          dataValue = bytes.substring(2, 20)\n          bytes = remainingValue.substring(20)\n          dataObj = {\n            'dataId': dataId, 'dataValue': dataValue\n          }\n          break\n        default:\n          dataValue = '9'\n          break\n      }\n      if (dataValue.length < 2) {\n        break\n      }\n      frameArray.push(dataObj)\n    }\n    return frameArray\n  }\n  \n  function dataIdAndDataValueJudge (dataId, dataValue) {\n    let messages = []\n    switch (dataId) {\n      case '01':\n        let temperature = dataValue.substring(0, 4)\n        let humidity = dataValue.substring(4, 6)\n        let illumination = dataValue.substring(6, 14)\n        let uv = dataValue.substring(14, 16)\n        let windSpeed = dataValue.substring(16, 20)\n        messages = [{\n          measurementValue: loraWANV2DataFormat(temperature, 10), measurementId: '4097', type: 'Air Temperature'\n        }, {\n          measurementValue: loraWANV2DataFormat(humidity), measurementId: '4098', type: 'Air Humidity'\n        }, {\n          measurementValue: loraWANV2DataFormat(illumination), measurementId: '4099', type: 'Light Intensity'\n        }, {\n          measurementValue: loraWANV2DataFormat(uv, 10), measurementId: '4190', type: 'UV Index'\n        }, {\n          measurementValue: loraWANV2DataFormat(windSpeed, 10), measurementId: '4105', type: 'Wind Speed'\n        }]\n        break\n      case '02':\n        let windDirection = dataValue.substring(0, 4)\n        let rainfall = dataValue.substring(4, 12)\n        let airPressure = dataValue.substring(12, 16)\n        messages = [{\n          measurementValue: loraWANV2DataFormat(windDirection), measurementId: '4104', type: 'Wind Direction Sensor'\n        }, {\n          measurementValue: loraWANV2DataFormat(rainfall, 1000), measurementId: '4113', type: 'Rain Gauge'\n        }, {\n  \n          measurementValue: loraWANV2DataFormat(airPressure, 0.1), measurementId: '4101', type: 'Barometric Pressure'\n        }]\n        break\n      case '03':\n        let Electricity = dataValue\n        messages = [{\n          'Battery(%)': loraWANV2DataFormat(Electricity)\n        }]\n        break\n      case '04':\n        let electricityWhether = dataValue.substring(0, 2)\n        let hwv = dataValue.substring(2, 6)\n        let bdv = dataValue.substring(6, 10)\n        let sensorAcquisitionInterval = dataValue.substring(10, 14)\n        let gpsAcquisitionInterval = dataValue.substring(14, 18)\n        messages = [{\n          'Battery(%)': loraWANV2DataFormat(electricityWhether),\n          'Hardware Version': `${loraWANV2DataFormat(hwv.substring(0, 2))}.${loraWANV2DataFormat(hwv.substring(2, 4))}`,\n          'Firmware Version': `${loraWANV2DataFormat(bdv.substring(0, 2))}.${loraWANV2DataFormat(bdv.substring(2, 4))}`,\n          'measureInterval': parseInt(loraWANV2DataFormat(sensorAcquisitionInterval)) * 60,\n          'gpsInterval': parseInt(loraWANV2DataFormat(gpsAcquisitionInterval)) * 60\n        }]\n        break\n      case '05':\n        let sensorAcquisitionIntervalFive = dataValue.substring(0, 4)\n        let gpsAcquisitionIntervalFive = dataValue.substring(4, 8)\n        messages = [{\n          'measureInterval': parseInt(loraWANV2DataFormat(sensorAcquisitionIntervalFive)) * 60,\n          'gpsInterval': parseInt(loraWANV2DataFormat(gpsAcquisitionIntervalFive)) * 60\n        }]\n        break\n      case '06':\n        let errorCode = dataValue\n        let descZh\n        switch (errorCode) {\n          case '00':\n            descZh = 'CCL_SENSOR_ERROR_NONE'\n            break\n          case '01':\n            descZh = 'CCL_SENSOR_NOT_FOUND'\n            break\n          case '02':\n            descZh = 'CCL_SENSOR_WAKEUP_ERROR'\n            break\n          case '03':\n            descZh = 'CCL_SENSOR_NOT_RESPONSE'\n            break\n          case '04':\n            descZh = 'CCL_SENSOR_DATA_EMPTY'\n            break\n          case '05':\n            descZh = 'CCL_SENSOR_DATA_HEAD_ERROR'\n            break\n          case '06':\n            descZh = 'CCL_SENSOR_DATA_CRC_ERROR'\n            break\n          case '07':\n            descZh = 'CCL_SENSOR_DATA_B1_NO_VALID'\n            break\n          case '08':\n            descZh = 'CCL_SENSOR_DATA_B2_NO_VALID'\n            break\n          case '09':\n            descZh = 'CCL_SENSOR_RANDOM_NOT_MATCH'\n            break\n          case '0A':\n            descZh = 'CCL_SENSOR_PUBKEY_SIGN_VERIFY_FAILED'\n            break\n          case '0B':\n            descZh = 'CCL_SENSOR_DATA_SIGN_VERIFY_FAILED'\n            break\n          case '0C':\n            descZh = 'CCL_SENSOR_DATA_VALUE_HI'\n            break\n          case '0D':\n            descZh = 'CCL_SENSOR_DATA_VALUE_LOW'\n            break\n          case '0E':\n            descZh = 'CCL_SENSOR_DATA_VALUE_MISSED'\n            break\n          case '0F':\n            descZh = 'CCL_SENSOR_ARG_INVAILD'\n            break\n          case '10':\n            descZh = 'CCL_SENSOR_RS485_MASTER_BUSY'\n            break\n          case '11':\n            descZh = 'CCL_SENSOR_RS485_REV_DATA_ERROR'\n            break\n          case '12':\n            descZh = 'CCL_SENSOR_RS485_REG_MISSED'\n            break\n          case '13':\n            descZh = 'CCL_SENSOR_RS485_FUN_EXE_ERROR'\n            break\n          case '14':\n            descZh = 'CCL_SENSOR_RS485_WRITE_STRATEGY_ERROR'\n            break\n          case '15':\n            descZh = 'CCL_SENSOR_CONFIG_ERROR'\n            break\n          case 'FF':\n            descZh = 'CCL_SENSOR_DATA_ERROR_UNKONW'\n            break\n          default:\n            descZh = 'CC_OTHER_FAILED'\n            break\n        }\n        messages = [{\n          measurementId: '4101', type: 'sensor_error_event', errCode: errorCode, descZh\n        }]\n        break\n      case '10':\n        let statusValue = dataValue.substring(0, 2)\n        let { status, type } = loraWANV2BitDataFormat(statusValue)\n        let sensecapId = dataValue.substring(2)\n        messages = [{\n          status: status, channelType: type, sensorEui: sensecapId\n        }]\n        break\n      case '20':\n        let initmeasurementId = 4175\n        let sensor = []\n        for (let i = 0; i < dataValue.length; i += 4) {\n          let modelId = loraWANV2DataFormat(dataValue.substring(i, i + 2))\n          let detectionType = loraWANV2DataFormat(dataValue.substring(i + 2, i + 4))\n          let aiHeadValues = `${modelId}.${detectionType}`\n          sensor.push({\n            measurementValue: aiHeadValues, measurementId: initmeasurementId\n          })\n          initmeasurementId++\n        }\n        messages = sensor\n        break\n      case '21':\n        // Vision AI:\n        // AI \u8bc6\u522b\u8f93\u51fa\u5e27\n        let tailValueArray = []\n        let initTailmeasurementId = 4180\n        for (let i = 0; i < dataValue.length; i += 4) {\n          let modelId = loraWANV2DataFormat(dataValue.substring(i, i + 2))\n          let detectionType = loraWANV2DataFormat(dataValue.substring(i + 2, i + 4))\n          let aiTailValues = `${modelId}.${detectionType}`\n          tailValueArray.push({\n            measurementValue: aiTailValues, measurementId: initTailmeasurementId, type: `AI Detection ${i}`\n          })\n          initTailmeasurementId++\n        }\n        messages = tailValueArray\n        break\n      case '30':\n      case '31':\n        // \u9996\u5e27\u6216\u8005\u9996\u5e27\u8f93\u51fa\u5e27\n        let channelInfoOne = loraWANV2ChannelBitFormat(dataValue.substring(0, 2))\n        let dataOne = {\n          measurementValue: loraWANV2DataFormat(dataValue.substring(4, 12), 1000),\n          measurementId: parseInt(channelInfoOne.one),\n          type: 'Measurement'\n        }\n        let dataTwo = {\n          measurementValue: loraWANV2DataFormat(dataValue.substring(12, 20), 1000),\n          measurementId: parseInt(channelInfoOne.two),\n          type: 'Measurement'\n        }\n        let cacheArrayInfo = []\n        if (parseInt(channelInfoOne.one)) {\n          cacheArrayInfo.push(dataOne)\n        }\n        if (parseInt(channelInfoOne.two)) {\n          cacheArrayInfo.push(dataTwo)\n        }\n        cacheArrayInfo.forEach(item => {\n          messages.push(item)\n        })\n        break\n      case '32':\n        let channelInfoTwo = loraWANV2ChannelBitFormat(dataValue.substring(0, 2))\n        let dataThree = {\n          measurementValue: loraWANV2DataFormat(dataValue.substring(2, 10), 1000),\n          measurementId: parseInt(channelInfoTwo.one),\n          type: 'Measurement'\n        }\n        let dataFour = {\n          measurementValue: loraWANV2DataFormat(dataValue.substring(10, 18), 1000),\n          measurementId: parseInt(channelInfoTwo.two),\n          type: 'Measurement'\n        }\n        if (parseInt(channelInfoTwo.one)) {\n          messages.push(dataThree)\n        }\n        if (parseInt(channelInfoTwo.two)) {\n          messages.push(dataFour)\n        }\n        break\n      case '33':\n        let channelInfoThree = loraWANV2ChannelBitFormat(dataValue.substring(0, 2))\n        let dataFive = {\n          measurementValue: loraWANV2DataFormat(dataValue.substring(4, 12), 1000),\n          measurementId: parseInt(channelInfoThree.one),\n          type: 'Measurement'\n        }\n        let dataSix = {\n          measurementValue: loraWANV2DataFormat(dataValue.substring(12, 20), 1000),\n          measurementId: parseInt(channelInfoThree.two),\n          type: 'Measurement'\n        }\n        if (parseInt(channelInfoThree.one)) {\n          messages.push(dataFive)\n        }\n        if (parseInt(channelInfoThree.two)) {\n          messages.push(dataSix)\n        }\n  \n        break\n      case '34':\n        let model = loraWANV2DataFormat(dataValue.substring(0, 2))\n        let GPIOInput = loraWANV2DataFormat(dataValue.substring(2, 4))\n        let simulationModel = loraWANV2DataFormat(dataValue.substring(4, 6))\n        let simulationInterface = loraWANV2DataFormat(dataValue.substring(6, 8))\n        messages = [{\n           'dataloggerProtocol': model, 'dataloggerGPIOInput': GPIOInput, 'dataloggerAnalogType': simulationModel, 'dataloggerAnalogInterface': simulationInterface\n        }]\n        break\n      case '35':\n      case '36':\n        let channelTDOne = loraWANV2ChannelBitFormat(dataValue.substring(0, 2))\n        let channelSortTDOne = 3920 + (parseInt(channelTDOne.one) - 1) * 2\n        let channelSortTDTWO = 3921 + (parseInt(channelTDOne.one) - 1) * 2\n        messages = [{\n          [channelSortTDOne]: loraWANV2DataFormat(dataValue.substring(2, 10), 1000),\n          [channelSortTDTWO]: loraWANV2DataFormat(dataValue.substring(10, 18), 1000)\n        }]\n        break\n      case '37':\n        let channelTDInfoTwo = loraWANV2ChannelBitFormat(dataValue.substring(0, 2))\n        let channelSortOne = 3920 + (parseInt(channelTDInfoTwo.one) - 1) * 2\n        let channelSortTWO = 3921 + (parseInt(channelTDInfoTwo.one) - 1) * 2\n        messages = [{\n          [channelSortOne]: loraWANV2DataFormat(dataValue.substring(2, 10), 1000),\n          [channelSortTWO]: loraWANV2DataFormat(dataValue.substring(10, 18), 1000)\n        }]\n        break\n      case '38':\n        let channelTDInfoThree = loraWANV2ChannelBitFormat(dataValue.substring(0, 2))\n        let channelSortThreeOne = 3920 + (parseInt(channelTDInfoThree.one) - 1) * 2\n        let channelSortThreeTWO = 3921 + (parseInt(channelTDInfoThree.one) - 1) * 2\n        messages = [{\n          [channelSortThreeOne]: loraWANV2DataFormat(dataValue.substring(2, 10), 1000),\n          [channelSortThreeTWO]: loraWANV2DataFormat(dataValue.substring(10, 18), 1000)\n        }]\n        break\n      case '39':\n        let electricityWhetherTD = dataValue.substring(0, 2)\n        let hwvTD = dataValue.substring(2, 6)\n        let bdvTD = dataValue.substring(6, 10)\n        let sensorAcquisitionIntervalTD = dataValue.substring(10, 14)\n        let gpsAcquisitionIntervalTD = dataValue.substring(14, 18)\n        messages = [{\n          'Battery(%)': loraWANV2DataFormat(electricityWhetherTD),\n          'Hardware Version': `${loraWANV2DataFormat(hwvTD.substring(0, 2))}.${loraWANV2DataFormat(hwvTD.substring(2, 4))}`,\n          'Firmware Version': `${loraWANV2DataFormat(bdvTD.substring(0, 2))}.${loraWANV2DataFormat(bdvTD.substring(2, 4))}`,\n          'measureInterval': parseInt(loraWANV2DataFormat(sensorAcquisitionIntervalTD)) * 60,\n          'thresholdMeasureInterval': parseInt(loraWANV2DataFormat(gpsAcquisitionIntervalTD))\n        }]\n        break\n      case '40':\n      case '41':\n        let lightIntensity = dataValue.substring(0, 4)\n        let loudness = dataValue.substring(4, 8)\n        // X\n        let accelerateX = dataValue.substring(8, 12)\n        // Y\n        let accelerateY = dataValue.substring(12, 16)\n        // Z\n        let accelerateZ = dataValue.substring(16, 20)\n        messages = [{\n          measurementValue: loraWANV2DataFormat(lightIntensity), measurementId: '4193', type: 'Light Intensity'\n        }, {\n          measurementValue: loraWANV2DataFormat(loudness), measurementId: '4192', type: 'Sound Intensity'\n        }, {\n  \n          measurementValue: loraWANV2DataFormat(accelerateX, 100), measurementId: '4150', type: 'AccelerometerX'\n        }, {\n  \n          measurementValue: loraWANV2DataFormat(accelerateY, 100), measurementId: '4151', type: 'AccelerometerY'\n        }, {\n  \n          measurementValue: loraWANV2DataFormat(accelerateZ, 100), measurementId: '4152', type: 'AccelerometerZ'\n        }]\n        break\n      case '42':\n        let airTemperature = dataValue.substring(0, 4)\n        let AirHumidity = dataValue.substring(4, 8)\n        let tVOC = dataValue.substring(8, 12)\n        let CO2eq = dataValue.substring(12, 16)\n        let soilMoisture = dataValue.substring(16, 20)\n        messages = [{\n          measurementValue: loraWANV2DataFormat(airTemperature, 100), measurementId: '4097', type: 'Air Temperature'\n        }, {\n          measurementValue: loraWANV2DataFormat(AirHumidity, 100), measurementId: '4098', type: 'Air Humidity'\n        }, {\n          measurementValue: loraWANV2DataFormat(tVOC), measurementId: '4195', type: 'Total Volatile Organic Compounds'\n        }, {\n          measurementValue: loraWANV2DataFormat(CO2eq), measurementId: '4100', type: 'CO2'\n        }, {\n          measurementValue: loraWANV2DataFormat(soilMoisture), measurementId: '4196', type: 'Soil moisture intensity'\n        }]\n        break\n      case '43':\n      case '44':\n        let headerDevKitValueArray = []\n        let initDevkitmeasurementId = 4175\n        for (let i = 0; i < dataValue.length; i += 4) {\n          let modelId = loraWANV2DataFormat(dataValue.substring(i, i + 2))\n          let detectionType = loraWANV2DataFormat(dataValue.substring(i + 2, i + 4))\n          let aiHeadValues = `${modelId}.${detectionType}`\n          headerDevKitValueArray.push({\n            measurementValue: aiHeadValues, measurementId: initDevkitmeasurementId, type: `AI Detection ${i}`\n          })\n          initDevkitmeasurementId++\n        }\n        messages = headerDevKitValueArray\n        break\n      case '45':\n        let initTailDevKitmeasurementId = 4180\n        for (let i = 0; i < dataValue.length; i += 4) {\n          let modelId = loraWANV2DataFormat(dataValue.substring(i, i + 2))\n          let detectionType = loraWANV2DataFormat(dataValue.substring(i + 2, i + 4))\n          let aiTailValues = `${modelId}.${detectionType}`\n          messages.push({\n            measurementValue: aiTailValues, measurementId: initTailDevKitmeasurementId, type: `AI Detection ${i}`\n          })\n          initTailDevKitmeasurementId++\n        }\n        break\n      default:\n        break\n    }\n    return messages\n  }\n  \n  /**\n   *\n   * data formatting\n   * @param str\n   * @param divisor\n   * @returns {string|number}\n   */\n  function loraWANV2DataFormat (str, divisor = 1) {\n    let strReverse = bigEndianTransform(str)\n    let str2 = toBinary(strReverse)\n    if (str2.substring(0, 1) === '1') {\n      let arr = str2.split('')\n      let reverseArr = arr.map((item) => {\n        if (parseInt(item) === 1) {\n          return 0\n        } else {\n          return 1\n        }\n      })\n      str2 = parseInt(reverseArr.join(''), 2) + 1\n      return '-' + str2 / divisor\n    }\n    return parseInt(str2, 2) / divisor\n  }\n  \n  /**\n   * Handling big-endian data formats\n   * @param data\n   * @returns {*[]}\n   */\n  function bigEndianTransform (data) {\n    let dataArray = []\n    for (let i = 0; i < data.length; i += 2) {\n      dataArray.push(data.substring(i, i + 2))\n    }\n    // array of hex\n    return dataArray\n  }\n  \n  /**\n   * Convert to an 8-digit binary number with 0s in front of the number\n   * @param arr\n   * @returns {string}\n   */\n  function toBinary (arr) {\n    let binaryData = arr.map((item) => {\n      let data = parseInt(item, 16)\n        .toString(2)\n      let dataLength = data.length\n      if (data.length !== 8) {\n        for (let i = 0; i < 8 - dataLength; i++) {\n          data = `0` + data\n        }\n      }\n      return data\n    })\n    let ret = binaryData.toString()\n      .replace(/,/g, '')\n    return ret\n  }\n  \n  /**\n   * sensor\n   * @param str\n   * @returns {{channel: number, type: number, status: number}}\n   */\n  function loraWANV2BitDataFormat (str) {\n    let strReverse = bigEndianTransform(str)\n    let str2 = toBinary(strReverse)\n    let channel = parseInt(str2.substring(0, 4), 2)\n    let status = parseInt(str2.substring(4, 5), 2)\n    let type = parseInt(str2.substring(5), 2)\n    return { channel, status, type }\n  }\n  \n  /**\n   * channel info\n   * @param str\n   * @returns {{channelTwo: number, channelOne: number}}\n   */\n  function loraWANV2ChannelBitFormat (str) {\n    let strReverse = bigEndianTransform(str)\n    let str2 = toBinary(strReverse)\n    let one = parseInt(str2.substring(0, 4), 2)\n    let two = parseInt(str2.substring(4, 8), 2)\n    let resultInfo = {\n      one: one, two: two\n    }\n    return resultInfo\n  }\n  \n  /**\n   * data log status bit\n   * @param str\n   * @returns {{total: number, level: number, isTH: number}}\n   */\n  function loraWANV2DataLogBitFormat (str) {\n    let strReverse = bigEndianTransform(str)\n    let str2 = toBinary(strReverse)\n    let isTH = parseInt(str2.substring(0, 1), 2)\n    let total = parseInt(str2.substring(1, 5), 2)\n    let left = parseInt(str2.substring(5), 2)\n    let resultInfo = {\n      isTH: isTH, total: total, left: left\n    }\n    return resultInfo\n  }\n  \n  function bytes2HexString (arrBytes) {\n    var str = ''\n    for (var i = 0; i < arrBytes.length; i++) {\n      var tmp\n      var num = arrBytes[i]\n      if (num < 0) {\n        tmp = (255 + num + 1).toString(16)\n      } else {\n        tmp = num.toString(16)\n      }\n      if (tmp.length === 1) {\n        tmp = '0' + tmp\n      }\n      str += tmp\n    }\n    return str\n  }\n"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"sensecap-a1101---lorawan-vision-ai-sensor"},"SenseCAP A1101 - LoRaWAN Vision AI Sensor"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.seeedstudio.com/SenseCAP-A1101-LoRaWAN-Vision-AI-Sensor-p-5367.html"},"SenseCAP A1101 - LoRaWAN Vision AI Sensor")," is a TinyML Edge AI enabled smart image sensor. It supports a variety of AI models such as image recognition, people counting, target detection, meter recoignition etc. It also supports training models with TensorFlow Lite."),(0,r.yg)("div",{align:"center"},(0,r.yg)("img",{width:600,src:"https://media-cdn.seeedstudio.com/media/catalog/product/cache/bb49d3ec4ee05b6f018e93f896b8a25d/1/0/101990962-a1101-first-new-10.17.jpg"})),(0,r.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,r.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/SenseCAP-A1101-LoRaWAN-Vision-AI-Sensor-p-5367.html"},(0,r.yg)("strong",null,(0,r.yg)("span",null,(0,r.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f"))))),(0,r.yg)("h4",{id:"decoder-5"},"Decoder"),(0,r.yg)(s.A,{mdxType:"Tabs4"},(0,r.yg)(u.A,{value:"For TTN",label:"For TTN",mdxType:"TabItem4"},(0,r.yg)("details",null,(0,r.yg)("summary",null,"For TTN"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'/**\n * SenseCAP & TTN (new v3) Converter\n *\n * @since 3.0\n * @return Object\n *      @param  Boolean     valid       Indicates whether the payload is a valid payload.\n *      @param  String      err         The reason for the payload to be invalid. 0 means valid, minus means invalid.\n *      @param  String      payload     Hexadecimal string, to show the payload.\n *      @param  Array       messages    One or more messages are parsed according to payload.\n *                              type // Enum:\n *                                   //   - "report_telemetry"\n *                                   //   - "upload_battery"\n *                                   //   - "upload_interval"\n *                                   //   - "upload_version"\n *                                   //   - "upload_sensor_id"\n *                                   //   - "report_remove_sensor"\n *                                   //   - "unknown_message"\n *\n *\n *\n *\n *  @sample-1\n *      var sample = Decoder(["00", "00", "00", "01", "01", "00", "01", "00", "07", "00", "64", "00", "3C", "00", "01", "20", "01", "00", "00", "00", "00", "28", "90"], null);\n *      {\n *        valid: true,\n *        err: 0,\n *        payload: \'0000000101000100070064003C00012001000000002890\',\n *        messages: [\n *           { type: \'upload_version\',\n *             hardwareVersion: \'1.0\',\n *             softwareVersion: \'1.1\' },\n *           { type: \'upload_battery\', battery: 100 },\n *           { type: \'upload_interval\', interval: 3600 },\n *           { type: \'report_remove_sensor\', channel: 1 }\n *        ]\n *      }\n * @sample-2\n *      var sample = Decoder(["01", "01", "10", "98", "53", "00", "00", "01", "02", "10", "A8", "7A", "00", "00", "AF", "51"], null);\n *      {\n *        valid: true,\n *        err: 0,\n *        payload: \'01011098530000010210A87A0000AF51\',\n *        messages: [\n *           { type: \'report_telemetry\',\n *             measurementId: 4097,\n *             measurementValue: 21.4 },\n *           { type: \'report_telemetry\',\n *             measurementId: 4098,\n *             measurementValue: 31.4 }\n *        ]\n *      }\n * @sample-3\n *      var sample = Decoder(["01", "01", "00", "01", "01", "00", "01", "01", "02", "00", "6A", "01", "00", "15", "01", "03", "00", "30", "F1", "F7", "2C", "01", "04", "00", "09", "0C", "13", "14", "01", "05", "00", "7F", "4D", "00", "00", "01", "06", "00", "00", "00", "00", "00", "4C", "BE"], null);\n *      {\n *        valid: true,\n *        err: 0,\n *        payload: \'010100010100010102006A01001501030030F1F72C010400090C13140105007F4D0000010600000000004CBE\',\n *        messages: [\n *            { type: \'upload_sensor_id\', sensorId: \'30F1F72C6A010015\', channel: 1 }\n *        ]\n *      }\n */\n\n/**\n * Entry, decoder.js\n */\nfunction decodeUplink (input) {\n    var bytes = input[\'bytes\'];\n    // // init\n    var bytesString = bytes2HexString(bytes)\n        .toLocaleUpperCase();\n    // var bytesString = input\n    var decoded = {\n      // valid\n      valid: true, err: 0, // bytes\n      payload: bytesString, // messages array\n      messages: []\n    }\n  \n    // CRC check\n    if (!crc16Check(bytesString)) {\n      decoded[\'valid\'] = false\n      decoded[\'err\'] = -1 // "crc check fail."\n      return { data: decoded }\n    }\n  \n    // Length Check\n    if ((((bytesString.length / 2) - 2) % 7) !== 0) {\n      decoded[\'valid\'] = false\n      decoded[\'err\'] = -2 // "length check fail."\n      return { data: decoded }\n    }\n  \n    // Cache sensor id\n    var sensorEuiLowBytes\n    var sensorEuiHighBytes\n  \n    // Handle each frame\n    var frameArray = divideBy7Bytes(bytesString)\n    for (var forFrame = 0; forFrame < frameArray.length; forFrame++) {\n      var frame = frameArray[forFrame]\n      // Extract key parameters\n      var channel = strTo10SysNub(frame.substring(0, 2))\n      var dataID = strTo10SysNub(frame.substring(2, 6))\n      var dataValue = frame.substring(6, 14)\n      var realDataValue = isSpecialDataId(dataID) ? ttnDataSpecialFormat(dataID, dataValue) : ttnDataFormat(dataValue)\n  \n      if (checkDataIdIsMeasureUpload(dataID)) {\n        // if telemetry.\n        decoded.messages.push({\n          type: \'report_telemetry\', measurementId: dataID, measurementValue: realDataValue\n        })\n      } else if (isSpecialDataId(dataID) || (dataID === 5) || (dataID === 6)) {\n        // if special order, except "report_sensor_id".\n        switch (dataID) {\n          case 0x00:\n            // node version\n            var versionData = sensorAttrForVersion(realDataValue)\n            decoded.messages.push({\n              type: \'upload_version\', hardwareVersion: versionData.ver_hardware, softwareVersion: versionData.ver_software\n            })\n            break\n          case 1:\n            // sensor version\n            break\n          case 2:\n            // sensor eui, low bytes\n            sensorEuiLowBytes = realDataValue\n            break\n          case 3:\n            // sensor eui, high bytes\n            sensorEuiHighBytes = realDataValue\n            break\n          case 7:\n            // battery power && interval\n            decoded.messages.push({\n              type: \'upload_battery\', battery: realDataValue.power\n            }, {\n              type: \'upload_interval\', interval: parseInt(realDataValue.interval) * 60\n            })\n            break\n          case 9:\n            decoded.messages.push({\n              type: \'model_info\',\n              detectionType: realDataValue.detectionType,\n              modelId: realDataValue.modelId,\n              modelVer: realDataValue.modelVer\n            })\n            break\n          case 0x120:\n            // remove sensor\n            decoded.messages.push({\n              type: \'report_remove_sensor\', channel: 1\n            })\n            break\n          default:\n            break\n        }\n      } else {\n        decoded.messages.push({\n          type: \'unknown_message\', dataID: dataID, dataValue: dataValue\n        })\n      }\n  \n    }\n  \n    // if the complete id received, as "upload_sensor_id"\n    if (sensorEuiHighBytes && sensorEuiLowBytes) {\n      decoded.messages.unshift({\n        type: \'upload_sensor_id\', channel: 1, sensorId: (sensorEuiHighBytes + sensorEuiLowBytes).toUpperCase()\n      })\n    }\n    // return\n    return { data: decoded }\n  }\n  \n  function crc16Check (data) {\n    return true\n  }\n  \n  // util\n  function bytes2HexString (arrBytes) {\n    var str = \'\'\n    for (var i = 0; i < arrBytes.length; i++) {\n      var tmp\n      var num = arrBytes[i]\n      if (num < 0) {\n        tmp = (255 + num + 1).toString(16)\n      } else {\n        tmp = num.toString(16)\n      }\n      if (tmp.length === 1) {\n        tmp = \'0\' + tmp\n      }\n      str += tmp\n    }\n    return str\n  }\n  \n  // util\n  function divideBy7Bytes (str) {\n    var frameArray = []\n    for (var i = 0; i < str.length - 4; i += 14) {\n      var data = str.substring(i, i + 14)\n      frameArray.push(data)\n    }\n    return frameArray\n  }\n  \n  // util\n  function littleEndianTransform (data) {\n    var dataArray = []\n    for (var i = 0; i < data.length; i += 2) {\n      dataArray.push(data.substring(i, i + 2))\n    }\n    dataArray.reverse()\n    return dataArray\n  }\n  \n  // util\n  function strTo10SysNub (str) {\n    var arr = littleEndianTransform(str)\n    return parseInt(arr.toString()\n      .replace(/,/g, \'\'), 16)\n  }\n  \n  // util\n  function checkDataIdIsMeasureUpload (dataId) {\n    return parseInt(dataId) > 4096\n  }\n  \n  // configurable.\n  function isSpecialDataId (dataID) {\n    switch (dataID) {\n      case 0:\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 7:\n      case 9:\n      case 0x120:\n        return true\n      default:\n        return false\n    }\n  }\n  \n  // configurable\n  function ttnDataSpecialFormat (dataId, str) {\n    var strReverse = littleEndianTransform(str)\n    if (dataId === 2 || dataId === 3) {\n      return strReverse.join(\'\')\n    }\n  \n    // handle unsigned number\n    var str2 = toBinary(strReverse)\n    var dataArray = []\n    switch (dataId) {\n      case 0: // DATA_BOARD_VERSION\n      case 1: // DATA_SENSOR_VERSION\n        // Using point segmentation\n        for (var k = 0; k < str2.length; k += 16) {\n          var tmp146 = str2.substring(k, k + 16)\n          tmp146 = (parseInt(tmp146.substring(0, 8), 2) || 0) + \'.\' + (parseInt(tmp146.substring(8, 16), 2) || 0)\n          dataArray.push(tmp146)\n        }\n        return dataArray.join(\',\')\n      case 4:\n        for (var i = 0; i < str2.length; i += 8) {\n          var item = parseInt(str2.substring(i, i + 8), 2)\n          if (item < 10) {\n            item = \'0\' + item.toString()\n          } else {\n            item = item.toString()\n          }\n          dataArray.push(item)\n        }\n        return dataArray.join(\'\')\n      case 7:\n        // battery && interval\n        return {\n          interval: parseInt(str2.substr(0, 16), 2), power: parseInt(str2.substr(-16, 16), 2)\n        }\n      case 9:\n        let dataValue = {\n          detectionType: parseInt(str2.substring(0, 8), 2),\n          modelId: parseInt(str2.substring(8, 16), 2),\n          modelVer: parseInt(str2.substring(16, 24), 2)\n        }\n        // 01010000\n        return dataValue\n    }\n  }\n  \n  // util\n  function ttnDataFormat (str) {\n    var strReverse = littleEndianTransform(str)\n    var str2 = toBinary(strReverse)\n    if (str2.substring(0, 1) === \'1\') {\n      var arr = str2.split(\'\')\n      var reverseArr = []\n      for (var forArr = 0; forArr < arr.length; forArr++) {\n        var item = arr[forArr]\n        if (parseInt(item) === 1) {\n          reverseArr.push(0)\n        } else {\n          reverseArr.push(1)\n        }\n      }\n      str2 = parseInt(reverseArr.join(\'\'), 2) + 1\n      return parseFloat(\'-\' + str2 / 1000)\n    }\n    return parseInt(str2, 2) / 1000\n  }\n  \n  // util\n  function sensorAttrForVersion (dataValue) {\n    var dataValueSplitArray = dataValue.split(\',\')\n    return {\n      ver_hardware: dataValueSplitArray[0], ver_software: dataValueSplitArray[1]\n    }\n  }\n  \n  // util\n  function toBinary (arr) {\n    var binaryData = []\n    for (var forArr = 0; forArr < arr.length; forArr++) {\n      var item = arr[forArr]\n      var data = parseInt(item, 16)\n        .toString(2)\n      var dataLength = data.length\n      if (data.length !== 8) {\n        for (var i = 0; i < 8 - dataLength; i++) {\n          data = \'0\' + data\n        }\n      }\n      binaryData.push(data)\n    }\n    return binaryData.toString()\n      .replace(/,/g, \'\')\n  }\n  \n  // Samples\n  // var sample = Decoder(["00", "00", "00", "01", "01", "00", "01", "00", "07", "00", "64", "00", "3C", "00", "01", "20", "01", "00", "00", "00", "00", "28", "90"], null);\n  // var sample = Decoder(["01", "01", "10", "98", "53", "00", "00", "01", "02", "10", "A8", "7A", "00", "00", "AF", "51"], null);\n  // var sample = Decoder(["01", "01", "00", "01", "01", "00", "01", "01", "02", "00", "6A", "01", "00", "15", "01", "03", "00", "30", "F1", "F7", "2C", "01", "04", "00", "09", "0C", "13", "14", "01", "05", "00", "7F", "4D", "00", "00", "01", "06", "00", "00", "00", "00", "00", "4C", "BE"], null);\n  // console.log(sample);\n')))),(0,r.yg)(u.A,{value:"For Helium",label:"For Helium",mdxType:"TabItem4"},(0,r.yg)("details",null,(0,r.yg)("summary",null,"For Helium"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"/**\n * Entry, decoder.js\n */\nfunction Decoder (bytes, port) {\n    // init\n    var bytesString = bytes2HexString(bytes)\n      .toLocaleUpperCase()\n    // var bytesString = bytes\n    var decoded = {\n        // valid\n        valid: true, err: 0, // bytes\n        payload: bytesString, // messages array\n        messages: []\n    }\n\n    // CRC check\n    if (!crc16Check(bytesString)) {\n        decoded['valid'] = false\n        decoded['err'] = -1 // \"crc check fail.\"\n        return decoded\n    }\n\n    // Length Check\n    if ((((bytesString.length / 2) - 2) % 7) !== 0) {\n        decoded['valid'] = false\n        decoded['err'] = -2 // \"length check fail.\"\n        return decoded\n    }\n\n    // Cache sensor id\n    var sensorEuiLowBytes\n    var sensorEuiHighBytes\n\n    // Handle each frame\n    var frameArray = divideBy7Bytes(bytesString)\n    for (var forFrame = 0; forFrame < frameArray.length; forFrame++) {\n        var frame = frameArray[forFrame]\n        // Extract key parameters\n        var channel = strTo10SysNub(frame.substring(0, 2))\n        var dataID = strTo10SysNub(frame.substring(2, 6))\n        var dataValue = frame.substring(6, 14)\n        var realDataValue = isSpecialDataId(dataID) ? ttnDataSpecialFormat(dataID, dataValue) : ttnDataFormat(dataValue)\n\n        if (checkDataIdIsMeasureUpload(dataID)) {\n            // if telemetry.\n            decoded.messages.push({\n                type: 'report_telemetry', measurementId: dataID, measurementValue: realDataValue\n            })\n        } else if (isSpecialDataId(dataID) || (dataID === 5) || (dataID === 6) || (dataID === 9)) {\n            // if special order, except \"report_sensor_id\".\n            switch (dataID) {\n                case 0x00:\n                    // node version\n                    var versionData = sensorAttrForVersion(realDataValue)\n                    decoded.messages.push({\n                        type: 'upload_version', hardwareVersion: versionData.ver_hardware, softwareVersion: versionData.ver_software\n                    })\n                    break\n                case 1:\n                    // sensor version\n                    break\n                case 2:\n                    // sensor eui, low bytes\n                    sensorEuiLowBytes = realDataValue\n                    break\n                case 3:\n                    // sensor eui, high bytes\n                    sensorEuiHighBytes = realDataValue\n                    break\n                case 7:\n                    // battery power && interval\n                    decoded.messages.push({\n                        type: 'upload_battery', battery: realDataValue.power\n                    }, {\n                        type: 'upload_interval', interval: parseInt(realDataValue.interval) * 60\n                    })\n                    break\n                case 9:\n                    decoded.messages.push({\n                        type: 'model_info',\n                        detectionType: realDataValue.detectionType,\n                        modelId: realDataValue.modelId,\n                        modelVer: realDataValue.modelVer\n                    })\n                    break\n                case 0x120:\n                    // remove sensor\n                    decoded.messages.push({\n                        type: 'report_remove_sensor', channel: 1\n                    })\n                    break\n                default:\n                    break\n            }\n        } else {\n            decoded.messages.push({\n                type: 'unknown_message', dataID: dataID, dataValue: dataValue\n            })\n        }\n\n    }\n\n    // if the complete id received, as \"upload_sensor_id\"\n    if (sensorEuiHighBytes && sensorEuiLowBytes) {\n        decoded.messages.unshift({\n            type: 'upload_sensor_id', channel: 1, sensorId: (sensorEuiHighBytes + sensorEuiLowBytes).toUpperCase()\n        })\n    }\n\n    // return\n    //return decoded;\n    var datacakeFields = []\n    var messages = decoded.messages\n    for (var i = 0; i < messages.length; i++) {\n        var message = messages[i]\n        var id = message.measurementId\n        var type = message.type\n        var value = message.measurementValue\n        switch (type) {\n            case 'upload_battery':\n                datacakeFields.push({\n                    'field': 'BATTERY', 'value': message.battery\n                })\n                break\n            case 'upload_interval':\n                datacakeFields.push({\n                    'field': 'UPLOAD_INTERVAL', 'value': message.interval\n                })\n                break\n            case 'upload_version':\n                datacakeFields.push({\n                    'field': 'HARDWARE_VERSION', 'value': message.hardwareVersion\n                }, {\n                    'field': 'SOFTWARE_VERSION', 'value': message.softwareVersion\n                })\n                break\n            case 'model_info':\n                datacakeFields.push({\n                    'field': 'MODEL_INFO',\n                    'value': { detectionType: message.detectionType, modelId: message.modelId, modelVer: message.modelVer }\n                })\n                break\n        }\n        switch (id) {\n            case 4097:\n                datacakeFields.push({\n                    'field': 'TEMPERATURE', 'value': value\n                })\n                break\n            case 4098:\n                datacakeFields.push({\n                    'field': 'HUMIDITY', 'value': value\n                })\n                break\n            case 4099:\n                datacakeFields.push({\n                    'field': 'LIGHT_INTENSITY', 'value': value\n                })\n                break\n            case 4100:\n                datacakeFields.push({\n                    'field': 'CO2', 'value': value\n                })\n                break\n            case 4101:\n                datacakeFields.push({\n                    'field': 'BAROMETRIC_PRESSURE', 'value': value\n                })\n                break\n            case 4102:\n                datacakeFields.push({\n                    'field': 'SOIL_TEMPERATURE', 'value': value\n                })\n                break\n            case 4103:\n                datacakeFields.push({\n                    'field': 'SOIL_MOISTURE', 'value': value\n                })\n                break\n            case 4104:\n                datacakeFields.push({\n                    'field': 'WIND_DIRECTION', 'value': value\n                })\n                break\n            case 4105:\n                datacakeFields.push({\n                    'field': 'WIND_SPEED', 'value': value\n                })\n                break\n            case 4106:\n                datacakeFields.push({\n                    'field': 'PH', 'value': value\n                })\n                break\n            case 4107:\n                datacakeFields.push({\n                    'field': 'LIGHT_QUANTUM', 'value': value\n                })\n                break\n            case 4108:\n                datacakeFields.push({\n                    'field': 'ELECTRICAL_CONDUCTIVITY', 'value': value\n                })\n                break\n            case 4109:\n                datacakeFields.push({\n                    'field': 'DISSOLVED_OXYGEN', 'value': value\n                })\n                break\n            case 4110:\n                datacakeFields.push({\n                    'field': 'SOIL_VOLUMETRIC_WATER_CONTENT', 'value': value\n                })\n                break\n            case 4111:\n                datacakeFields.push({\n                    'field': 'SOIL_ELECTRICAL_CONDUCTIVITY', 'value': value\n                })\n                break\n            case 4112:\n                datacakeFields.push({\n                    'field': 'SOIL_TEMPERATURE(SOIL_TEMPERATURE, VWC & EC Sensor)', 'value': value\n                })\n                break\n            case 4113:\n                datacakeFields.push({\n                    'field': 'RAINFALL_HOURLY', 'value': value\n                })\n                break\n            case 4115:\n                datacakeFields.push({\n                    'field': 'DISTANCE', 'value': value\n                })\n                break\n            case 4116:\n                datacakeFields.push({\n                    'field': 'WATER_LEAK', 'value': value\n                })\n                break\n            case 4117:\n                datacakeFields.push({\n                    'field': 'LIGUID_LEVEL', 'value': value\n                })\n                break\n            case 4118:\n                datacakeFields.push({\n                    'field': 'NH3', 'value': value\n                })\n                break\n            case 4119:\n                datacakeFields.push({\n                    'field': 'H2S', 'value': value\n                })\n                break\n            case 4120:\n                datacakeFields.push({\n                    'field': 'FLOW_RATE', 'value': value\n                })\n                break\n            case 4121:\n                datacakeFields.push({\n                    'field': 'TOTAL_FLOW', 'value': value\n                })\n                break\n            case 4122:\n                datacakeFields.push({\n                    'field': 'OXYGEN_CONCENTRATION', 'value': value\n                })\n                break\n            case 4123:\n                datacakeFields.push({\n                    'field': 'WATER_ELETRICAL_CONDUCTIVITY', 'value': value\n                })\n                break\n            case 4124:\n                datacakeFields.push({\n                    'field': 'WATER_TEMPERATURE', 'value': value\n                })\n                break\n            case 4125:\n                datacakeFields.push({\n                    'field': 'SOIL_HEAT_FLUX', 'value': value\n                })\n                break\n            case 4126:\n                datacakeFields.push({\n                    'field': 'SUNSHINE_DURATION', 'value': value\n                })\n                break\n            case 4127:\n                datacakeFields.push({\n                    'field': 'TOTAL_SOLAR_RADIATION', 'value': value\n                })\n                break\n            case 4128:\n                datacakeFields.push({\n                    'field': 'WATER_SURFACE_EVAPORATION', 'value': value\n                })\n                break\n            case 4129:\n                datacakeFields.push({\n                    'field': 'PHOTOSYNTHETICALLY_ACTIVE_RADIATION_PAR', 'value': value\n                })\n                break\n            case 4130:\n                datacakeFields.push({\n                    'field': 'ACCELEROMETER', 'value': value\n                })\n                break\n            case 4131:\n                datacakeFields.push({\n                    'field': 'VOLUME', 'value': value\n                })\n                break\n            case 4133:\n                datacakeFields.push({\n                    'field': 'SOIL_TENSION', 'value': value\n                })\n                break\n            case 4134:\n                datacakeFields.push({\n                    'field': 'SALINITY', 'value': value\n                })\n                break\n            case 4135:\n                datacakeFields.push({\n                    'field': 'TDS', 'value': value\n                })\n                break\n            case 4136:\n                datacakeFields.push({\n                    'field': 'LEAF_TEMPERATURE', 'value': value\n                })\n                break\n            case 4137:\n                datacakeFields.push({\n                    'field': 'LEAF_WETNESS', 'value': value\n                })\n                break\n            case 4138:\n                datacakeFields.push({\n                    'field': 'SOIL_MOISTURE_10CM', 'value': value\n                })\n                break\n            case 4139:\n                datacakeFields.push({\n                    'field': 'SOIL_MOISTURE_20CM', 'value': value\n                })\n                break\n            case 4140:\n                datacakeFields.push({\n                    'field': 'SOIL_MOISTURE_30CM', 'value': value\n                })\n                break\n            case 4141:\n                datacakeFields.push({\n                    'field': 'SOIL_MOISTURE_40CM', 'value': value\n                })\n                break\n            case 4142:\n                datacakeFields.push({\n                    'field': 'SOIL_TEMPERATURE_10CM', 'value': value\n                })\n                break\n            case 4143:\n                datacakeFields.push({\n                    'field': 'SOIL_TEMPERATURE_20CM', 'value': value\n                })\n                break\n            case 4144:\n                datacakeFields.push({\n                    'field': 'SOIL_TEMPERATURE_30CM', 'value': value\n                })\n                break\n            case 4145:\n                datacakeFields.push({\n                    'field': 'SOIL_TEMPERATURE_40CM', 'value': value\n                })\n                break\n            case 4146:\n                datacakeFields.push({\n                    'field': 'PM2_5', 'value': value\n                })\n                break\n            case 4147:\n                datacakeFields.push({\n                    'field': 'PM10', 'value': value\n                })\n                break\n            case 4148:\n                datacakeFields.push({\n                    'field': 'NOISE', 'value': value\n                })\n                break\n            case 4150:\n                datacakeFields.push({\n                    'field': 'ACCELEROMETERX', 'value': value\n                })\n                break\n            case 4151:\n                datacakeFields.push({\n                    'field': 'ACCELEROMETERY', 'value': value\n                })\n                break\n            case 4152:\n                datacakeFields.push({\n                    'field': 'ACCELEROMETERZ', 'value': value\n                })\n                break\n            case 4175:\n                datacakeFields.push({\n                    'field': 'AI_DETECTION_NO_01', 'value': value\n                })\n                break\n            case 4176:\n                datacakeFields.push({\n                    'field': 'AI_DETECTION_NO_02', 'value': value\n                })\n                break\n            case 4177:\n                datacakeFields.push({\n                    'field': 'AI_DETECTION_NO_03', 'value': value\n                })\n                break\n            case 4178:\n                datacakeFields.push({\n                    'field': 'AI_DETECTION_NO_04', 'value': value\n                })\n                break\n            case 4179:\n                datacakeFields.push({\n                    'field': 'AI_DETECTION_NO_05', 'value': value\n                })\n                break\n            case 4180:\n                datacakeFields.push({\n                    'field': 'AI_DETECTION_NO_06', 'value': value\n                })\n                break\n            case 4181:\n                datacakeFields.push({\n                    'field': 'AI_DETECTION_NO_07', 'value': value\n                })\n                break\n            case 4182:\n                datacakeFields.push({\n                    'field': 'AI_DETECTION_NO_08', 'value': value\n                })\n                break\n            case 4183:\n                datacakeFields.push({\n                    'field': 'AI_DETECTION_NO_09', 'value': value\n                })\n                break\n            case 5100:\n                datacakeFields.push({\n                    'field': 'SWITCH', 'value': value\n                })\n                break\n            case 9990100:\n                datacakeFields.push({\n                    'field': 'BATTERY', 'value': message.battery\n                })\n                break\n            case 9990200:\n                datacakeFields.push({\n                    'field': 'INTERVAL', 'value': message.interval\n                })\n                break\n            case 9990300:\n                datacakeFields.push({\n                    'field': 'REMOVED', 'value': message.interval\n                })\n                break\n        }\n    }\n    return datacakeFields\n}\n\nfunction crc16Check (data) {\n    var crc16tab = [0x0000, 0x1189, 0x2312, 0x329b, 0x4624, 0x57ad, 0x6536, 0x74bf, 0x8c48, 0x9dc1, 0xaf5a, 0xbed3, 0xca6c, 0xdbe5, 0xe97e, 0xf8f7, 0x1081, 0x0108, 0x3393, 0x221a, 0x56a5, 0x472c, 0x75b7, 0x643e, 0x9cc9, 0x8d40, 0xbfdb, 0xae52, 0xdaed, 0xcb64, 0xf9ff, 0xe876, 0x2102, 0x308b, 0x0210, 0x1399, 0x6726, 0x76af, 0x4434, 0x55bd, 0xad4a, 0xbcc3, 0x8e58, 0x9fd1, 0xeb6e, 0xfae7, 0xc87c, 0xd9f5, 0x3183, 0x200a, 0x1291, 0x0318, 0x77a7, 0x662e, 0x54b5, 0x453c, 0xbdcb, 0xac42, 0x9ed9, 0x8f50, 0xfbef, 0xea66, 0xd8fd, 0xc974, 0x4204, 0x538d, 0x6116, 0x709f, 0x0420, 0x15a9, 0x2732, 0x36bb, 0xce4c, 0xdfc5, 0xed5e, 0xfcd7, 0x8868, 0x99e1, 0xab7a, 0xbaf3, 0x5285, 0x430c, 0x7197, 0x601e, 0x14a1, 0x0528, 0x37b3, 0x263a, 0xdecd, 0xcf44, 0xfddf, 0xec56, 0x98e9, 0x8960, 0xbbfb, 0xaa72, 0x6306, 0x728f, 0x4014, 0x519d, 0x2522, 0x34ab, 0x0630, 0x17b9, 0xef4e, 0xfec7, 0xcc5c, 0xddd5, 0xa96a, 0xb8e3, 0x8a78, 0x9bf1, 0x7387, 0x620e, 0x5095, 0x411c, 0x35a3, 0x242a, 0x16b1, 0x0738, 0xffcf, 0xee46, 0xdcdd, 0xcd54, 0xb9eb, 0xa862, 0x9af9, 0x8b70, 0x8408, 0x9581, 0xa71a, 0xb693, 0xc22c, 0xd3a5, 0xe13e, 0xf0b7, 0x0840, 0x19c9, 0x2b52, 0x3adb, 0x4e64, 0x5fed, 0x6d76, 0x7cff, 0x9489, 0x8500, 0xb79b, 0xa612, 0xd2ad, 0xc324, 0xf1bf, 0xe036, 0x18c1, 0x0948, 0x3bd3, 0x2a5a, 0x5ee5, 0x4f6c, 0x7df7, 0x6c7e, 0xa50a, 0xb483, 0x8618, 0x9791, 0xe32e, 0xf2a7, 0xc03c, 0xd1b5, 0x2942, 0x38cb, 0x0a50, 0x1bd9, 0x6f66, 0x7eef, 0x4c74, 0x5dfd, 0xb58b, 0xa402, 0x9699, 0x8710, 0xf3af, 0xe226, 0xd0bd, 0xc134, 0x39c3, 0x284a, 0x1ad1, 0x0b58, 0x7fe7, 0x6e6e, 0x5cf5, 0x4d7c, 0xc60c, 0xd785, 0xe51e, 0xf497, 0x8028, 0x91a1, 0xa33a, 0xb2b3, 0x4a44, 0x5bcd, 0x6956, 0x78df, 0x0c60, 0x1de9, 0x2f72, 0x3efb, 0xd68d, 0xc704, 0xf59f, 0xe416, 0x90a9, 0x8120, 0xb3bb, 0xa232, 0x5ac5, 0x4b4c, 0x79d7, 0x685e, 0x1ce1, 0x0d68, 0x3ff3, 0x2e7a, 0xe70e, 0xf687, 0xc41c, 0xd595, 0xa12a, 0xb0a3, 0x8238, 0x93b1, 0x6b46, 0x7acf, 0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9, 0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330, 0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78]\n    var result = false\n    var crc = 0\n    var dataArray = []\n    for (var i = 0; i < data.length; i += 2) {\n        dataArray.push(data.substring(i, i + 2))\n    }\n\n    for (var j = 0; j < dataArray.length; j++) {\n        var item = dataArray[j]\n        crc = (crc >> 8) ^ crc16tab[(crc ^ parseInt(item, 16)) & 0xFF]\n    }\n    if (crc === 0) {\n        result = true\n    }\n    return result\n}\n\n// util\nfunction bytes2HexString (arrBytes) {\n    var str = ''\n    for (var i = 0; i < arrBytes.length; i++) {\n        var tmp\n        var num = arrBytes[i]\n        if (num < 0) {\n            tmp = (255 + num + 1).toString(16)\n        } else {\n            tmp = num.toString(16)\n        }\n        if (tmp.length === 1) {\n            tmp = '0' + tmp\n        }\n        str += tmp\n    }\n    return str\n}\n\n// util\nfunction divideBy7Bytes (str) {\n    var frameArray = []\n    for (var i = 0; i < str.length - 4; i += 14) {\n        var data = str.substring(i, i + 14)\n        frameArray.push(data)\n    }\n    return frameArray\n}\n\n// util\nfunction littleEndianTransform (data) {\n    var dataArray = []\n    for (var i = 0; i < data.length; i += 2) {\n        dataArray.push(data.substring(i, i + 2))\n    }\n    dataArray.reverse()\n    return dataArray\n}\n\n// util\nfunction strTo10SysNub (str) {\n    var arr = littleEndianTransform(str)\n    return parseInt(arr.toString()\n      .replace(/,/g, ''), 16)\n}\n\n// util\nfunction checkDataIdIsMeasureUpload (dataId) {\n    return parseInt(dataId) > 4096\n}\n\n// configurable.\nfunction isSpecialDataId (dataID) {\n    switch (dataID) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 7:\n        case 9:\n        case 0x120:\n            return true\n        default:\n            return false\n    }\n}\n\n// configurable\nfunction ttnDataSpecialFormat (dataId, str) {\n    var strReverse = littleEndianTransform(str)\n    if (dataId === 2 || dataId === 3) {\n        return strReverse.join('')\n    }\n\n    // handle unsigned number\n    var str2 = toBinary(strReverse)\n\n    var dataArray = []\n    switch (dataId) {\n        case 0: // DATA_BOARD_VERSION\n        case 1: // DATA_SENSOR_VERSION\n            // Using point segmentation\n            for (var k = 0; k < str2.length; k += 16) {\n                var tmp146 = str2.substring(k, k + 16)\n                tmp146 = (parseInt(tmp146.substring(0, 8), 2) || 0) + '.' + (parseInt(tmp146.substring(8, 16), 2) || 0)\n                dataArray.push(tmp146)\n            }\n            return dataArray.join(',')\n        case 4:\n            for (var i = 0; i < str2.length; i += 8) {\n                var item = parseInt(str2.substring(i, i + 8), 2)\n                if (item < 10) {\n                    item = '0' + item.toString()\n                } else {\n                    item = item.toString()\n                }\n                dataArray.push(item)\n            }\n            return dataArray.join('')\n        case 7:\n            // battery && interval\n            return {\n                interval: parseInt(str2.substr(0, 16), 2), power: parseInt(str2.substr(-16, 16), 2)\n            }\n        case 9:\n            let dataValue = {\n                detectionType: parseInt(str2.substring(0, 8), 2),\n                modelId: parseInt(str2.substring(8, 16), 2),\n                modelVer: parseInt(str2.substring(16, 24), 2)\n            }\n            // 01010000\n            return dataValue\n\n    }\n}\n\n// util\nfunction ttnDataFormat (str) {\n    var strReverse = littleEndianTransform(str)\n    var str2 = toBinary(strReverse)\n    if (str2.substring(0, 1) === '1') {\n        var arr = str2.split('')\n        var reverseArr = []\n        for (var forArr = 0; forArr < arr.length; forArr++) {\n            var item = arr[forArr]\n            if (parseInt(item) === 1) {\n                reverseArr.push(0)\n            } else {\n                reverseArr.push(1)\n            }\n        }\n        str2 = parseInt(reverseArr.join(''), 2) + 1\n        return parseFloat('-' + str2 / 1000)\n    }\n    return parseInt(str2, 2) / 1000\n}\n\n// util\nfunction sensorAttrForVersion (dataValue) {\n    var dataValueSplitArray = dataValue.split(',')\n    return {\n        ver_hardware: dataValueSplitArray[0], ver_software: dataValueSplitArray[1]\n    }\n}\n\n// util\nfunction toBinary (arr) {\n    var binaryData = []\n    for (var forArr = 0; forArr < arr.length; forArr++) {\n        var item = arr[forArr]\n        var data = parseInt(item, 16)\n          .toString(2)\n        var dataLength = data.length\n        if (data.length !== 8) {\n            for (var i = 0; i < 8 - dataLength; i++) {\n                data = '0' + data\n            }\n        }\n        binaryData.push(data)\n    }\n    return binaryData.toString()\n      .replace(/,/g, '')\n}\n"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"how-to-use"},"How to Use"),(0,r.yg)("h5",{id:"preparation"},"Preparation"),(0,r.yg)("p",null,"Before configuring the decoder, please set up your sensors and gateway correctly according to the product manual, and then connect to the LoRaWAN network server you need."),(0,r.yg)("p",null,"We take The Things Stack as an example, please configure the decoder according to the following steps:"),(0,r.yg)("h5",{id:"configure-the-payload-decoder"},"Configure the Payload Decoder"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Navigate to the ",(0,r.yg)("inlineCode",{parentName:"li"},"Payload Formats")," tab of your device."),(0,r.yg)("li",{parentName:"ul"},"Select ",(0,r.yg)("inlineCode",{parentName:"li"},"Custom")," for ",(0,r.yg)("inlineCode",{parentName:"li"},"Payload Format")),(0,r.yg)("li",{parentName:"ul"},"Copy and paste the whole contents of ",(0,r.yg)("inlineCode",{parentName:"li"},"decoder.js")," to the ",(0,r.yg)("inlineCode",{parentName:"li"},"decoder")," textarea."),(0,r.yg)("li",{parentName:"ul"},"Click ",(0,r.yg)("inlineCode",{parentName:"li"},"save payload functions"))),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/decoder-use.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("h5",{id:"check-the-decoded-messages"},"Check the Decoded Messages"),(0,r.yg)("p",null,"You may test the decoding script with a sample payload first. "),(0,r.yg)("p",null,"To do this, copy a raw data packet like ",(0,r.yg)("inlineCode",{parentName:"p"},"01\u200001\u200010\u200098\u200053\u200000\u200000\u200001\u200002\u200010\u2000A8\u20007A\u200000\u200000\u2000AF\u200051")," into the ",(0,r.yg)("inlineCode",{parentName:"p"},"Payload")," text input, and select the ",(0,r.yg)("inlineCode",{parentName:"p"},"FPort")," according to the device manual, then click ",(0,r.yg)("inlineCode",{parentName:"p"},"Test")," button.\nYou will see a successfully parsed JSON structure below."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/test-decoder.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("p",null,"Then let's check out the magic of the script. We navigate to the ",(0,r.yg)("inlineCode",{parentName:"p"},"Live Data")," tab, and you can expand any uploaded message to check the ",(0,r.yg)("inlineCode",{parentName:"p"},"Event Fields")," in the payload. These fields are just populated by the script."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/check-data\n.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("p",null,"If you're subscribing the messages with TTN's MQTT Data API, you will also get parsed JSON payload fields."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'Client mosq-TCSlhYcKaRCn3cIePE received PUBLISH (d0, q0, r0, m0, \'lorawan868/devices/2cf7f12010700041/up\', ... (719 bytes))\nlorawan868/devices/2cf7f12010700041/up {"app_id":"lorawan868","dev_id":"2cf7f12010700041","hardware_serial":"2CF7F12010700041","port":2,"counter":1119,"confirmed":true,"payload_raw":"AQEQYG0AAAECEOj9AACWSA==","payload_fields":{"err":0,"messages":[{"measurementId":4097,"measurementValue":28,"type":"report_telemetry"},{"measurementId":4098,"measurementValue":65,"type":"report_telemetry"}],"payload":"010110606D0000010210E8FD00009648","valid":true},"metadata":{"time":"2020-03-13T09:09:45.834032725Z","frequency":867.3,"modulation":"LORA","data_rate":"SF7BW125","airtime":66816000,"coding_rate":"4/5","gateways":[{"gtw_id":"eui-2cf7f11014300001","timestamp":1779605971,"time":"2020-03-13T09:09:45.672666033Z","channel":4,"rssi":-66,"snr":8.8,"rf_chain":0}]}}\n')),(0,r.yg)("h3",{id:"resource"},"Resource"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://github.com/Seeed-Solution/SenseCAP-Decoder"},"SenseCAP Decoder")))}p.isMDXComponent=!0}}]);