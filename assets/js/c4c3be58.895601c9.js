"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[78492],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>m});var r=t(96540);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function _(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var o=r.createContext({}),l=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):_(_({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(o.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,a=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=l(t),d=s,m=c["".concat(o,".").concat(d)]||c[d]||u[d]||a;return t?r.createElement(m,_(_({ref:n},p),{},{components:t})):r.createElement(m,_({ref:n},p))}));function m(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var a=t.length,_=new Array(a);_[0]=d;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i[c]="string"==typeof e?e:s,_[1]=i;for(var l=2;l<a;l++)_[l]=t[l];return r.createElement.apply(null,_)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},19365:(e,n,t)=>{t.d(n,{A:()=>_});var r=t(96540),s=t(20053);const a={tabItem:"tabItem_Ymn6"};function _(e){let{children:n,hidden:t,className:_}=e;return r.createElement("div",{role:"tabpanel",className:(0,s.A)(a.tabItem,_),hidden:t},n)}},11470:(e,n,t)=>{t.d(n,{A:()=>y});var r=t(58168),s=t(96540),a=t(20053),_=t(23104),i=t(56347),o=t(57485),l=t(31682),p=t(89466);function c(e){return function(e){return s.Children.map(e,(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:s}}=e;return{value:n,label:t,attributes:r,default:s}}))}function u(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??c(t);return function(e){const n=(0,l.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function d(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const r=(0,i.W6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o.aZ)(a),(0,s.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(r.location.search);n.set(a,e),r.replace({...r.location,search:n.toString()})}),[a,r])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,a=u(e),[_,i]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!d({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:a}))),[o,l]=m({queryString:t,groupId:r}),[c,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,a]=(0,p.Dv)(t);return[r,(0,s.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:r}),g=(()=>{const e=o??c;return d({value:e,tabValues:a})?e:null})();(0,s.useLayoutEffect)((()=>{g&&i(g)}),[g]);return{selectedValue:_,selectValue:(0,s.useCallback)((e=>{if(!d({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);i(e),l(e),f(e)}),[l,f,a]),tabValues:a}}var g=t(92303);const E={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:n,block:t,selectedValue:i,selectValue:o,tabValues:l}=e;const p=[],{blockElementScrollPositionUntilNextRender:c}=(0,_.a_)(),u=e=>{const n=e.currentTarget,t=p.indexOf(n),r=l[t].value;r!==i&&(c(n),o(r))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=p.indexOf(e.currentTarget)+1;n=p[t]??p[0];break}case"ArrowLeft":{const t=p.indexOf(e.currentTarget)-1;n=p[t]??p[p.length-1];break}}n?.focus()};return s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},n)},l.map((e=>{let{value:n,label:t,attributes:_}=e;return s.createElement("li",(0,r.A)({role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,key:n,ref:e=>p.push(e),onKeyDown:d,onClick:u},_,{className:(0,a.A)("tabs__item",E.tabItem,_?.className,{"tabs__item--active":i===n})}),t??n)})))}function h(e){let{lazy:n,children:t,selectedValue:r}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===r));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return s.createElement("div",{className:"margin-top--md"},a.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==r}))))}function S(e){const n=f(e);return s.createElement("div",{className:(0,a.A)("tabs-container",E.tabList)},s.createElement(b,(0,r.A)({},e,n)),s.createElement(h,(0,r.A)({},e,n)))}function y(e){const n=(0,g.A)();return s.createElement(S,(0,r.A)({key:String(n)},e))}},71735:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=t(58168),s=(t(96540),t(15680)),a=t(11470),_=t(19365);const i={description:"ChatGPT & DALL\xb7E with Indicator",title:"ChatGPT - DALL\xb7E - SenseCAP Indicator",keywords:["SenseCAP Indicator ChatGPT DALL\xb7E Application Development"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/cn/SenseCAP_Indicator_Application_ChatGPT",sidebar_position:9,last_update:{date:"3/4/2024",author:"DuKaiyin"}},o="SenseCAP Indicator - ChatGPT - DALL\xb7E Application Development",l={unversionedId:"zh-CN/Sensor/SenseCAP/SenseCAP_Indicator/Application/cn-OpenAI",id:"zh-CN/Sensor/SenseCAP/SenseCAP_Indicator/Application/cn-OpenAI",title:"ChatGPT - DALL\xb7E - SenseCAP Indicator",description:"ChatGPT & DALL\xb7E with Indicator",source:"@site/docs/zh-CN/Sensor/SenseCAP/SenseCAP_Indicator/Application/cn-OpenAI.md",sourceDirName:"zh-CN/Sensor/SenseCAP/SenseCAP_Indicator/Application",slug:"/cn/SenseCAP_Indicator_Application_ChatGPT",permalink:"/cn/SenseCAP_Indicator_Application_ChatGPT",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/zh-CN/Sensor/SenseCAP/SenseCAP_Indicator/Application/cn-OpenAI.md",tags:[],version:"current",lastUpdatedBy:"DuKaiyin",lastUpdatedAt:1709510400,formattedLastUpdatedAt:"Mar 4, 2024",sidebarPosition:9,frontMatter:{description:"ChatGPT & DALL\xb7E with Indicator",title:"ChatGPT - DALL\xb7E - SenseCAP Indicator",keywords:["SenseCAP Indicator ChatGPT DALL\xb7E Application Development"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/cn/SenseCAP_Indicator_Application_ChatGPT",sidebar_position:9,last_update:{date:"3/4/2024",author:"DuKaiyin"}}},p={},c=[{value:"\u5148\u51b3\u6761\u4ef6",id:"\u5148\u51b3\u6761\u4ef6",level:2},{value:"\u5165\u95e8",id:"\u5165\u95e8",level:2},{value:"\u529f\u80fd",id:"\u529f\u80fd",level:3},{value:"<strong>ChatGPT\u6d41\u7a0b\u56fe</strong>",id:"chatgpt\u6d41\u7a0b\u56fe",level:4},{value:"<strong>DALL\xb7E\u6d41\u7a0b\u56fe</strong>",id:"dalle\u6d41\u7a0b\u56fe",level:4},{value:"\u793a\u4f8b\u4ee3\u7801",id:"\u793a\u4f8b\u4ee3\u7801",level:2},{value:"Resources",id:"resources",level:2},{value:"\u6280\u672f\u652f\u6301",id:"\u6280\u672f\u652f\u6301",level:2}],u={toc:c},d="wrapper";function m(e){let{components:n,...t}=e;return(0,s.yg)(d,(0,r.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,s.yg)("h1",{id:"sensecap-indicator---chatgpt---dalle-application-development"},"SenseCAP Indicator - ChatGPT - DALL\xb7E Application Development"),(0,s.yg)("iframe",{class:"youtube-video-r",src:"https://www.youtube.com/embed/xUX47UnT7xk",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),(0,s.yg)("div",{class:"button-container"},(0,s.yg)("a",{class:"button-style",href:"https://www.seeedstudio.com/SenseCAP-Indicator-D1-p-5643.html"},"Get One Now \ud83d\uddb1\ufe0f")),(0,s.yg)("p",null,"\u8fd9\u4e2a\u6307\u5357\u5c06\u4e3a\u60a8\u63d0\u4f9b\u5173\u4e8e\u5982\u4f55\u6839\u636e\u63d0\u4f9b\u7684BSP\uff08\u677f\u652f\u6301\u5305\uff09\u5feb\u901f\u6dfb\u52a0\u3001\u5220\u9664\u548c\u4fee\u6539\u7a0b\u5e8f\u7684OpenAI\u6f14\u793a\u7684\u7ec4\u7ec7\u4fe1\u606f"),(0,s.yg)("h2",{id:"\u5148\u51b3\u6761\u4ef6"},"\u5148\u51b3\u6761\u4ef6"),(0,s.yg)("p",null,"-\u4e00\u4e2a ",(0,s.yg)("a",{parentName:"p",href:"https://www.seeedstudio.com/SenseCAP-Indicator-D1-p-5643.html"},"SenseCAP Indicator")),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"\u5728\u60a8\u7684\u8ba1\u7b97\u673a\u4e0a\u5b89\u88c5\u4e86 ",(0,s.yg)("a",{parentName:"li",href:"https://github.com/espressif/esp-idf"},"ESP-IDF")," \u5de5\u5177\u94fe")),(0,s.yg)("p",null,":::\u63d0\u793a\n\u5982\u679c\u60a8\u60f3\u5b66\u4e60\u5982\u4f55\u66f4\u6539\u7528\u6237\u754c\u9762\uff08UI\uff09\uff0c\u60a8\u53ef\u4ee5\u53c2\u8003\u6307\u5357\uff1a",(0,s.yg)("a",{parentName:"p",href:"/SenseCAP_Indicator_How_to_Create_your_own_UI"},"\u5982\u4f55\u521b\u5efa\u81ea\u5df1\u7684UI")),(0,s.yg)("p",null,"\u5982\u679c\u60a8\u8fd8\u6ca1\u6709\u5b89\u88c5ESP-IDF\u5de5\u5177\u94fe\uff0c\u53ef\u4ee5\u6309\u7167\u6307\u5357\u4e2d\u7684\u8bf4\u660e\u64cd\u4f5c\uff1a",(0,s.yg)("a",{parentName:"p",href:"/SenseCAP_Indicator_How_To_Flash_The_Default_Firmware"},"\u5982\u4f55\u5237\u65b0\u9ed8\u8ba4\u56fa\u4ef6"),"\n:::"),(0,s.yg)("h2",{id:"\u5165\u95e8"},"\u5165\u95e8"),(0,s.yg)("div",{class:"img-container"},(0,s.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/SenseCAP_Indicator/GPT_RES_BE_RICH.JPG"}),(0,s.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/SenseCAP_Indicator/DALL_1_CAT.JPG"})),(0,s.yg)("p",null,"\u4e0eOpenAI\u542f\u52a8\u6d41\u7a0b\u56fe\u76f8\u5173\u7684\u4e3b\u8981\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,s.yg)("div",{align:"center"},(0,s.yg)("img",{width:800,src:"https://files.seeedstudio.com/wiki/SenseCAP/SenseCAP_Indicator/Indicator_openai_sys.png"})),(0,s.yg)("h3",{id:"\u529f\u80fd"},"\u529f\u80fd"),(0,s.yg)("p",null,"SenseCAP Indicator x ChatGPT x DALL\xb7E\u5e94\u7528\u662f\u57fa\u4e8eMVC\uff08Model-View-Controller\uff09\u67b6\u6784\u5f00\u53d1\u7684\u3002\u8be5\u9879\u76ee\u7684\u5de5\u4f5c\u6d41\u7a0b\u8868\u660e\u4e86\u5b83\u5bf9MVC\u67b6\u6784\u7684\u4f9d\u8d56\u3002"),(0,s.yg)("p",null,"\u5728\u8fd9\u4e2a\u67b6\u6784\u4e2d\uff0c\u7ec4\u4ef6\u7684\u7ed3\u6784\u5982\u4e0b\uff1a"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"\u89c6\u56fe: \u89c6\u56fe\u5904\u7406\u5404\u79cd\u89e6\u53d1\u4e8b\u4ef6\u7684\u4fe1\u53f7\uff0c\u5e76\u4f7f\u7528LVGL\uff08\u8f7b\u5de7\u591a\u529f\u80fd\u56fe\u5f62\u5e93\uff09\u9a71\u52a8\u663e\u793a\u3002")),(0,s.yg)("p",null,":::\u63d0\u793a\n\u8981\u5feb\u901f\u6784\u5efa\u7528\u6237\u754c\u9762\uff08UI\uff09\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 ",(0,s.yg)("a",{parentName:"p",href:"https://squareline.io/"},"SquareLine Studio"),", \u6211\u4eec\u7684\u9879\u76ee\u4e5f\u4f7f\u7528\u4e86\u8fd9\u4e2a\u5de5\u5177\u3002\u5efa\u8bae\u4f7f\u7528SquareLine Studio\u7248\u672c1.3.0\uff0c\u4ee5\u786e\u4fdd\u5728\u6309\u7167\u672c\u6307\u5357\u64cd\u4f5c\u65f6\u83b7\u5f97\u6d41\u7545\u7684\u4f53\u9a8c\u3002\n:::"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"M\u6a21\u578b\uff1a\u6a21\u578b\u5305\u542b indicator_openai.c \u6587\u4ef6\uff0c\u5176\u4e2d\u5305\u542b indicator_openai_init() \u51fd\u6570\u3002\u5f53\u5728\u6a21\u578b\u5165\u53e3\u6267\u884c\u6b64\u51fd\u6570\u65f6\uff0c\u8be5\u51fd\u6570\u4f1a\u5411OpenAI\u53d1\u9001\u8bf7\u6c42\uff0c\u63a5\u6536\u54cd\u5e94\uff0c\u5e76\u89e3\u6790\u54cd\u5e94\u4ee5\u901a\u8fc7\u89c6\u56fe\u663e\u793a\u5728\u5c4f\u5e55\u4e0a")),(0,s.yg)("p",null,"\u4ee5\u4e0b\u662f\u6a21\u578b\u7684\u4e3b\u8981\u529f\u80fd\u548c\u5de5\u4f5c\u6d41\u7a0b( \u4e00\u65e6",(0,s.yg)("a",{parentName:"p",href:"/Sensor/SenseCAP/SenseCAP_Indicator/Set_An_API_Key"},"API \u5bc6\u94a5")," \u4fdd\u5b58\u540e):"),(0,s.yg)("h4",{id:"chatgpt\u6d41\u7a0b\u56fe"},(0,s.yg)("strong",{parentName:"h4"},"ChatGPT\u6d41\u7a0b\u56fe")),(0,s.yg)("div",{align:"center"},(0,s.yg)("img",{width:800,src:"https://files.seeedstudio.com/wiki/SenseCAP/SenseCAP_Indicator/model_openai.png"})),(0,s.yg)("h4",{id:"dalle\u6d41\u7a0b\u56fe"},(0,s.yg)("strong",{parentName:"h4"},"DALL\xb7E\u6d41\u7a0b\u56fe")),(0,s.yg)("div",{align:"center"},(0,s.yg)("img",{width:800,src:"https://files.seeedstudio.com/wiki/SenseCAP/SenseCAP_Indicator/model_openai_DALLE.png"})),(0,s.yg)("h2",{id:"\u793a\u4f8b\u4ee3\u7801"},"\u793a\u4f8b\u4ee3\u7801"),(0,s.yg)("p",null,"\u4e3a\u4e86\u5229\u7528OpenAI\u670d\u52a1\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u80fd\u591f\u5411OpenAI\u53d1\u9001\u8bf7\u6c42\u3001\u63a5\u6536\u54cd\u5e94\u5e76\u89e3\u6790JSON\u54cd\u5e94\u7684\u529f\u80fd\u3002\u4ee5\u4e0b\u4ee3\u7801\u7247\u6bb5\u8bf4\u660e\u4e86\u5fc5\u8981\u7684\u4ee3\u7801\u7ed3\u6784\uff1a"),(0,s.yg)(a.A,{mdxType:"Tabs"},(0,s.yg)(_.A,{value:"ChatGPT",label:"ChatGPT Code",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-c",metastring:'title="openai.c"',title:'"openai.c"'},"/* HTTPS Request & get Response */\nstatic int chat_request(struct view_data_openai_request *p_req,\n                        struct view_data_openai_response *p_resp);\n\n/* Json Prase */\nstatic int __chat_json_prase(const char *p_str, char *p_answer, char *p_err);\n")),(0,s.yg)("p",null," ",(0,s.yg)("inlineCode",{parentName:"p"},"chat_request(...)")," \u4e2d\u7684 ",(0,s.yg)("inlineCode",{parentName:"p"},"indicator_openai.c")," \u51fd\u6570\u8d1f\u8d23\u5411 OpenAI API \u53d1\u9001\u8bf7\u6c42\u3001\u63a5\u6536\u54cd\u5e94\u5e76\u89e3\u6790 JSON \u54cd\u5e94\u3002\u5b83\u751f\u6210\u4e00\u4e2a\u5c01\u88c5\u4e86\u7528\u6237\u63d0\u4f9b\u6570\u636e\u7684 HTTP \u8bf7\u6c42\uff0c\u5e76\u4f7f\u7528 ",(0,s.yg)("inlineCode",{parentName:"p"},"mbedtls_send_then_recv(...)"),"\u4e0e\u670d\u52a1\u5668\u8fdb\u884c\u901a\u4fe1"),(0,s.yg)("p",null,"\u8981\u5728\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6dfb\u52a0\u63d0\u793a\uff0c\u53ef\u4ee5\u4fee\u6539 ",(0,s.yg)("inlineCode",{parentName:"p"},"data_buf")," \u51fd\u6570\u4e2d\u7684  ",(0,s.yg)("inlineCode",{parentName:"p"},"chat_request(...)"),"  \u53d8\u91cf\uff0c\u5982\u4e0b\u6240\u793a\uff1a"),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"\u6dfb\u52a0\u63d0\u793a\uff1a")),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-c"},'data_len += sprintf(data_buf + data_len, "Your are SenseCAP Indicator, developed by Seeed Studio, has been launched on April 20th, 2023.");\ndata_len += sprintf(data_buf + data_len, "You are a 4-inch touch screen driven by ESP32 and RP2040 dual-MCU,");\ndata_len += sprintf(data_buf + data_len, "and support Wi-Fi/BLE/LoRa communication.");\ndata_len += sprintf(data_buf + data_len, "You are a fully open-source powerful IoT development platform for developers.");\ndata_len += sprintf(data_buf + data_len, "You are on behalf of Seeed Studio to answer requests.");\ndata_len += sprintf(data_buf + data_len, "Each time your answer text should not exceed 100 words.");\ndata_len += sprintf(data_buf + data_len, "My first sentence is [");\ndata_len += sprintf(data_buf + data_len, "%s", p_req->question); // user input\ndata_len += sprintf(data_buf + data_len, "]");\ndata_len += sprintf(data_buf + data_len, "\\"}]}");\n')),(0,s.yg)("p",null,"\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\uff0c\u8c03\u7528  ",(0,s.yg)("inlineCode",{parentName:"p"},"mbedtls_send_then_recv")," \u6765\u6267\u884c\u8bf7\u6c42\u548c\u83b7\u53d6\u65b9\u6cd5\u3002")),(0,s.yg)(_.A,{value:"DALL\xb7E",label:"DALL\xb7E Code",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-c",metastring:'title="openai.c"',title:'"openai.c"'},"/* HTTPS Request & get Response */\nstatic int image_request(struct view_data_openai_request *p_req,\n                     struct view_data_openai_response *p_resp);\n\n/* Json Prase */\nstatic int __image_json_prase(const char *p_str, char *p_url, char *p_err);\n\n/* prase URL to download */\nstatic void url_prase(char *p_url, char *p_host, char *p_path);\n")),(0,s.yg)("blockquote",null,(0,s.yg)("p",{parentName:"blockquote"},"\u539f\u7406\uff1a\u5f53\u8bf7\u6c42\u6210\u529f\u65f6\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2aURL\u5730\u5740\u3002\u901a\u8fc7\u4ece\u8fd9\u4e2aURL\u94fe\u63a5\u4e0b\u8f7d\u5e76\u89e3\u7801\u56fe\u50cf\uff0c\u5c31\u53ef\u4ee5\u663e\u793a\u56fe\u50cf\u3002")),(0,s.yg)("p",null,"\u4e0e ",(0,s.yg)("inlineCode",{parentName:"p"},"ChatGPT Code"),", \u76f8\u540c\uff0c\u5728\u521d\u59cb\u8bf7\u6c42\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u63d0\u793a\u6765\u83b7\u53d6\u56fe\u50cf\u7684URL\u3002\u5728\u83b7\u53d6\u5230URL\u540e\uff0c\u6211\u4eec\u5c06\u5c1d\u8bd5\u4f7f\u7528\u83b7\u53d6\u5230\u7684URL\u5c06\u56fe\u50cf\u4e0b\u8f7d\u5230\u672c\u5730\u7f13\u51b2\u533a"))),(0,s.yg)("hr",null),(0,s.yg)("details",null,(0,s.yg)("summary",null,"ChatGPT & DALL\xb7E \u4ee3\u7801"),(0,s.yg)("p",null,"\u6709\u5173\u8be6\u7ec6\u548c\u6700\u65b0\u7684\u4ee3\u7801\uff0c\u8bf7\u53c2\u9605",(0,s.yg)("a",{parentName:"p",href:"https://github.com/Seeed-Solution/SenseCAP_Indicator_ESP32/tree/main/examples/indicator_openai"},"SenseCAP Indicator OpenAI"),"."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-c"},'#include "indicator_openai.h"\n#include "cJSON.h"\n#include "esp_http_client.h"\n#include "esp_tls.h"\n#include "freertos/semphr.h"\n\n#include "lwip/dns.h"\n#include "lwip/err.h"\n#include "lwip/netdb.h"\n#include "lwip/sockets.h"\n#include "lwip/sys.h"\n\n#include "esp_crt_bundle.h"\n#include "mbedtls/ctr_drbg.h"\n#include "mbedtls/entropy.h"\n#include "mbedtls/error.h"\n#include "mbedtls/esp_debug.h"\n#include "mbedtls/net_sockets.h"\n#include "mbedtls/platform.h"\n#include "mbedtls/ssl.h"\n#include "nvs.h"\n\nstruct indicator_openai\n{\n};\n\nstatic const char *TAG = "openai";\n\nstatic struct view_data_openai_request request;\nstatic struct view_data_openai_response response;\n\nstatic SemaphoreHandle_t __g_gpt_com_sem;\nstatic SemaphoreHandle_t __g_dalle_com_sem;\nstatic bool net_flag = false;\n\nstatic int request_st_update(int progress, const char* msg)\n{\n    struct view_data_openai_request_st  st;\n    st.progress = progress;\n    strcpy(st.state, msg);\n    esp_event_post_to(view_event_handle, VIEW_EVENT_BASE, VIEW_EVENT_OPENAI_REQUEST_ST, &st, sizeof(st), portMAX_DELAY);\n}\n\nstatic int mbedtls_send_then_recv(char *p_server, char *p_port, char *p_tx,\n                                  size_t tx_len, char *p_rx, size_t rx_len,\n                                  int delay_ms, void(*p_read_cb)(uint8_t *p_data, int len))\n{\n    int ret, flags, len;\n    char buf[512];\n\n    mbedtls_entropy_context entropy;\n    mbedtls_ctr_drbg_context ctr_drbg;\n    mbedtls_ssl_context ssl;\n    mbedtls_x509_crt cacert;\n    mbedtls_ssl_config conf;\n    mbedtls_net_context server_fd;\n\n    memset(&entropy,0, sizeof(entropy) );\n    memset(&ctr_drbg,0, sizeof(ctr_drbg) );\n    memset(&ssl,0, sizeof(ssl) );\n    memset(&cacert,0, sizeof(cacert) );\n    memset(&conf,0, sizeof(conf) );\n    memset(&server_fd,0, sizeof(server_fd) );\n\n    mbedtls_ssl_init(&ssl);\n    mbedtls_x509_crt_init(&cacert);\n    mbedtls_ctr_drbg_init(&ctr_drbg);\n    ESP_LOGI(TAG, "Seeding the random number generator");\n    mbedtls_ssl_config_init(&conf);\n    ESP_LOGI(TAG, "Initializing the entropy source...");\n    mbedtls_entropy_init(&entropy);\n    ESP_LOGI(TAG, "Initializing the ctr_drbg...");\n    if ((ret = mbedtls_ctr_drbg_seed(&ctr_drbg, mbedtls_entropy_func, &entropy,\n                                     NULL, 0)) != 0)\n    {\n        ESP_LOGE(TAG, "mbedtls_ctr_drbg_seed returned %d", ret);\n        return -1;\n    }\n\n    ESP_LOGI(TAG, "Attaching the certificate bundle...");\n    ret = esp_crt_bundle_attach(&conf);\n    if (ret < 0)\n    {\n        ESP_LOGE(TAG, "esp_crt_bundle_attach returned -0x%x\\n\\n", -ret);\n        return -1;\n    }\n    ESP_LOGI(TAG, "Setting hostname for TLS session...");\n    if ((ret = mbedtls_ssl_set_hostname(&ssl, p_server)) != 0)\n    {\n        ESP_LOGE(TAG, "mbedtls_ssl_set_hostname returned -0x%x", -ret);\n        return -1;\n    }\n\n    ESP_LOGI(TAG, "Setting up the SSL/TLS structure...");\n    if ((ret = mbedtls_ssl_config_defaults(&conf, MBEDTLS_SSL_IS_CLIENT,\n                                           MBEDTLS_SSL_TRANSPORT_STREAM,\n                                           MBEDTLS_SSL_PRESET_DEFAULT)) != 0)\n    {\n        ESP_LOGE(TAG, "mbedtls_ssl_config_defaults returned %d", ret);\n        goto exit;\n    }\n\n    mbedtls_ssl_conf_authmode(&conf, MBEDTLS_SSL_VERIFY_OPTIONAL);\n    mbedtls_ssl_conf_ca_chain(&conf, &cacert, NULL);\n    mbedtls_ssl_conf_rng(&conf, mbedtls_ctr_drbg_random, &ctr_drbg);\n#ifdef CONFIG_MBEDTLS_DEBUG\n    mbedtls_esp_enable_debug_log(&conf, CONFIG_MBEDTLS_DEBUG_LEVEL);\n#endif\n\n#ifdef CONFIG_MBEDTLS_SSL_PROTO_TLS1_3\n    mbedtls_ssl_conf_min_version(&conf, MBEDTLS_SSL_MAJOR_VERSION_3,\n                                 MBEDTLS_SSL_MINOR_VERSION_4);\n    mbedtls_ssl_conf_max_version(&conf, MBEDTLS_SSL_MAJOR_VERSION_3,\n                                 MBEDTLS_SSL_MINOR_VERSION_4);\n#endif\n\n    if ((ret = mbedtls_ssl_setup(&ssl, &conf)) != 0)\n    {\n        ESP_LOGE(TAG, "mbedtls_ssl_setup returned -0x%x\\n\\n", -ret);\n        goto exit;\n    }\n\n    mbedtls_net_init(&server_fd);\n\n    ESP_LOGI(TAG, "Connecting to %s:%s...", p_server, p_port);\n\n    if ((ret = mbedtls_net_connect(&server_fd, p_server, p_port,\n                                   MBEDTLS_NET_PROTO_TCP)) != 0)\n    {\n        ESP_LOGE(TAG, "mbedtls_net_connect returned -%x", -ret);\n        goto exit;\n    }\n\n    ESP_LOGI(TAG, "Connected.");\n\n    mbedtls_ssl_set_bio(&ssl, &server_fd, mbedtls_net_send, mbedtls_net_recv,\n                        NULL);\n\n    ESP_LOGI(TAG, "Performing the SSL/TLS handshake...");\n\n    while ((ret = mbedtls_ssl_handshake(&ssl)) != 0)\n    {\n        if (ret != MBEDTLS_ERR_SSL_WANT_READ && ret != MBEDTLS_ERR_SSL_WANT_WRITE)\n        {\n            ESP_LOGE(TAG, "mbedtls_ssl_handshake returned -0x%x", -ret);\n            goto exit;\n        }\n    }\n\n    ESP_LOGI(TAG, "Verifying peer X.509 certificate...");\n\n    if ((flags = mbedtls_ssl_get_verify_result(&ssl)) != 0)\n    {\n        /* In real life, we probably want to close connection if ret != 0 */\n        ESP_LOGW(TAG, "Failed to verify peer certificate!");\n        bzero(buf, sizeof(buf));\n        mbedtls_x509_crt_verify_info(buf, sizeof(buf), "  ! ", flags);\n        ESP_LOGW(TAG, "verification info: %s", buf);\n    }\n    else\n    {\n        ESP_LOGI(TAG, "Certificate verified.");\n    }\n\n    ESP_LOGI(TAG, "Cipher suite is %s", mbedtls_ssl_get_ciphersuite(&ssl));\n\n    ESP_LOGI(TAG, "Writing HTTP request\\r\\n%s", p_tx);\n\n    size_t written_bytes = 0;\n    do\n    {\n        ret = mbedtls_ssl_write(&ssl, (const unsigned char *)p_tx + written_bytes,\n                                tx_len - written_bytes);\n\n        if (ret >= 0)\n        {\n            ESP_LOGI(TAG, "%d bytes written", ret);\n            written_bytes += ret;\n        }\n        else if (ret != MBEDTLS_ERR_SSL_WANT_WRITE &&\n                 ret != MBEDTLS_ERR_SSL_WANT_READ)\n        {\n            ESP_LOGE(TAG, "mbedtls_ssl_write returned -0x%x", -ret);\n            goto exit;\n        }\n    } while (written_bytes < tx_len);\n\n    if (delay_ms > 0)\n    {\n        vTaskDelay(delay_ms / portTICK_PERIOD_MS); // wait\n    }\n\n    ESP_LOGI(TAG, "Reading HTTP response..."); // HERE\uff01\uff01\uff01\n\n    size_t recv_len = 0;\n\n    do\n    {\n        ret = mbedtls_ssl_read(&ssl, (unsigned char *)(p_rx + recv_len), rx_len - recv_len);\n        ESP_LOGI(TAG, "mbedtls_ssl_read returned %d", ret);\n        if (ret == MBEDTLS_ERR_SSL_WANT_READ || ret == MBEDTLS_ERR_SSL_WANT_WRITE)\n            continue;\n\n        if (ret == MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY)\n        {\n            ret = 0;\n            break;\n        }\n        if (ret < 0)\n        {\n            ESP_LOGE(TAG, "mbedtls_ssl_read returned -0x%x", -ret);\n            break;\n        }\n        if (ret == 0)\n        {\n            ESP_LOGI(TAG, "connection closed");\n            break;\n        }\n        len = ret;\n\n        // if( recv_len < 512 ) {\n        //     for (int i = 0; (i < len); i++)\n        //     {\n        //         putchar(p_rx[i + recv_len]);\n        //     }\n        // }\n        if( p_read_cb != NULL ) {\n            p_read_cb(NULL, len);\n        }\n        recv_len += len;\n    } while (1);\n\n    ESP_LOGI(TAG, "recv total: %d bytes ", recv_len);\n\n    mbedtls_ssl_close_notify(&ssl);\nexit:\n    mbedtls_ssl_session_reset(&ssl);\n    mbedtls_net_free(&server_fd);\n\n    if (ret != 0)\n    {\n        mbedtls_strerror(ret, buf, 100);\n        ESP_LOGE(TAG, "Last error was: -0x%x - %s", -ret, buf);\n        return -1;\n    }\n\n    return recv_len;\n}\n\n#define WEB_SERVER "api.openai.com"\n#define WEB_PORT "443"\n\nstatic char *p_recv_buf;\nstatic size_t recv_buf_max_len;\n\nstatic char openai_api_key[52];\nstatic bool have_key = false;\n\nstatic int __chat_json_prase(const char *p_str, char *p_answer, char *p_err)\n{\n    int ret = 0;\n\n    cJSON *root = NULL;\n    cJSON *cjson_item = NULL;\n    cJSON *cjson_item1 = NULL;\n    cJSON *cjson_item2 = NULL;\n\n    root = cJSON_Parse(p_str);\n    if (root == NULL)\n    {\n        strcpy(p_err, "Parse json fail");\n        return -1;\n    }\n\n    // {\n    //     "error": {\n    //         "message": "",\n    //         "type": "invalid_request_error",\n    //         "param": null,\n    //         "code": "invalid_api_key"\n    //     }\n    // }\n    cjson_item = cJSON_GetObjectItem(root, "error");\n    if (cjson_item != NULL)\n    {\n        cjson_item1 = cJSON_GetObjectItem(cjson_item, "message");\n        if (cjson_item1 != NULL && cjson_item1->valuestring != NULL && strlen(cjson_item1->valuestring) > 0)\n        {\n            strncpy(p_err, cjson_item1->valuestring, 63);\n        } else {\n            cjson_item1 = cJSON_GetObjectItem(cjson_item, "code");\n            if (cjson_item1 != NULL && cjson_item1->valuestring != NULL)\n            {\n                strncpy(p_err, cjson_item1->valuestring, 63);\n            }\n        }\n        cJSON_Delete(root);\n        return -1;\n    }\n\n    cjson_item = cJSON_GetObjectItem(root, "choices");\n    if (cjson_item != NULL)\n    {\n        cjson_item1 = cJSON_GetObjectItem(cJSON_GetArrayItem(cjson_item, 0), "message");\n\n        if (cjson_item1 != NULL)\n        {\n            cjson_item2 = cJSON_GetObjectItem(cjson_item1, "content");\n\n            if (cjson_item2 != NULL && cjson_item2->valuestring != NULL)\n            {\n                strcpy(p_answer, cjson_item2->valuestring);\n                cJSON_Delete(root);\n                return 0;\n            }\n        }\n    }\n    strcpy(p_err, "Not find answer");\n    return -1;\n}\n\nstatic int chat_request(struct view_data_openai_request *p_req,\n                        struct view_data_openai_response *p_resp)\n{\n    char request_buf[2048];\n    char data_buf[1536];\n\n    int data_len = 0;\n    int ret = 0;\n    int len = 0;\n\n    memset(request_buf, 0, sizeof(request_buf));\n    memset(data_buf, 0, sizeof(data_buf));\n\n    data_len = sprintf(data_buf,\n                       "{\\"model\\":\\"gpt-3.5-turbo\\",\\"temperature\\":0.7, \\"messages\\":[{\\"role\\":"\n                       "\\"user\\",\\"content\\":\\"");\n    data_len += sprintf(data_buf + data_len, "Your are SenseCAP Indicator, developed by Seeed Studio, has been launched on April 20th, 2023.");\n    data_len += sprintf(data_buf + data_len, "You are a 4-inch touch screen driven by ESP32 and RP2040 dual-MCU,");\n    data_len += sprintf(data_buf + data_len, "and support Wi-Fi/BLE/LoRa communication.");\n    data_len += sprintf(data_buf + data_len, "You are a fully open-source powerful IoT development platform for developers.");\n    data_len += sprintf(data_buf + data_len, "You are on behalf of Seeed Studio to answer requests.");\n    data_len += sprintf(data_buf + data_len, "Each time your answer text should not exceed 100 words.");\n    data_len += sprintf(data_buf + data_len, "My first sentence is [");\n    data_len += sprintf(data_buf + data_len, "%s", p_req->question);\n    data_len += sprintf(data_buf + data_len, "]");\n    data_len += sprintf(data_buf + data_len, "\\"}]}");\n\n    len += sprintf(request_buf + len, "POST /v1/chat/completions HTTP/1.0\\r\\n");\n    len += sprintf(request_buf + len, "Host: %s\\r\\n", WEB_SERVER);\n    len += sprintf(request_buf + len, "Connection: Close\\r\\n");\n    len += sprintf(request_buf + len, "Content-Type: application/json\\r\\n");\n    len += sprintf(request_buf + len, "Content-Length: %d\\r\\n", data_len);\n    len += sprintf(request_buf + len, "Authorization: Bearer %s\\r\\n",\n                   openai_api_key);\n    len += sprintf(request_buf + len, "\\r\\n");\n    len += sprintf(request_buf + len, "%s", data_buf);\n\n    memset(p_recv_buf, 0, recv_buf_max_len);\n    ret = mbedtls_send_then_recv(WEB_SERVER, WEB_PORT, request_buf, len,\n                                 p_recv_buf, recv_buf_max_len, 100, NULL);\n    ESP_LOGI(TAG, "mbedtls ret = %d", ret);\n    if (ret < 0)\n    {\n        ESP_LOGE(TAG, "mbedtls request fail");\n        p_resp->ret = 0;\n        strcpy(p_resp->err_msg, "Connect \'api.openai.com\' fail");\n        return -1;\n    }\n    ESP_LOGI(TAG, "Starting using strstr");\n    char *p_json = strstr(p_recv_buf, "\\r\\n\\r\\n");\n    if (p_json == NULL)\n    {\n        ESP_LOGE(TAG, "Response format error");\n        p_resp->ret = 0;\n        strcpy(p_resp->err_msg, "Response format error");\n        return -1;\n    }\n\n    p_json += 4;\n\n    p_resp->p_answer = p_recv_buf + recv_buf_max_len / 2; // use p_recv_buf mem\n\n    ret = __chat_json_prase(p_json, p_resp->p_answer, p_resp->err_msg);\n    if (ret != 0)\n    {\n        p_resp->ret = 0;\n        return -1;\n    }\n    p_resp->ret = 1;\n    return 0;\n}\n\nstatic int __image_json_prase(const char *p_str, char *p_url, char *p_err)\n{\n    int ret = 0;\n\n    cJSON *root = NULL;\n    cJSON *cjson_item = NULL;\n    cJSON *cjson_item1 = NULL;\n    cJSON *cjson_item2 = NULL;\n\n    root = cJSON_Parse(p_str);\n    if (root == NULL)\n    {\n        strcpy(p_err, "Parse json fail");\n        return -1;\n    }\n\n    cjson_item = cJSON_GetObjectItem(root, "error");\n    if (cjson_item != NULL)\n    {\n        cjson_item1 = cJSON_GetObjectItem(cjson_item, "message");\n        if (cjson_item1 != NULL && cjson_item1->valuestring != NULL)\n        {\n            strcpy(p_err, cjson_item1->valuestring);\n        }\n        cJSON_Delete(root);\n        return -1;\n    }\n\n    cjson_item = cJSON_GetObjectItem(root, "data");\n    if (cjson_item != NULL)\n    {\n        cjson_item1 = cJSON_GetObjectItem(cJSON_GetArrayItem(cjson_item, 0), "url");\n\n        if (cjson_item1 != NULL && cjson_item1->valuestring != NULL)\n        {\n            strcpy(p_url, cjson_item1->valuestring);\n            cJSON_Delete(root);\n            return 0;\n        }\n    }\n    strcpy(p_err, "Not find url");\n    return -1;\n}\n\nstatic void url_prase(char *p_url, char *p_host, char *p_path)\n{\n    char *pos1;\n    char *pos2;\n    pos1 = strchr(p_url, \'/\');\n    pos2 = strchr(pos1 + 2, \'/\');\n\n    strncpy(p_host, pos1 + 2, pos2 - (pos1 + 2));\n    strncpy(p_path, pos2, strlen(pos2) + 1);\n}\n\nstatic image_download_progress = 40;\nstatic void image_progress_update_cb(uint8_t *p_data, int len)\n{\n    image_download_progress++;\n    if( image_download_progress >=99) {\n        image_download_progress=99;\n    }\n    if( (image_download_progress%10) == 0) {\n        request_st_update(image_download_progress, "Download image...");\n    }\n}\n\nstatic int image_request(struct view_data_openai_request *p_req,\n                         struct view_data_openai_response *p_resp)\n{\n    char request_buf[1024];\n    char data_buf[1024];\n\n    int data_len = 0;\n    int ret = 0;\n    int len = 0;\n\n    memset(request_buf, 0, sizeof(request_buf));\n    memset(data_buf, 0, sizeof(data_buf));\n\n    if( strlen(request.question) == 0) {\n        strcpy(request.question, "Astronaut riding a horse in space.");\n    }\n\n    data_len =\n    sprintf(data_buf, "{\\"prompt\\":\\"%s\\",\\"n\\":1,\\"size\\":\\"512x512\\"}",\n                p_req->question);\n\n    len += sprintf(request_buf + len, "POST /v1/images/generations HTTP/1.0\\r\\n");\n    len += sprintf(request_buf + len, "Host: %s\\r\\n", WEB_SERVER);\n    len += sprintf(request_buf + len, "Content-Type: application/json\\r\\n");\n    len += sprintf(request_buf + len, "Connection: Close\\r\\n");\n    len += sprintf(request_buf + len, "Content-Length: %d\\r\\n", data_len);\n    len += sprintf(request_buf + len, "Authorization: Bearer %s\\r\\n",\n                   openai_api_key);\n    len += sprintf(request_buf + len, "\\r\\n");\n    len += sprintf(request_buf + len, "%s", data_buf);\n\n    memset(p_recv_buf, 0, recv_buf_max_len);\n\n    image_download_progress = 40;\n    request_st_update( image_download_progress, "Image generation...");\n    ret = mbedtls_send_then_recv(WEB_SERVER, WEB_PORT, request_buf, len,\n                                 p_recv_buf, recv_buf_max_len, 2000, NULL);\n    if (ret < 0)\n    {\n        ESP_LOGE(TAG, "mbedtls request fail");\n        p_resp->ret = 0;\n        strcpy(p_resp->err_msg, "Request fail");\n        return -1;\n    }\n\n    char *p_json = strstr(p_recv_buf, "\\r\\n\\r\\n");\n    if (p_json == NULL)\n    {\n        ESP_LOGE(TAG, "Response format error");\n        p_resp->ret = 0;\n        strcpy(p_resp->err_msg, "Response format error");\n        return -1;\n    }\n\n    p_json += 4;\n\n    memset(data_buf, 0, sizeof(data_buf));\n    ret = __image_json_prase(p_json, data_buf, p_resp->err_msg);\n    if (ret != 0)\n    {\n        p_resp->ret = 0;\n        return -1;\n    }\n\n    // download image\n    ESP_LOGI(TAG, "Download image from (%s)...", data_buf);\n\n    char host[64];\n    char path[512];\n\n    memset(host, 0, sizeof(host));\n    memset(path, 0, sizeof(path));\n    url_prase(data_buf, host, path);\n\n    len = 0;\n    memset(request_buf, 0, sizeof(request_buf));\n    len += sprintf(request_buf + len, "GET %s HTTP/1.0\\r\\n", path);\n    len += sprintf(request_buf + len, "Host: %s\\r\\n", host);\n    len += sprintf(request_buf + len, "Connection: Close\\r\\n");\n    len += sprintf(request_buf + len, "\\r\\n");\n\n    memset(p_recv_buf, 0, recv_buf_max_len);\n    ret = mbedtls_send_then_recv(host, "443", request_buf, len,\n                                 p_recv_buf, recv_buf_max_len, 2000,  image_progress_update_cb);\n    if (ret < 0)\n    {\n        ESP_LOGE(TAG, "Download fail");\n        p_resp->ret = 0;\n        strcpy(p_resp->err_msg, "Download fail");\n        return -1;\n    }\n\n    // find png image len\n    int content_len = 0;\n    char *p_content_len_str = strstr(p_recv_buf, "Content-Length");\n    if( p_content_len_str == NULL ) {\n        ESP_LOGE(TAG, "Content-Length not find");\n        p_resp->ret = 0;\n        strcpy(p_resp->err_msg, "Content-Length not find");\n        return -1;\n    }\n    sscanf(p_content_len_str, "Content-Length: %d", &content_len);\n    ESP_LOGI(TAG, "Content-Length: %d", content_len);\n\n\n    // find png image body\n    char *p_png = strstr(p_recv_buf, "\\r\\n\\r\\n");\n    if (p_json == NULL)\n    {\n        ESP_LOGE(TAG, "Response format error");\n        p_resp->ret = 0;\n        strcpy(p_resp->err_msg, "Response format error");\n        return -1;\n    }\n\n    p_png += 4;\n    p_resp->p_answer = p_png;\n    p_resp->ret = 1;\n    p_resp->len = content_len;\n    return 0;\n}\n\nstatic void __openai_api_key_read(void)\n{\n    esp_err_t ret = 0;\n    int len = sizeof(openai_api_key);\n    ret = indicator_storage_read(OPENAI_API_KEY_STORAGE, (void *)openai_api_key, &len);\n    if (ret == ESP_OK && len == (sizeof(openai_api_key)))\n    {\n        have_key = true;\n        esp_event_post_to(view_event_handle, VIEW_EVENT_BASE, VIEW_EVENT_OPENAI_ST, &have_key, sizeof(have_key), portMAX_DELAY);\n        ESP_LOGI(TAG, "openai_api_key read successful");\n    }\n    else\n    {\n        // err or not find\n        have_key = false;\n        esp_event_post_to(view_event_handle, VIEW_EVENT_BASE, VIEW_EVENT_OPENAI_ST, &have_key, sizeof(have_key), portMAX_DELAY);\n        if (ret == ESP_ERR_NVS_NOT_FOUND)\n        {\n            ESP_LOGI(TAG, "openai_api_key not find");\n        }\n        else\n        {\n            ESP_LOGI(TAG, "openai_api_key read err:%d", ret);\n        }\n    }\n}\n\nstatic int __openai_init()\n{\n    recv_buf_max_len = 1024 * 1024;\n    p_recv_buf = malloc(recv_buf_max_len); // from psram\n    if (p_recv_buf == NULL)\n    {\n        ESP_LOGE(TAG, "malloc %s bytes fail!", recv_buf_max_len);\n    }\n}\n\nstatic void __indicator_openai_task(void *p_arg)\n{\n    int ret = 0;\n    while (1) {\n        if (net_flag) {\n            if (xSemaphoreTake(__g_gpt_com_sem, pdMS_TO_TICKS(100)) == pdTRUE) {\n                ESP_LOGI(TAG, "--\x3e chat request: %s", request.question);\n                memset(&response, 0, sizeof(response));\n                request_st_update(99, "Request...");\n                ret = chat_request(&request, &response);\n                if (ret != 0) {\n                    ESP_LOGE(TAG, "reuest fail: %d, err_msg:%s", response.ret, response.err_msg);\n                    request_st_update(100, "Reuest fail");\n                } else {\n                    ESP_LOGI(TAG, "<-- response:%s", response.p_answer);\n                    request_st_update(100, "Done");\n                }\n                // vTaskDelay(pdMS_TO_TICKS(1000));\n                esp_event_post_to(view_event_handle, VIEW_EVENT_BASE, VIEW_EVENT_CHATGPT_RESPONSE, &response, sizeof(response), portMAX_DELAY);\n            }\n\n            if (xSemaphoreTake(__g_dalle_com_sem, pdMS_TO_TICKS(100)) == pdTRUE)\n            {\n                ESP_LOGI(TAG, "--\x3e dell\xb7e request: %s", request.question);\n                memset(&response, 0, sizeof(response));\n                request_st_update(10, "Request...");\n                ret = image_request(&request, &response);\n                if (ret != 0) {\n                    ESP_LOGE(TAG, "reuest fail: %d, err_msg:%s", response.ret, response.err_msg);\n                    request_st_update(100, "Reuest fail");\n                } else {\n                    // ESP_LOGI(TAG, "<-- response:%s", response.p_answer);\n                    request_st_update(100, "Done");\n                }\n                esp_event_post_to(view_event_handle, VIEW_EVENT_BASE, VIEW_EVENT_DALLE_RESPONSE, &response, sizeof(response), portMAX_DELAY);\n            }\n        }\n        vTaskDelay(pdMS_TO_TICKS(1000));\n    }\n}\n\nstatic void __view_event_handler(void *handler_args, esp_event_base_t base,\n                                 int32_t id, void *event_data)\n{\n    switch (id)\n    {\n        case VIEW_EVENT_WIFI_ST:\n        {\n            ESP_LOGI(TAG, "event: VIEW_EVENT_WIFI_ST");\n            struct view_data_wifi_st *p_st = (struct view_data_wifi_st *)event_data;\n            if (p_st->is_network)\n            {\n                net_flag = true;\n            }\n            else\n            {\n                net_flag = false;\n            }\n            break;\n        }\n        case VIEW_EVENT_CHATGPT_REQUEST:\n        {\n            ESP_LOGI(TAG, "event: VIEW_EVENT_CHATGPT_REQUEST");\n            struct view_data_openai_request *p_req = (struct view_data_openai_request *)event_data;\n            memcpy(&request,p_req, sizeof(request));\n            request_st_update(0, "ready");\n            xSemaphoreGive(__g_gpt_com_sem);\n            break;\n        }\n        case VIEW_EVENT_DALLE_REQUEST:\n        {\n            ESP_LOGI(TAG, "event: VIEW_EVENT_DALLE_REQUEST");\n            struct view_data_openai_request *p_req = (struct view_data_openai_request *)event_data;\n            memcpy(&request,p_req, sizeof(request));\n            request_st_update(0, "ready");\n            xSemaphoreGive(__g_dalle_com_sem);\n            break;\n        }\n        case VIEW_EVENT_OPENAI_API_KEY_READ:\n        {\n            ESP_LOGI(TAG, "event: VIEW_EVENT_OPENAI_API_KEY_READ");\n            __openai_api_key_read();\n            break;\n        }\n        default:\n            break;\n    }\n}\n\nint indicator_openai_init(void)\n{\n    __g_gpt_com_sem = xSemaphoreCreateBinary();\n    __g_dalle_com_sem = xSemaphoreCreateBinary();\n\n    __openai_api_key_read();\n    __openai_init();\n\n    ESP_ERROR_CHECK(esp_event_handler_instance_register_with( view_event_handle,\n                                                            VIEW_EVENT_BASE, VIEW_EVENT_WIFI_ST,\n                                                            __view_event_handler, NULL, NULL));\n    ESP_ERROR_CHECK(esp_event_handler_instance_register_with( view_event_handle,\n                                                            VIEW_EVENT_BASE, VIEW_EVENT_CHATGPT_REQUEST,\n                                                            __view_event_handler, NULL, NULL));\n    ESP_ERROR_CHECK(esp_event_handler_instance_register_with( view_event_handle,\n                                                            VIEW_EVENT_BASE, VIEW_EVENT_DALLE_REQUEST,\n                                                            __view_event_handler, NULL, NULL));\n    ESP_ERROR_CHECK(esp_event_handler_instance_register_with( view_event_handle,\n                                                            VIEW_EVENT_BASE, VIEW_EVENT_OPENAI_API_KEY_READ,\n                                                            __view_event_handler, NULL, NULL));\n    xTaskCreate(&__indicator_openai_task, "__indicator_openai_task", 1024 * 10, NULL, 10, NULL);\n}\n'))),(0,s.yg)("h2",{id:"resources"},"Resources"),(0,s.yg)("ol",null,(0,s.yg)("li",{parentName:"ol"},(0,s.yg)("a",{parentName:"li",href:"/SenseCAP_Indicator_ChatGPT"},"SenseCAP Indicator X ChatGPT")),(0,s.yg)("li",{parentName:"ol"},(0,s.yg)("a",{parentName:"li",href:"/SenseCAP_Indicator_DALL%C2%B7E"},"SenseCAP Indicator X DALL\xb7E")),(0,s.yg)("li",{parentName:"ol"},(0,s.yg)("strong",{parentName:"li"},"Demo SDK"),": SenseCAP Indicator\u7684\u6f14\u793a\u8f6f\u4ef6\u5f00\u53d1\u5de5\u5177\u5305\u53ef\u5728 ",(0,s.yg)("a",{parentName:"li",href:"https://github.com/Seeed-Solution/SenseCAP_Indicator_ESP32"},"GitHub"),"."),(0,s.yg)("li",{parentName:"ol"},(0,s.yg)("strong",{parentName:"li"},"\u7528\u6237\u6307\u5357"),": \u7528\u6237\u6307\u5357\u63d0\u4f9b\u4e86\u6709\u5173SenseCAP Indicator\u677f\u7684\u8f6f\u4ef6\u548c\u786c\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\u60a8\u53ef\u4ee5\u5728 ",(0,s.yg)("a",{parentName:"li",href:"/Sensor/SenseCAP/SenseCAP_Indicator/Get_started_with_SenseCAP_Indicator"},"\u8fd9\u91cc"),".\u9605\u8bfb"),(0,s.yg)("li",{parentName:"ol"},(0,s.yg)("strong",{parentName:"li"},"Chat completions OpenAI Guide"),": \u6307\u5357: \u5982\u679c\u60a8\u662fChat API\u7684\u65b0\u624b\uff0c\u8fd9\u4e2a\u6307\u5357\u5c06\u5e2e\u52a9\u60a8\u4e0a\u624b\u3002\u60a8\u53ef\u4ee5\u5728",(0,s.yg)("a",{parentName:"li",href:"https://platform.openai.com/docs/guides/chat/chat-completions-beta"},"\u8fd9\u91cc"),"\u627e\u5230\u3002"),(0,s.yg)("li",{parentName:"ol"},(0,s.yg)("strong",{parentName:"li"},(0,s.yg)("inlineCode",{parentName:"strong"},"indicator_openai.c")," File"),": \u6587\u4ef6: \u8be5\u6587\u4ef6\u5305\u542b\u4e86 ",(0,s.yg)("inlineCode",{parentName:"li"},"ChatGPT")," \u548c ",(0,s.yg)("inlineCode",{parentName:"li"},"DALL\xb7E")," \u96c6\u6210\u7684\u4e3b\u8981\u529f\u80fd\u3002\u60a8\u53ef\u4ee5\u5728",(0,s.yg)("a",{parentName:"li",href:"https://raw.githubusercontent.com/Seeed-Solution/SenseCAP_Indicator_ESP32/main/examples/indicator_openai/main/model/indicator_openai.c"},"\u8fd9\u91cc"),"\u67e5\u770b\u3002"),(0,s.yg)("li",{parentName:"ol"},(0,s.yg)("strong",{parentName:"li"},"ESP-IDF\u5165\u95e8\u6307\u5357:"),": \u8be5\u6307\u5357\u63d0\u4f9b\u4e86\u914d\u7f6e\u548c\u4f7f\u7528ESP-IDF\u6784\u5efa\u9879\u76ee\u7684\u5b8c\u6574\u6b65\u9aa4\u3002\u60a8\u53ef\u4ee5\u5728",(0,s.yg)("a",{parentName:"li",href:"https://docs.espressif.com/projects/esp-idf/en/latest/get-started/index.html"},"\u8fd9\u91cc"),".\u8bbf\u95ee")),(0,s.yg)("h2",{id:"\u6280\u672f\u652f\u6301"},"\u6280\u672f\u652f\u6301"),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"\u5728\u4f7f\u7528SenseCAP Indicator\u65f6\u9700\u8981\u5e2e\u52a9\u5417\uff1f\u6211\u4eec\u5c06\u63d0\u4f9b\u534f\u52a9\uff01")),(0,s.yg)("p",null,"\u5982\u679c\u60a8\u5728\u6309\u7167\u672c\u6559\u7a0b\u64cd\u4f5c\u65f6\u9047\u5230\u4efb\u4f55\u95ee\u9898\u6216\u6709\u4efb\u4f55\u7591\u95ee\uff0c\u8bf7\u968f\u65f6\u5411\u6211\u4eec\u7684\u6280\u672f\u652f\u6301\u5bfb\u6c42\u5e2e\u52a9\u3002\u6211\u4eec\u968f\u65f6\u4e3a\u60a8\u63d0\u4f9b\u652f\u6301\uff01"),(0,s.yg)("p",null,"\u8bbf\u95ee\u6211\u4eec\u7684 ",(0,s.yg)("a",{parentName:"p",href:"https://discord.com/invite/QqMgVwHT3X"}," Seeed\u5b98\u65b9Discord\u9891\u9053 ")," \u63d0\u95ee\uff0c\u6216\u5728 ",(0,s.yg)("a",{parentName:"p",href:"https://github.com/Seeed-Solution/SenseCAP_Indicator_ESP32/discussions"},"GitHub\u8ba8\u8bba\u533a"),"\u4eab\u60a8\u7684\u9700\u6c42!"))}m.isMDXComponent=!0}}]);