"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[68353],{15680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>h});var i=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=i.createContext({}),p=function(e){var n=i.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return i.createElement(o.Provider,{value:n},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(t),u=r,h=c["".concat(o,".").concat(u)]||c[u]||g[u]||a;return t?i.createElement(h,l(l({ref:n},d),{},{components:t})):i.createElement(h,l({ref:n},d))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=u;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[c]="string"==typeof e?e:r,l[1]=s;for(var p=2;p<a;p++)l[p]=t[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},83866:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>S,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var i=t(58168),r=(t(96540),t(15680));const a={description:"\u672c\u6559\u7a0b\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528XIAO ESP32S3\uff0c\u5f55\u5236\u58f0\u97f3\uff0c\u8bc6\u522b\u58f0\u97f3\uff0c\u7136\u540e\u5411ChatGPT\u63d0\u95ee\u5e76\u83b7\u5f97\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\u7684\u7b54\u6848\u3002",title:"\u57fa\u4e8eXIAO ESP32S3 Sense\u7684\u5fae\u578bChatGPT\u8bed\u97f3\u52a9\u624b",keywords:["xiao esp32s3 Sense","chatGPT","\u8bed\u97f3\u8f6c\u6587\u672c"],image:"https://files.seeedstudio.com/wiki/seeed_logo/logo_2023.png",slug:"/cn/xiao_esp32s3_speech2chatgpt",last_update:{date:"10/31/2023",author:"Xin Ping Li"}},l="\u57fa\u4e8eXIAO ESP32S3\u7684\u5fae\u578bChatGPT\u8bed\u97f3\u52a9\u624b",s={unversionedId:"zh-CN/Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32S3/Application/CN_XIAO_ESP32S3_Speech2chatgpt",id:"zh-CN/Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32S3/Application/CN_XIAO_ESP32S3_Speech2chatgpt",title:"\u57fa\u4e8eXIAO ESP32S3 Sense\u7684\u5fae\u578bChatGPT\u8bed\u97f3\u52a9\u624b",description:"\u672c\u6559\u7a0b\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528XIAO ESP32S3\uff0c\u5f55\u5236\u58f0\u97f3\uff0c\u8bc6\u522b\u58f0\u97f3\uff0c\u7136\u540e\u5411ChatGPT\u63d0\u95ee\u5e76\u83b7\u5f97\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\u7684\u7b54\u6848\u3002",source:"@site/docs/zh-CN/Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32S3/Application/CN_XIAO_ESP32S3_Speech2chatgpt.md",sourceDirName:"zh-CN/Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32S3/Application",slug:"/cn/xiao_esp32s3_speech2chatgpt",permalink:"/cn/xiao_esp32s3_speech2chatgpt",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/zh-CN/Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32S3/Application/CN_XIAO_ESP32S3_Speech2chatgpt.md",tags:[],version:"current",lastUpdatedBy:"Xin Ping Li",lastUpdatedAt:1698710400,formattedLastUpdatedAt:"Oct 31, 2023",frontMatter:{description:"\u672c\u6559\u7a0b\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528XIAO ESP32S3\uff0c\u5f55\u5236\u58f0\u97f3\uff0c\u8bc6\u522b\u58f0\u97f3\uff0c\u7136\u540e\u5411ChatGPT\u63d0\u95ee\u5e76\u83b7\u5f97\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\u7684\u7b54\u6848\u3002",title:"\u57fa\u4e8eXIAO ESP32S3 Sense\u7684\u5fae\u578bChatGPT\u8bed\u97f3\u52a9\u624b",keywords:["xiao esp32s3 Sense","chatGPT","\u8bed\u97f3\u8f6c\u6587\u672c"],image:"https://files.seeedstudio.com/wiki/seeed_logo/logo_2023.png",slug:"/cn/xiao_esp32s3_speech2chatgpt",last_update:{date:"10/31/2023",author:"Xin Ping Li"}}},o={},p=[{value:"\u5f00\u59cb",id:"\u5f00\u59cb",level:2},{value:"\u786c\u4ef6\u51c6\u5907",id:"\u786c\u4ef6\u51c6\u5907",level:3},{value:"\u8f6f\u4ef6\u51c6\u5907",id:"\u8f6f\u4ef6\u51c6\u5907",level:3},{value:"\u6ce8\u518c\u5e76\u542f\u7528\u8c37\u6b4c\u4e91\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1",id:"\u6ce8\u518c\u5e76\u542f\u7528\u8c37\u6b4c\u4e91\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1",level:2},{value:"\u6b65\u9aa4 1.\u767b\u5f55\u5230\u8c37\u6b4c\u4e91\u63a7\u5236\u53f0",id:"\u6b65\u9aa4-1\u767b\u5f55\u5230\u8c37\u6b4c\u4e91\u63a7\u5236\u53f0",level:3},{value:"\u6b65\u9aa4 2.\u8f6c\u5230\u9879\u76ee\u9009\u62e9\u5668\u9875\u9762",id:"\u6b65\u9aa4-2\u8f6c\u5230\u9879\u76ee\u9009\u62e9\u5668\u9875\u9762",level:3},{value:"\u6b65\u9aa4 3.\u542f\u52a8\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1",id:"\u6b65\u9aa4-3\u542f\u52a8\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1",level:3},{value:"\u6b65\u9aa4 4.\u521b\u5efa\u670d\u52a1\u5e10\u6237",id:"\u6b65\u9aa4-4\u521b\u5efa\u670d\u52a1\u5e10\u6237",level:3},{value:"\u6b65\u9aa4 5.\u4e3a\u4f60\u7684\u670d\u52a1\u8d26\u6237\u521b\u5efa\u4e00\u4e2aJSON\u5bc6\u94a5",id:"\u6b65\u9aa4-5\u4e3a\u4f60\u7684\u670d\u52a1\u8d26\u6237\u521b\u5efa\u4e00\u4e2ajson\u5bc6\u94a5",level:3},{value:"\u5728\u672c\u5730\u4e3b\u673a\u4e0a\u90e8\u7f72\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1",id:"\u5728\u672c\u5730\u4e3b\u673a\u4e0a\u90e8\u7f72\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1",level:2},{value:"\u6b65\u9aa4 6.\u4e0b\u8f7d\u9879\u76ee\u6587\u4ef6",id:"\u6b65\u9aa4-6\u4e0b\u8f7d\u9879\u76ee\u6587\u4ef6",level:3},{value:"\u6b65\u9aa4 7.\u8bbe\u7f6e\u8eab\u4efd\u9a8c\u8bc1\u73af\u5883\u53d8\u91cf",id:"\u6b65\u9aa4-7\u8bbe\u7f6e\u8eab\u4efd\u9a8c\u8bc1\u73af\u5883\u53d8\u91cf",level:3},{value:"\u6b65\u9aa4 8.\u6d4b\u8bd5\u672c\u5730\u8c37\u6b4c\u4e91\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1\u7684\u90e8\u7f72",id:"\u6b65\u9aa4-8\u6d4b\u8bd5\u672c\u5730\u8c37\u6b4c\u4e91\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1\u7684\u90e8\u7f72",level:3},{value:"\u4e0a\u4f20XIAO ESP32S3 Sense\u5f55\u5236\u7684\u58f0\u97f3\u6587\u4ef6\u5230\u8c37\u6b4c\u4e91\u7aef\u8fdb\u884c\u8bc6\u522b",id:"\u4e0a\u4f20xiao-esp32s3-sense\u5f55\u5236\u7684\u58f0\u97f3\u6587\u4ef6\u5230\u8c37\u6b4c\u4e91\u7aef\u8fdb\u884c\u8bc6\u522b",level:2},{value:"\u6b65\u9aa4 9.\u5f00\u542f\u8c37\u6b4c\u4e91\u8bed\u97f3\u8bc6\u522b\u670d\u52a1\u7684\u7aef\u53e3\u4fa6\u542c",id:"\u6b65\u9aa4-9\u5f00\u542f\u8c37\u6b4c\u4e91\u8bed\u97f3\u8bc6\u522b\u670d\u52a1\u7684\u7aef\u53e3\u4fa6\u542c",level:3},{value:"\u6b65\u9aa4 10.\u68c0\u67e5\u4e3b\u673aIP\u5730\u5740",id:"\u6b65\u9aa4-10\u68c0\u67e5\u4e3b\u673aip\u5730\u5740",level:3},{value:"\u6b65\u9aa4 11.\u4e3aXIAO ESP32S3 Sense\u4e0a\u4f20\u7a0b\u5e8f",id:"\u6b65\u9aa4-11\u4e3axiao-esp32s3-sense\u4e0a\u4f20\u7a0b\u5e8f",level:3},{value:"\u5728XIAO ESP32S3 Sense\u4e0a\u90e8\u7f72ChatGPT",id:"\u5728xiao-esp32s3-sense\u4e0a\u90e8\u7f72chatgpt",level:2},{value:"\u6b65\u9aa4 12.\u7528\u6807\u8bc6\u7684\u6587\u672c\u5411ChatGPT\u63d0\u51fa\u4e00\u4e2a\u95ee\u9898",id:"\u6b65\u9aa4-12\u7528\u6807\u8bc6\u7684\u6587\u672c\u5411chatgpt\u63d0\u51fa\u4e00\u4e2a\u95ee\u9898",level:3},{value:"\u5c4f\u5e55\u663e\u793a\u5185\u5bb9\u8bbe\u8ba1\u4e0e\u8282\u76ee\u6574\u5408",id:"\u5c4f\u5e55\u663e\u793a\u5185\u5bb9\u8bbe\u8ba1\u4e0e\u8282\u76ee\u6574\u5408",level:2},{value:"\u6b65\u9aa4 13.\u4f7f\u7528SquareLine Studio\u7ed8\u5236\u663e\u793a\u5c4f",id:"\u6b65\u9aa4-13\u4f7f\u7528squareline-studio\u7ed8\u5236\u663e\u793a\u5c4f",level:3},{value:"\u6b65\u9aa4 14. \u96c6\u6210\u8fc7\u7a0b",id:"\u6b65\u9aa4-14-\u96c6\u6210\u8fc7\u7a0b",level:3},{value:"\u6280\u672f\u652f\u6301\u548c\u4ea7\u54c1\u8ba8\u8bba",id:"\u6280\u672f\u652f\u6301\u548c\u4ea7\u54c1\u8ba8\u8bba",level:2}],d=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.yg)("div",n)},c=d("Tabs"),g=d("TabItem"),u={toc:p},h="wrapper";function S(e){let{components:n,...t}=e;return(0,r.yg)(h,(0,i.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"\u57fa\u4e8exiao-esp32s3\u7684\u5fae\u578bchatgpt\u8bed\u97f3\u52a9\u624b"},"\u57fa\u4e8eXIAO ESP32S3\u7684\u5fae\u578bChatGPT\u8bed\u97f3\u52a9\u624b"),(0,r.yg)("iframe",{width:"100%",height:"400",src:"https://www.youtube.com/embed/wPi-XjeJPNw?controls=0",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),(0,r.yg)("p",null,"\u6211\u4eec\u4eca\u5929\u5f88\u9ad8\u5174\u4e3a\u60a8\u5e26\u6765\u4e00\u4e2a\u5168\u65b0\u7684\u9879\u76ee\uff0c\u4f7f\u7528XIAO ESP32S3 Sense\u548c\u5706\u5f62\u5c55\u793aXIAO!\u8be5\u9879\u76ee\u65e8\u5728\u9996\u5148\u4f7f\u7528XIAO ESP32S3 Sense\u7684\u9ea6\u514b\u98ce\u548c\u8c37\u6b4c\u4e91\u7684\u8bed\u97f3\u5230\u6587\u672c\u670d\u52a1\u6784\u5efa\u4e00\u4e2a\u8bed\u97f3\u8bc6\u522b\u7cfb\u7edf\u3002\u8bc6\u522b\u51fa\u7684\u8bed\u97f3\u6587\u672c\u7136\u540e\u7528\u4e8e\u8c03\u7528OpenAI\u7684\u63a5\u53e3\uff0c\u5411ChatGPT\u63d0\u51fa\u95ee\u9898\u5e76\u8fd4\u56de\u7b54\u6848\u3002\u6700\u540e\uff0c\u6211\u4eec\u5728\u5c4f\u5e55\u4e0a\u663e\u793a\u8bc6\u522b\u51fa\u7684\u8bed\u97f3\u548c\u7b54\u6848\u7684\u5185\u5bb9\u3002"),(0,r.yg)("p",null,"\u8fd9\u5c31\u662f\u6211\u4eec\u7684\u667a\u80fd\u201cXIAO\u201d\u52a9\u624b!"),(0,r.yg)("p",null,"\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u5b8c\u6210\u8fd9\u4e2a\u9879\u76ee\u6240\u9700\u7684\u4e00\u4e9b\u4e00\u822c\u6b65\u9aa4\u3002\n-",(0,r.yg)("a",{parentName:"p",href:"#%E6%B3%A8%E5%86%8C%E5%B9%B6%E5%90%AF%E7%94%A8%E8%B0%B7%E6%AD%8C%E4%BA%91%E8%AF%AD%E9%9F%B3%E8%BD%AC%E6%96%87%E6%9C%AC%E6%9C%8D%E5%8A%A1"},"\u6ce8\u518c\u5e76\u542f\u7528\u8c37\u6b4c\u4e91\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1")),(0,r.yg)("p",null,"-",(0,r.yg)("a",{parentName:"p",href:"#%E5%9C%A8%E6%9C%AC%E5%9C%B0%E4%B8%BB%E6%9C%BA%E4%B8%8A%E9%83%A8%E7%BD%B2%E8%AF%AD%E9%9F%B3%E5%88%B0%E6%96%87%E6%9C%AC%E6%9C%8D%E5%8A%A1"},"\u5728\u672c\u5730\u4e3b\u673a\u4e0a\u90e8\u7f72\u8bed\u97f3\u5230\u6587\u672c\u670d\u52a1")),(0,r.yg)("p",null,"-","[\u4e0a\u4f20XIAO ESP32S3 Sense\u5f55\u5236\u7684\u58f0\u97f3\u6587\u4ef6\u5230\u8c37\u6b4c\u4e91\u8fdb\u884c\u8bc6\u522b]","(#\u4e0a\u4f20- XIAO ESP32S3 - Sense\u5f55\u5236\u7684\u58f0\u97f3\u6587\u4ef6\u5230Google\u4e91\u8fdb\u884c\u8bc6\u522b)"),(0,r.yg)("p",null,"-","[\u5728XIAO ESP32S3 Sense\u4e0a\u90e8\u7f72ChatGPT]","(#\u5728XIAO ESP32S3 - Sense\u4e0a\u90e8\u7f72ChatGPT)"),(0,r.yg)("p",null,"-",(0,r.yg)("a",{parentName:"p",href:"#%E5%B1%8F%E5%B9%95%E6%98%BE%E7%A4%BA%E5%86%85%E5%AE%B9%E7%9A%84%E8%AE%BE%E8%AE%A1%E2%80%94%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%95%B4%E5%90%88"},"\u5c4f\u5e55\u663e\u793a\u5185\u5bb9\u7684\u8bbe\u8ba1\u4e0e\u7a0b\u5e8f\u7684\u6574\u5408")),(0,r.yg)("p",null,"\u603b\u4f53\u6846\u67b6\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"<https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/17.png>",style:{width:1e3,height:"auto"}})),(0,r.yg)("h2",{id:"\u5f00\u59cb"},"\u5f00\u59cb"),(0,r.yg)("p",null,"\u5728\u5f00\u59cb\u6b64\u9879\u76ee\u4e4b\u524d\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u6309\u6b64\u5904\u6240\u8ff0\u63d0\u524d\u51c6\u5907\u786c\u4ef6\u548c\u8f6f\u4ef6\u3002"),(0,r.yg)("h3",{id:"\u786c\u4ef6\u51c6\u5907"},"\u786c\u4ef6\u51c6\u5907"),(0,r.yg)("p",null,"\u5982\u679c\u60a8\u60f3\u5b8c\u6574\u4f53\u9a8c\u6574\u4e2a\u8282\u76ee\u5185\u5bb9\uff0c\u60a8\u81f3\u5c11\u9700\u8981\u5177\u5907\u4ee5\u4e0b\u786c\u4ef6\u8bbe\u5907\u3002"),(0,r.yg)("div",{class:"table-center"},(0,r.yg)("table",{align:"center"},(0,r.yg)("tr",null,(0,r.yg)("th",null,"Seeed Studio XIAO ESP32S3 Sense"),(0,r.yg)("th",null,"Seeed Studio Round Display for XIAO")),(0,r.yg)("tr",null,(0,r.yg)("td",null,(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SeeedStudio-XIAO-ESP32S3/img/xiaoesp32s3sense.jpg",style:{width:250,height:"auto"}}))),(0,r.yg)("td",null,(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/round_display_for_xiao/rounddisplay.jpg",style:{width:250,height:"auto"}})))),(0,r.yg)("tr",null,(0,r.yg)("td",null,(0,r.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,r.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/XIAO-ESP32S3-Sense-p-5639.html"},(0,r.yg)("strong",null,(0,r.yg)("span",null,(0,r.yg)("font",{color:"FFFFFF",size:"4"}," \u70b9\u51fb\u8d2d\u4e70 \ud83d\uddb1\ufe0f")))))),(0,r.yg)("td",null,(0,r.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,r.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Seeed-Studio-Round-Display-for-XIAO-p-5638.html"},(0,r.yg)("strong",null,(0,r.yg)("span",null,(0,r.yg)("font",{color:"FFFFFF",size:"4"}," \u70b9\u51fb\u8d2d\u4e70 \ud83d\uddb1\ufe0f"))))))))),(0,r.yg)("p",null,"\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2aFAT32\u683c\u5f0f\u7684microSD\u5361\uff0c\u4e0d\u8d85\u8fc732GB\u6765\u5b58\u50a8\u5f55\u97f3\u6587\u4ef6\u3002"),(0,r.yg)("p",null,"\u7531\u4e8eXIAO EPS32S3 Sense\u8bbe\u8ba1\u6709\u4e09\u4e2a\u4e0a\u62c9\u7535\u963bR4~R6\u8fde\u63a5SD\u5361\u63d2\u69fd\uff0c\u5706\u5f62\u663e\u793a\u5668\u4e5f\u6709\u4e0a\u62c9\u7535\u963b\uff0c\u56e0\u6b64\u4e24\u8005\u540c\u65f6\u4f7f\u7528\u65f6\u65e0\u6cd5\u8bfb\u53d6SD\u5361\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u5728XIAO ESP32S3 Sense\u6269\u5c55\u677f\u4e0a\u5207\u65adJ3\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"<https://files.seeedstudio.com/wiki/SeeedStudio-XIAO-ESP32S3/img/33.png>",style:{width:500,height:"auto"}})),(0,r.yg)("p",null,"\u65ad\u5f00J3\u8fde\u63a5\u540e\uff0cXIAO ESP32S3 Sense\u4e0a\u7684SD\u5361\u63d2\u69fd\u5c06\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c\uff0c\u9700\u8981\u5728\u5706\u5f62\u663e\u793a\u5c4f\u4e0a\u7684SD\u5361\u63d2\u69fd\u63d2\u5165microSD\u5361\u3002"),(0,r.yg)("p",null,"\u63a5\u4e0b\u6765\uff0c\u8bf7\u4f9d\u6b21\u5b89\u88c5microSD\u5361\u3001XIAO ESP32S3 Sense\u548c\u5706\u5f62\u663e\u793a\u5c4f\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"<https://files.seeedstudio.com/wiki/SeeedStudio-XIAO-ESP32S3/img/101.gif>",style:{width:500,height:"auto"}})),(0,r.yg)("p",null,":::\u63d0\u793a\n\u6211\u4eec\u5efa\u8bae\u60a8\u5148\u62c6\u5378\u76f8\u673a\u6a21\u5757\uff0c\u4ee5\u514d\u5728\u5207\u65ad\u4e0e\u5200\u7247\u7684J3\u8fde\u63a5\u65f6\u522e\u4f24\u76f8\u673a\u3002\n:::"),(0,r.yg)("h3",{id:"\u8f6f\u4ef6\u51c6\u5907"},"\u8f6f\u4ef6\u51c6\u5907"),(0,r.yg)("p",null,"\u7531\u4e8e\u4f7f\u7528\u7684\u662fXIAO ESP32S3\uff0c\u8bf7\u5728\u5f00\u59cb\u4e4b\u524d\u6309\u7167Wiki\u7684\u8bf4\u660e\u5b89\u88c5XIAO ESP32S3\u5b89\u88c5\u5305\u3002"),(0,r.yg)("p",null,"-",(0,r.yg)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/xiao_esp32s3_getting_started/#software-preparation"},"\u4f7f\u7528Seeed Studio XIAO ESP32S3 (Sense)\u5165\u95e8")),(0,r.yg)("p",null,"\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u4e3aXIAO\u4f7f\u7528\u4e86\u5706\u5f62\u663e\u793a\uff0c\u6240\u4ee5\u4f60\u8fd8\u9700\u8981\u6839\u636eWiki\u4e3a\u6269\u5c55\u677f\u51c6\u5907\u5e93\u3002"),(0,r.yg)("p",null,"-",(0,r.yg)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/get_start_round_display/#getting-started"},"\u5f00\u59cbSeeed Studio\u4e3aXIAO\u8bbe\u8ba1\u7684\u8f6e\u5c55")),(0,r.yg)("p",null,"\u5728\u9879\u76ee\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u4e5f\u53ef\u80fd\u4f1a\u4f7f\u7528\u4e00\u4e9b\u7b2c\u4e09\u65b9\u5e93\uff0c\u6bd4\u5982ChatGPT\u7684\u5e93\u548cArduinoJSON\uff0c\u53ef\u4ee5\u5728\u8fd9\u91cc\u4e0b\u8f7d\u5e76\u6dfb\u52a0\u5230Arduino\u5f00\u53d1\u73af\u5883\u4e2d\u3002"),(0,r.yg)("p",null,"\u2014\u2014(\u5e93)(",(0,r.yg)("a",{parentName:"p",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/tree/main/libraries"},"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/tree/main/libraries"),")"),(0,r.yg)("p",null,"\u9664\u4e86\u57fa\u672c\u7684\u5e93\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4f7f\u7528Node\u670d\u52a1\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u81ea\u5df1\u5b89\u88c5Nodejs\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u4ece",(0,r.yg)("a",{parentName:"p",href:"https://nodejs.org/en"},"\u5b98\u65b9\u7f51\u7ad9"),"\u4e0b\u8f7d\u5b83\u3002"),(0,r.yg)("p",null,"\u4e00\u5207\u5c31\u7eea\u540e\uff0c\u8ba9\u6211\u4eec\u5f00\u59cb\u4eca\u5929\u7684\u6559\u7a0b\u3002"),(0,r.yg)("h2",{id:"\u6ce8\u518c\u5e76\u542f\u7528\u8c37\u6b4c\u4e91\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1"},"\u6ce8\u518c\u5e76\u542f\u7528\u8c37\u6b4c\u4e91\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1"),(0,r.yg)("p",null,":::\u63d0\u793a\n\u60a8\u4e5f\u53ef\u4ee5\u76f4\u63a5\u53c2\u8003",(0,r.yg)("a",{parentName:"p",href:"https://cloud.google.com/speech-to-text/docs/before-you-begin#setting_up_your_google_cloud_platform_project"},"\u5b98\u65b9\u8c37\u6b4c\u4e91\u6559\u7a0b"),"\u5173\u4e8e\u5982\u4f55\u6ce8\u518c\u548c\u542f\u52a8\u8c37\u6b4c\u4e91\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1\u8fdb\u884c\u914d\u7f6e\u3002"),(0,r.yg)("p",null,":::"),(0,r.yg)("p",null,"\u8bed\u97f3\u5230\u6587\u672c\u662f\u4e00\u4e2a\u7531\u8c37\u6b4c\u7684\u4eba\u5de5\u667a\u80fd(AI)\u6280\u672f\u63d0\u4f9b\u652f\u6301\u7684API\u3002\u60a8\u5c06\u97f3\u9891\u6570\u636e\u53d1\u9001\u5230\u8bed\u97f3\u8f6c\u6587\u672c\uff0c\u7136\u540e\u63a5\u6536\u97f3\u9891\u6570\u636e\u7684\u6587\u672c\u8f6c\u5f55\u4f5c\u4e3a\u54cd\u5e94\u3002\u5728\u60a8\u53ef\u4ee5\u5f00\u59cb\u5411\u8bed\u97f3\u8f6c\u6587\u672c\u53d1\u9001\u8bf7\u6c42\u4e4b\u524d\uff0c\u60a8\u5fc5\u987b\u542f\u7528\u8c37\u6b4c\u4e91\u63a7\u5236\u53f0\u4e2d\u7684API\u3002"),(0,r.yg)("h3",{id:"\u6b65\u9aa4-1\u767b\u5f55\u5230\u8c37\u6b4c\u4e91\u63a7\u5236\u53f0"},"\u6b65\u9aa4 1.\u767b\u5f55\u5230\u8c37\u6b4c\u4e91\u63a7\u5236\u53f0"),(0,r.yg)("p",null,"\u4f60\u53ef\u4ee5\u901a\u8fc7\u70b9\u51fb",(0,r.yg)("a",{parentName:"p",href:"https://console.cloud.google.com/?_ga=2.241031875.1758680688.1685496686-1606155345.1684977559"},"\u8fd9\u91cc"),"\u8df3\u8f6c\u5230\u8c37\u6b4c\u4e91\u63a7\u5236\u53f0\uff0c\u5982\u679c\u4f60\u8fd8\u6ca1\u6709\u6ce8\u518c\u8c37\u6b4c\u4e91\uff0c\u4f60\u53ef\u4ee5\u5728",(0,r.yg)("a",{parentName:"p",href:"https://console.cloud.google.com/?_ga=2.241031875.1758680688.1685496686-1606155345.1684977559"},"\u8fd9\u91cc"),"\u6ce8\u518c\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"<https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/18.png>",style:{width:1e3,height:"auto"}})),(0,r.yg)("h3",{id:"\u6b65\u9aa4-2\u8f6c\u5230\u9879\u76ee\u9009\u62e9\u5668\u9875\u9762"},"\u6b65\u9aa4 2.",(0,r.yg)("a",{parentName:"h3",href:"https://console.cloud.google.com/projectselector2/home/dashboard?_ga=2.5754355.1758680688.1685496686-1606155345.1684977559"},"\u8f6c\u5230\u9879\u76ee\u9009\u62e9\u5668\u9875\u9762")),(0,r.yg)("p",null,"\u60a8\u53ef\u4ee5\u9009\u62e9\u73b0\u6709\u9879\u76ee\uff0c\u4e5f\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u9879\u76ee\u3002\u6709\u5173\u521b\u5efa\u9879\u76ee\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1",(0,r.yg)("a",{parentName:"p",href:"https://cloud.google.com/resource-manager/docs/creating-managing-projects"},"\u521b\u5efa\u548c\u7ba1\u7406\u9879\u76ee"),"\u3002"),(0,r.yg)("p",null,"\u5982\u679c\u60a8\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u9879\u76ee\uff0c\u5c06\u63d0\u793a\u60a8\u5c06\u4e00\u4e2a\u8ba1\u8d39\u5e10\u6237\u94fe\u63a5\u5230\u8fd9\u4e2a\u9879\u76ee\u3002\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u9884\u5148\u5b58\u5728\u7684\u9879\u76ee\uff0c\u8bf7\u786e\u4fdd\u542f\u7528\u4e86\u8ba1\u8d39\u529f\u80fd\u3002"),(0,r.yg)("p",null,":::\u63d0\u793a\n\u6ce8\u610f:\u60a8\u5fc5\u987b\u542f\u7528\u8ba1\u8d39\u529f\u80fd\u624d\u80fd\u4f7f\u7528\u8bed\u97f3\u8f6c\u6587\u672cAPI\uff0c\u4f46\u662f\u60a8\u5c06\u4e0d\u4f1a\u88ab\u6536\u8d39\uff0c\u9664\u975e\u60a8\u8d85\u8fc7\u514d\u8d39\u914d\u989d\u3002\u67e5\u770b",(0,r.yg)("a",{parentName:"p",href:"https://cloud.google.com/speech-to-text/pricing"},"\u5b9a\u4ef7"),"\u9875\u9762\u4e86\u89e3\u66f4\u591a\u7ec6\u8282\u3002\n:::"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"<https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/2.png>",style:{width:1e3,height:"auto"}})),(0,r.yg)("h3",{id:"\u6b65\u9aa4-3\u542f\u52a8\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1"},"\u6b65\u9aa4 3.\u542f\u52a8\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1"),(0,r.yg)("p",null,"\u4e00\u65e6\u60a8\u9009\u62e9\u4e86\u4e00\u4e2a\u9879\u76ee\u5e76\u5c06\u5176\u94fe\u63a5\u5230\u8ba1\u8d39\u5e10\u6237\uff0c\u60a8\u5c31\u53ef\u4ee5\u542f\u7528\u8bed\u97f3\u8f6c\u6587\u672cAPI\u3002\u6253\u5f00\u9875\u9762\u9876\u90e8\u7684\u641c\u7d22\u4ea7\u54c1\u548c\u8d44\u6e90\u680f\uff0c\u8f93\u5165",(0,r.yg)("strong",{parentName:"p"},"\u8bed\u97f3"),"\u3002\u4ece\u7ed3\u679c\u5217\u8868\u4e2d\u9009\u62e9",(0,r.yg)("strong",{parentName:"p"},"\u4e91\u8bed\u97f3\u8f6c\u6587\u672cAPI"),"\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"<https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/1.png>",style:{width:600,height:"auto"}})),(0,r.yg)("h3",{id:"\u6b65\u9aa4-4\u521b\u5efa\u670d\u52a1\u5e10\u6237"},"\u6b65\u9aa4 4.\u521b\u5efa\u670d\u52a1\u5e10\u6237"),(0,r.yg)("p",null,"\u5982\u679c\u4f60\u7684\u9879\u76ee\u8fd8\u6ca1\u6709\u670d\u52a1\u8d26\u6237\uff0c\u8bf7\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u670d\u52a1\u8d26\u6237\u3002\u60a8\u5fc5\u987b\u521b\u5efa\u4e00\u4e2a\u670d\u52a1\u5e10\u6237\u624d\u80fd\u4f7f\u7528\u8bed\u97f3\u8f6c\u6587\u672c\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"<https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/3.png>",style:{width:600,height:"auto"}})),(0,r.yg)("p",null,"\u5728\u65b0\u5f39\u51fa\u7684\u9875\u9762\u4e2d\uff0c\u5728",(0,r.yg)("strong",{parentName:"p"},"CREATE CREDENTIALS"),"\u4e0b\u9009\u62e9",(0,r.yg)("strong",{parentName:"p"},"Service account"),"\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"<https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/4.png>",style:{width:1e3,height:"auto"}})),(0,r.yg)("p",null,"\u5728",(0,r.yg)("strong",{parentName:"p"},"\u670d\u52a1\u5e10\u6237\u540d\u79f0"),"\u6846\u4e2d\uff0c\u4e3a\u65b0\u7684\u670d\u52a1\u5e10\u6237\u952e\u5165\u4e00\u4e2a\u552f\u4e00\u7684\u540d\u79f0\u3002\u60a8\u7684\u8f93\u5165\u5c06\u81ea\u52a8\u586b\u5145\u5230",(0,r.yg)("strong",{parentName:"p"},"\u670d\u52a1\u5e10\u6237ID\u6846"),"\u4e2d\u3002\u670d\u52a1\u5e10\u6237\u63cf\u8ff0\u6846\u662f\u53ef\u9009\u7684\uff0c\u4f46\u5982\u679c\u60a8\u8ba1\u5212\u5c06\u591a\u4e2a\u670d\u52a1\u5e10\u6237\u5173\u8054\u5230\u60a8\u7684\u9879\u76ee\uff0c\u5219\u5efa\u8bae\u60a8\u4f7f\u7528\u8be5\u6846\u3002\u5728\u6b64\u6846\u4e2d\u8f93\u5165\u670d\u52a1\u5e10\u6237\u7684\u7b80\u8981\u63cf\u8ff0\uff0c\u7136\u540e\u5355\u51fb",(0,r.yg)("strong",{parentName:"p"},"\u521b\u5efa\u5e76\u7ee7\u7eed"),"\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"<https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/5.png>",style:{width:500,height:"auto"}})),(0,r.yg)("p",null,"\u6211\u4eec\u5efa\u8bae\u60a8\u4e3a\u60a8\u7684\u670d\u52a1\u5e10\u6237\u5206\u914d\u4e00\u4e2a\u57fa\u672cIAM\u89d2\u8272\u3002\u5982\u679c\u9700\u8981\uff0c\u60a8\u4e5f\u53ef\u4ee5\u4e3a\u5355\u4e2a\u670d\u52a1\u5e10\u6237\u5206\u914d\u591a\u4e2a\u89d2\u8272\u3002\u5173\u4e8e\u53ef\u7528\u7684\u89d2\u8272\u548c\u6bcf\u4e2a\u89d2\u8272\u7684\u6743\u9650\uff0c\u8bf7\u53c2\u89c1",(0,r.yg)("a",{parentName:"p",href:"https://cloud.google.com/iam/docs/understanding-roles"},"IAM roles"),"\u3002\u5355\u51fb\u4e0b\u62c9\u83dc\u5355\uff0c\u9009\u62e9\u89d2\u8272\u83dc\u5355\u5e76\u5411\u4e0b\u6eda\u52a8\u5230",(0,r.yg)("strong",{parentName:"p"},"Owner"),"\u3002\u60a8\u53ef\u4ee5\u4ece\u53f3\u8fb9\u5217\u4e2d\u51fa\u73b0\u7684\u9009\u9879\u4e2d\u4e3a\u8fd9\u4e2a\u670d\u52a1\u5e10\u6237\u9009\u62e9\u4e00\u4e2a\u89d2\u8272\u3002\u70b9\u51fb",(0,r.yg)("strong",{parentName:"p"},"\u7ee7\u7eed"),"\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"<https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/6.png>",style:{width:500,height:"auto"}})),(0,r.yg)("p",null,"\u6700\u540e\u4e00\u6b65\u5141\u8bb8\u60a8\u6709\u9009\u62e9\u5730\u5141\u8bb8\u5176\u4ed6\u5b9e\u4f53(\u4e2a\u4eba\u3001\u8c37\u6b4c\u7ec4\u7b49)\u8bbf\u95ee\u60a8\u7684\u670d\u52a1\u5e10\u6237\u3002\u5982\u679c\u4f60\u4e0d\u9700\u8981\u6388\u4e88\u989d\u5916\u7684\u6743\u9650\uff0c\u4f60\u53ef\u4ee5\u70b9\u51fb",(0,r.yg)("strong",{parentName:"p"},"DONE"),"\u800c\u4e0d\u8f93\u5165\u4efb\u4f55\u4fe1\u606f\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"<https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/7.png>",style:{width:500,height:"auto"}})),(0,r.yg)("p",null,"\u670d\u52a1\u8d26\u6237\u73b0\u5728\u5217\u5728",(0,r.yg)("strong",{parentName:"p"},"\u670d\u52a1\u8d26\u6237"),"\u9875\u9762\u4e0a\u3002\u60a8\u53ef\u4ee5\u66f4\u6539\u670d\u52a1\u5e10\u6237\u7684\u6743\u9650\uff0c\u6dfb\u52a0\u6216\u751f\u6210\u65b0\u7684\u5bc6\u94a5\uff0c\u5e76\u5728\u4efb\u4f55\u65f6\u5019\u6388\u4e88\u8bbf\u95ee\u6743\u9650\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"<https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/8.png>",style:{width:1e3,height:"auto"}})),(0,r.yg)("h3",{id:"\u6b65\u9aa4-5\u4e3a\u4f60\u7684\u670d\u52a1\u8d26\u6237\u521b\u5efa\u4e00\u4e2ajson\u5bc6\u94a5"},"\u6b65\u9aa4 5.\u4e3a\u4f60\u7684\u670d\u52a1\u8d26\u6237\u521b\u5efa\u4e00\u4e2aJSON\u5bc6\u94a5"),(0,r.yg)("p",null,"\u5f53\u60a8\u53d1\u9001\u8bed\u97f3\u8f6c\u6587\u672c\u8bf7\u6c42\u65f6\uff0c\u60a8\u9700\u8981\u5728",(0,r.yg)("a",{parentName:"p",href:"https://cloud.google.com/speech-to-text/docs/before-you-begin#set_up_your_environment_variables"},"\u8eab\u4efd\u9a8c\u8bc1\u8fc7\u7a0b"),"\u4e2d\u4f7f\u7528\u6b64\u79c1\u94a5\u3002\n\u8981\u521b\u5efa\u5bc6\u94a5\uff0c\u8bf7\u5355\u51fb\u670d\u52a1\u5e10\u6237\u5e76\u9009\u62e9",(0,r.yg)("strong",{parentName:"p"},"KEYS"),"\u9009\u9879\u5361\u3002\u5355\u51fb",(0,r.yg)("strong",{parentName:"p"},"ADD KEY -> Create new KEY"),"\u3002\u6211\u4eec\u5efa\u8bae\u4f60\u521b\u5efa\u4e00\u4e2aJSON\u683c\u5f0f\u7684\u5bc6\u94a5\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"<https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/9.png>",style:{width:800,height:"auto"}})),(0,r.yg)("p",null,"\u5c06\u81ea\u52a8\u4e0b\u8f7d\u60a8\u9009\u62e9\u7684\u683c\u5f0f\u7684\u65b0\u952e\u3002\u5c06\u8fd9\u4e2a\u6587\u4ef6\u4fdd\u5b58\u5728\u4e00\u4e2a\u5b89\u5168\u7684\u5730\u65b9\uff0c\u5e76\u8bb0\u5f55\u4e0b\u6587\u4ef6\u7684\u8def\u5f84\u3002\u5728\u6bcf\u4e2a\u65b0\u7684\u8bed\u97f3\u8f6c\u6587\u672c\u4f1a\u8bdd\u5f00\u59cb\u65f6\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u65f6\uff0c\u60a8\u9700\u8981\u5c06",(0,r.yg)("strong",{parentName:"p"},"GOOGLE_APPLICATION_CREDENTIALS"),"\u73af\u5883\u53d8\u91cf\u6307\u5411\u6b64\u6587\u4ef6\u3002\u8fd9\u662f\u9a8c\u8bc1\u8bed\u97f3\u8f6c\u6587\u672c\u8bf7\u6c42\u7684\u5173\u952e\u6b65\u9aa4\u3002\u5bc6\u94a5\u7684\u552f\u4e00ID\u51fa\u73b0\u5728\u670d\u52a1\u5e10\u6237\u540d\u79f0\u65c1\u8fb9\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"<https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/10.png>",style:{width:1e3,height:"auto"}})),(0,r.yg)("p",null,":::\u6ce8\u610f"),(0,r.yg)("p",null,"\u8bf7\u4fdd\u6301JSON\u683c\u5f0f\u7684\u5bc6\u94a5\uff0c\u56e0\u4e3a\u6211\u4eec\u5c06\u5728\u540e\u9762\u7684\u6b65\u9aa4\u4e2d\u4f7f\u7528\u5b83\u3002\n:::"),(0,r.yg)("h2",{id:"\u5728\u672c\u5730\u4e3b\u673a\u4e0a\u90e8\u7f72\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1"},"\u5728\u672c\u5730\u4e3b\u673a\u4e0a\u90e8\u7f72\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1"),(0,r.yg)("h3",{id:"\u6b65\u9aa4-6\u4e0b\u8f7d\u9879\u76ee\u6587\u4ef6"},"\u6b65\u9aa4 6.\u4e0b\u8f7d\u9879\u76ee\u6587\u4ef6"),(0,r.yg)("p",null,"\u6211\u4eec\u5df2\u7ecf\u6253\u5305\u4e86\u5b8c\u6210\u6574\u4e2a\u6559\u7a0b\u6240\u9700\u7684\u9879\u76ee\u6587\u4ef6\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u6309\u94ae\u76f4\u63a5\u4eceGithub\u4e0b\u8f7d\u5b83\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528Git\u547d\u4ee4\u5728\u672c\u5730\u4e0b\u8f7d\u5b83\u3002"),(0,r.yg)("div",{class:"github_container",style:{textAlign:"center"}},(0,r.yg)("a",{class:"github_item",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT"},(0,r.yg)("strong",null,(0,r.yg)("span",null,(0,r.yg)("font",{color:"FFFFFF",size:"4"}," \u4e0b\u8f7d\u9879\u76ee")))," ",(0,r.yg)("svg",{"aria-hidden":"true",focusable:"false",role:"img",className:"mr-2",viewBox:"-3 10 9 1",width:16,height:16,fill:"currentColor",style:{textAlign:"center",display:"inline-block",userSelect:"none",verticalAlign:"text-bottom",overflow:"visible"}},(0,r.yg)("path",{d:"M8 0c4.42 0 8 3.58 8 8a8.013 8.013 0 0 1-5.45 7.59c-.4.08-.55-.17-.55-.38 0-.27.01-1.13.01-2.2 0-.75-.25-1.23-.54-1.48 1.78-.2 3.65-.88 3.65-3.95 0-.88-.31-1.59-.82-2.15.08-.2.36-1.02-.08-2.12 0 0-.67-.22-2.2.82-.64-.18-1.32-.27-2-.27-.68 0-1.36.09-2 .27-1.53-1.03-2.2-.82-2.2-.82-.44 1.1-.16 1.92-.08 2.12-.51.56-.82 1.28-.82 2.15 0 3.06 1.86 3.75 3.64 3.95-.23.2-.44.55-.51 1.07-.46.21-1.61.55-2.33-.66-.15-.24-.6-.83-1.23-.82-.67.01-.27.38.01.53.34.19.73.9.82 1.13.16.45.68 1.31 2.69.94 0 .67.01 1.3.01 1.49 0 .21-.15.45-.55.38A7.995 7.995 0 0 1 0 8c0-4.42 3.58-8 8-8Z"})))),(0,r.yg)("br",null),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"git clone https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT.git\n")),(0,r.yg)("p",null,"\u4e0e\u6b64\u540c\u65f6\uff0c\u4f60\u53ef\u4ee5\u5c06\u6211\u4eec\u5728",(0,r.yg)("strong",{parentName:"p"},"\u7b2c5\u6b65"),"\u4e2d\u51c6\u5907\u7684JSON\u6587\u4ef6\u590d\u5236\u5230",(0,r.yg)("strong",{parentName:"p"},"NodejsServer"),"\u6587\u4ef6\u5939\u4e2d\uff0c\u6211\u4eec\u7a0d\u540e\u4f1a\u4f7f\u7528\u5b83\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"<https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/19.png>",style:{width:600,height:"auto"}})),(0,r.yg)("h3",{id:"\u6b65\u9aa4-7\u8bbe\u7f6e\u8eab\u4efd\u9a8c\u8bc1\u73af\u5883\u53d8\u91cf"},"\u6b65\u9aa4 7.\u8bbe\u7f6e\u8eab\u4efd\u9a8c\u8bc1\u73af\u5883\u53d8\u91cf"),(0,r.yg)("p",null,"\u4e3a\u4e86\u8bbe\u7f6e\u4f60\u7684",(0,r.yg)("strong",{parentName:"p"},"GOOGLE_APPLICATION_CREDENTIALS"),"\uff0c\u4f60\u5fc5\u987b\u6709\u4e00\u4e2a\u4e0e\u4f60\u7684\u9879\u76ee\u76f8\u5173\u8054\u7684\u670d\u52a1\u5e10\u6237\uff0c\u5e76\u4e14\u80fd\u591f\u8bbf\u95ee\u670d\u52a1\u5e10\u6237\u7684JSON\u5bc6\u94a5\u3002"),(0,r.yg)("p",null,"\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf",(0,r.yg)("strong",{parentName:"p"},"GOOGLE_APPLICATION_CREDENTIALS"),"\uff0c\u4e3a\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u63d0\u4f9b\u8eab\u4efd\u9a8c\u8bc1\u51ed\u636e\u3002"),(0,r.yg)("p",null,"\u4ece",(0,r.yg)("inlineCode",{parentName:"p"},"@theme/Tabs"),"\u5bfc\u5165\u9009\u9879\u5361;"),(0,r.yg)("p",null,"\u4ece",(0,r.yg)("inlineCode",{parentName:"p"},"@theme/TabItem"),"\u4e2d\u5bfc\u5165TabItem;"),(0,r.yg)(c,{mdxType:"Tabs"},(0,r.yg)(g,{value:"Windows",label:"Windows",mdxType:"TabItem"},(0,r.yg)("p",null,"PowerShell:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'$env:GOOGLE_APPLICATION_CREDENTIALS="KEY_PATH"\n')),(0,r.yg)("p",null,"\u5c06",(0,r.yg)("strong",{parentName:"p"},"KEY_PATH"),"\u66ff\u6362\u4e3a\u5305\u542b\u4f60\u7684\u670d\u52a1\u8d26\u6237\u5bc6\u94a5\u7684JSON\u6587\u4ef6\u7684\u8def\u5f84\u3002"),(0,r.yg)("p",null,"\u4f8b\u5982:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'$env:GOOGLE_APPLICATION_CREDENTIALS="C:\\Users\\username\\Downloads\\service-account-file.json"\n')),(0,r.yg)("p",null,"\u547d\u4ee4\u63d0\u793a\u7b26:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"set GOOGLE_APPLICATION_CREDENTIALS=KEY_PATH\n")),(0,r.yg)("p",null,"\u5c06",(0,r.yg)("strong",{parentName:"p"},"KEY_PATH"),"\u66ff\u6362\u4e3a\u5305\u542b\u4f60\u7684\u670d\u52a1\u8d26\u6237\u5bc6\u94a5\u7684JSON\u6587\u4ef6\u7684\u8def\u5f84\u3002")),(0,r.yg)(g,{value:"MacOS or Linux",label:"MacOS or Linux",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'export GOOGLE_APPLICATION_CREDENTIALS="KEY_PATH"\n')),(0,r.yg)("p",null,"\u5c06",(0,r.yg)("strong",{parentName:"p"},"KEY_PATH"),"\u66ff\u6362\u4e3a\u5305\u542b\u4f60\u7684\u670d\u52a1\u8d26\u6237\u5bc6\u94a5\u7684JSON\u6587\u4ef6\u7684\u8def\u5f84\u3002\n\u4f8b\u5982:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'export GOOGLE_APPLICATION_CREDENTIALS="/home/user/Downloads/service-account-file.json"\n')))),(0,r.yg)("p",null,"\u5728\u4e0a\u4e00\u6b65\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u5c06JSON\u6587\u4ef6\u653e\u5728",(0,r.yg)("strong",{parentName:"p"},"NodejsServer"),"\u6587\u4ef6\u5939\u4e2d\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8fdb\u5165\u8be5\u6587\u4ef6\u5939\uff0c\u53f3\u952e\u5355\u51fb\u5e76\u9009\u62e9",(0,r.yg)("strong",{parentName:"p"},"Open In Powershell"),"\u4ee5\u8fdb\u5165Windows\u7ec8\u7aef\u3002"),(0,r.yg)("p",null,"\u7136\u540e\u8f93\u5165\u547d\u4ee4\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'$env:GOOGLE_APPLICATION_CREDENTIALS="tensile-yen-3xxxxx-fdxxxxxxxxxx.json"\n')),(0,r.yg)("p",null,":::\u63d0\u793a\n\u6267\u884c\u4e0a\u8ff0\u547d\u4ee4\u65f6\uff0c\u8bf7\u4f7f\u7528\u60a8\u7684JSON\u6587\u4ef6\u540d\u3002\n:::"),(0,r.yg)("p",null,":::\u63d0\u9192\n\u5982\u679c\u4f60\u91cd\u542f\u4e86\u8ba1\u7b97\u673a\u6216\u5173\u95ed\u4e86Powershell\uff0c\u8fd9\u53ef\u80fd\u9700\u8981\u4f60\u91cd\u65b0\u914d\u7f6e\u73af\u5883\u53d8\u91cf\u4ee5\u6dfb\u52a0\u5bc6\u94a5\u3002\n:::"),(0,r.yg)("h3",{id:"\u6b65\u9aa4-8\u6d4b\u8bd5\u672c\u5730\u8c37\u6b4c\u4e91\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1\u7684\u90e8\u7f72"},"\u6b65\u9aa4 8.\u6d4b\u8bd5\u672c\u5730\u8c37\u6b4c\u4e91\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1\u7684\u90e8\u7f72"),(0,r.yg)("p",null,"\u4e00\u5207\u5c31\u7eea\u540e\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e00\u6bb5\u5f55\u5236\u7684\u97f3\u9891\uff0c\u7ed3\u5408json\u7a0b\u5e8f\u6765\u68c0\u67e5\u90e8\u7f72\u662f\u5426\u6210\u529f\u5730\u5c06\u5f55\u97f3\u8f6c\u6362\u4e3a\u6587\u672c\u3002"),(0,r.yg)("p",null,"\u8bf7\u5728",(0,r.yg)("strong",{parentName:"p"},"NodejsServer"),"\u9879\u76ee\u6587\u4ef6\u5939\u4e2d\u6253\u5f00\u4e00\u4e2aPowershell\u7a97\u53e3\u3002"),(0,r.yg)("p",null,"\u7136\u540e\u8f93\u5165\u5982\u4e0b\u547d\u4ee4\u3002\u8be5\u547d\u4ee4\u5c06\u6267\u884c",(0,r.yg)("inlineCode",{parentName:"p"},"speechAPItest.js"),"\u6587\u4ef6\uff0c\u5e76\u5c06\u9879\u76eeresources\u6587\u4ef6\u5939\u4e2d\u7684\u5f55\u97f3\u6587\u4ef6\u4f5c\u4e3a\u97f3\u9891\u8f93\u5165\u6e90\u53d1\u9001\u5230\u8c37\u6b4cCloud\u8fdb\u884c\u5206\u6790\u5e76\u8fd4\u56de\u8bc6\u522b\u7684\u8bed\u97f3\u5185\u5bb9\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"node ./speechAPItest.js\n")),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"<https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/13.png>",style:{width:800,height:"auto"}})),(0,r.yg)("p",null,"\u5982\u679c\u60a8\u7684\u5b9e\u73b0\u5982\u4e0a\u9762\u6240\u793a\u5de5\u4f5c\uff0c\u8fd9\u8868\u660e\u60a8\u5df2\u7ecf\u6210\u529f\u5730\u5728\u672c\u5730\u4e3b\u673a\u4e0a\u90e8\u7f72\u4e86\u8c37\u6b4c\u4e91\u670d\u52a1\uff0c\u5e76\u51c6\u5907\u7ee7\u7eed\u4e0b\u4e00\u6b65\u3002"),(0,r.yg)("p",null,"\u5982\u679c\u60a8\u9047\u5230\u95ee\u9898\uff0c\u53ef\u4ee5\u54a8\u8be2",(0,r.yg)("a",{parentName:"p",href:"https://cloud.google.com/speech-to-text/docs/"},"\u5b98\u65b9\u8c37\u6b4c\u4e91\u8bf4\u660e"),"\uff0c\u4ee5\u68c0\u67e5\u90e8\u7f72\u8fc7\u7a0b\u4e2d\u662f\u5426\u6709\u4efb\u4f55\u9519\u8bef\u6216\u9057\u6f0f\u7684\u6b65\u9aa4\u3002"),(0,r.yg)("h2",{id:"\u4e0a\u4f20xiao-esp32s3-sense\u5f55\u5236\u7684\u58f0\u97f3\u6587\u4ef6\u5230\u8c37\u6b4c\u4e91\u7aef\u8fdb\u884c\u8bc6\u522b"},"\u4e0a\u4f20XIAO ESP32S3 Sense\u5f55\u5236\u7684\u58f0\u97f3\u6587\u4ef6\u5230\u8c37\u6b4c\u4e91\u7aef\u8fdb\u884c\u8bc6\u522b"),(0,r.yg)("p",null,"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u66f4\u6539\u4e0a\u4f20\u7684\u97f3\u9891\u6587\u4ef6\u7684\u8def\u5f84\u3002\u4ece\u672c\u5730\u4e0a\u4f20\u5230\u901a\u8fc7XIAO ESP32S3 Sense\u5f55\u97f3\u4e0a\u4f20\u3002XIAO ESP32S3 Sense\u5f55\u5236\u7684\u97f3\u9891\u6587\u4ef6\u5148\u4fdd\u5b58\u5230microSD\u5361\uff0c\u518d\u901a\u8fc7\u672c\u5730\u7aef\u53e3\u4f20\u8f93\u5230\u8c37\u6b4c\u4e91\u7aef\u3002"),(0,r.yg)("h3",{id:"\u6b65\u9aa4-9\u5f00\u542f\u8c37\u6b4c\u4e91\u8bed\u97f3\u8bc6\u522b\u670d\u52a1\u7684\u7aef\u53e3\u4fa6\u542c"},"\u6b65\u9aa4 9.\u5f00\u542f\u8c37\u6b4c\u4e91\u8bed\u97f3\u8bc6\u522b\u670d\u52a1\u7684\u7aef\u53e3\u4fa6\u542c"),(0,r.yg)("p",null,"\u7c7b\u4f3c\u5730\uff0c\u5728NodejsServer\u6587\u4ef6\u5939\u4e2d\uff0c\u4f7f\u7528powershell\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"node ./speechAPIServer.js\n")),(0,r.yg)("p",null,"\u4e00\u65e6\u6267\u884c\uff0c",(0,r.yg)("strong",{parentName:"p"},"speechAPIServer.js"),"\u7a0b\u5e8f\u5c06\u88ab\u6267\u884c\uff0c\u5e76\u5c06\u6301\u7eed\u76d1\u542c",(0,r.yg)("inlineCode",{parentName:"p"},"localhost:8888"),"\u3002\u4e00\u65e6\u6587\u4ef6\u4f20\u8f93\u5230\u8fd9\u4e2a\u7aef\u53e3\uff0c\u5c31\u4f1a\u8c03\u7528\u8c37\u6b4c\u4e91\u670d\u52a1\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"<https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/20.png>",style:{width:800,height:"auto"}})),(0,r.yg)("p",null,"\u4e00\u65e6\u5f00\u59cb\u76d1\u542c\uff0c\u53ea\u8981\u8ba9\u7a97\u53e3\u6253\u5f00\uff0c\u670d\u52a1\u5c31\u4f1a\u6301\u7eed\u3002"),(0,r.yg)("h3",{id:"\u6b65\u9aa4-10\u68c0\u67e5\u4e3b\u673aip\u5730\u5740"},"\u6b65\u9aa4 10.\u68c0\u67e5\u4e3b\u673aIP\u5730\u5740"),(0,r.yg)("p",null,"\u56e0\u4e3aXIAO\u4e4b\u540e\u7684\u5f55\u97f3\u6587\u4ef6\u9700\u8981\u901a\u8fc7\u4e3b\u673a\u7684\u7aef\u53e3\u53f7\u4e0a\u4f20\u5230\u8c37\u6b4cCloud Services\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u4f60\u7684\u8ba1\u7b97\u673a\u4e3b\u673a\u7684IP\u5730\u5740\u3002"),(0,r.yg)(c,{mdxType:"Tabs"},(0,r.yg)(g,{value:"Windows",label:"Windows",mdxType:"TabItem"},(0,r.yg)("p",null,"\u5728Powershell\u4e2d\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u83b7\u53d6\u8ba1\u7b97\u673a\u7684IP\u5730\u5740\u4fe1\u606f\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"ipcofig\n"))),(0,r.yg)(g,{value:"MacOS or Linux",label:"MacOS or Linux",mdxType:"TabItem"},(0,r.yg)("p",null,"\u5728shell\u4e2d\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u83b7\u53d6\u8ba1\u7b97\u673a\u7684IP\u5730\u5740\u4fe1\u606f\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"ifconfig\n")))),(0,r.yg)("p",null,"\u8bf7\u628a\u60a8\u7684IP\u5730\u5740\u8bb0\u4e0b\u6765\uff0c\u6211\u4eec\u7a0d\u540e\u4f1a\u7528\u5230\u3002"),(0,r.yg)("h3",{id:"\u6b65\u9aa4-11\u4e3axiao-esp32s3-sense\u4e0a\u4f20\u7a0b\u5e8f"},"\u6b65\u9aa4 11.\u4e3aXIAO ESP32S3 Sense\u4e0a\u4f20\u7a0b\u5e8f"),(0,r.yg)("p",null,"\u5728\u9879\u76ee\u6587\u4ef6\u5939 ",(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("a",{parentName:"strong",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/main/XIAOESP32S3-RECORD-UPLOAD/XIAOESP32S3-RECORD-UPLOAD.ino"},"XIAOESP32S3-RECORD-UPLOAD"))," \u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u4e3a\u672c\u8282\u4e2d\u7684\u793a\u4f8b\u51c6\u5907\u4e86\u7a0b\u5e8f\u3002"),(0,r.yg)("details",null,(0,r.yg)("summary",null,"\u5355\u51fb\u4ee5\u9884\u89c8\u5b8c\u6574\u7a0b\u5e8f"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <I2S.h>\n#include <WiFi.h>\n#include <HTTPClient.h>\n#include "FS.h"\n#include "SD.h"\n#include "SPI.h"\n\n//Variables to be used in the recording program, do not change for best\n#define SAMPLE_RATE 16000U\n#define SAMPLE_BITS 16\n#define WAV_HEADER_SIZE 44\n#define VOLUME_GAIN 2\n#define RECORD_TIME 10      // seconds, The maximum value is 240\n\n// Number of bytes required for the recording buffer\nuint32_t record_size = (SAMPLE_RATE * SAMPLE_BITS / 8) * RECORD_TIME;\n\nFile file;\nconst char filename[] = "/recording.wav";\n\nbool isWIFIConnected;\n\nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(115200);\n  while (!Serial) ;\n  \n  I2S.setAllPins(-1, 42, 41, -1, -1);\n  \n  //The transmission mode is PDM_MONO_MODE, which means that PDM (pulse density modulation) mono mode is used for transmission\n  if (!I2S.begin(PDM_MONO_MODE, SAMPLE_RATE, SAMPLE_BITS)) {\n    Serial.println("Failed to initialize I2S!");\n    while (1) ;\n  }\n\n  if(!SD.begin(D2)){\n    Serial.println("Failed to mount SD Card!");\n    while (1) ;\n  }\n  \n  xTaskCreate(i2s_adc, "i2s_adc", 1024 * 8, NULL, 1, NULL);\n  delay(500);\n  xTaskCreate(wifiConnect, "wifi_Connect", 4096, NULL, 0, NULL);\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n}\n\nvoid i2s_adc(void *arg)\n{\n  uint32_t sample_size = 0;\n\n  //This variable will be used to point to the actual recording buffer\n  uint8_t *rec_buffer = NULL;\n  Serial.printf("Ready to start recording ...\\n");\n\n  File file = SD.open(filename, FILE_WRITE);\n\n  // Write the header to the WAV file\n  uint8_t wav_header[WAV_HEADER_SIZE];\n\n  //Write the WAV file header information to the wav_header array\n  generate_wav_header(wav_header, record_size, SAMPLE_RATE);\n\n  //Call the file.write() function to write the data in the wav_header array to the newly created WAV file\n  file.write(wav_header, WAV_HEADER_SIZE);\n\n  // This code uses the ESP32\'s PSRAM (external cache memory) to dynamically allocate a section of memory to store the recording data.\n  rec_buffer = (uint8_t *)ps_malloc(record_size);\n  if (rec_buffer == NULL) {\n    Serial.printf("malloc failed!\\n");\n    while(1) ;\n  }\n  Serial.printf("Buffer: %d bytes\\n", ESP.getPsramSize() - ESP.getFreePsram());\n\n  // Start recording\n  // I2S port number (in this case I2S_NUM_0), \n  // a pointer to the buffer to which the data is to be written (i.e. rec_buffer),\n  // the size of the data to be read (i.e. record_size),\n  // a pointer to a variable that points to the actual size of the data being read (i.e. &sample_size),\n  // and the maximum time to wait for the data to be read (in this case portMAX_DELAY, indicating an infinite wait time).\n  esp_i2s::i2s_read(esp_i2s::I2S_NUM_0, rec_buffer, record_size, &sample_size, portMAX_DELAY);\n  if (sample_size == 0) {\n    Serial.printf("Record Failed!\\n");\n  } else {\n    Serial.printf("Record %d bytes\\n", sample_size);\n  }\n\n  // Increase volume\n  for (uint32_t i = 0; i < sample_size; i += SAMPLE_BITS/8) {\n    (*(uint16_t *)(rec_buffer+i)) <<= VOLUME_GAIN;\n  }\n\n  // Write data to the WAV file\n  Serial.printf("Writing to the file ...\\n");\n  if (file.write(rec_buffer, record_size) != record_size)\n    Serial.printf("Write file Failed!\\n");\n\n  free(rec_buffer);\n  rec_buffer = NULL;\n  file.close();\n  Serial.printf("The recording is over.\\n");\n    \n  listDir(SD, "/", 0);\n\n  if(isWIFIConnected){\n    uploadFile();\n  }\n  \n  vTaskDelete(NULL);\n}\n\n\nvoid generate_wav_header(uint8_t *wav_header, uint32_t wav_size, uint32_t sample_rate)\n{\n  // See this for reference: http://soundfile.sapp.org/doc/WaveFormat/\n  uint32_t file_size = wav_size + WAV_HEADER_SIZE - 8;\n  uint32_t byte_rate = SAMPLE_RATE * SAMPLE_BITS / 8;\n  const uint8_t set_wav_header[] = {\n    \'R\', \'I\', \'F\', \'F\', // ChunkID\n    file_size, file_size >> 8, file_size >> 16, file_size >> 24, // ChunkSize\n    \'W\', \'A\', \'V\', \'E\', // Format\n    \'f\', \'m\', \'t\', \' \', // Subchunk1ID\n    0x10, 0x00, 0x00, 0x00, // Subchunk1Size (16 for PCM)\n    0x01, 0x00, // AudioFormat (1 for PCM)\n    0x01, 0x00, // NumChannels (1 channel)\n    sample_rate, sample_rate >> 8, sample_rate >> 16, sample_rate >> 24, // SampleRate\n    byte_rate, byte_rate >> 8, byte_rate >> 16, byte_rate >> 24, // ByteRate\n    0x02, 0x00, // BlockAlign\n    0x10, 0x00, // BitsPerSample (16 bits)\n    \'d\', \'a\', \'t\', \'a\', // Subchunk2ID\n    wav_size, wav_size >> 8, wav_size >> 16, wav_size >> 24, // Subchunk2Size\n  };\n  memcpy(wav_header, set_wav_header, sizeof(set_wav_header));\n}\n\n\nvoid listDir(fs::FS &fs, const char * dirname, uint8_t levels){\n    Serial.printf("Listing directory: %s\\n", dirname);\n\n    File root = fs.open(dirname);\n    if(!root){\n        Serial.println("Failed to open directory");\n        return;\n    }\n    if(!root.isDirectory()){\n        Serial.println("Not a directory");\n        return;\n    }\n\n    File file = root.openNextFile();\n    while(file){\n        if(file.isDirectory()){\n            Serial.print("  DIR : ");\n            Serial.println(file.name());\n            if(levels){\n                listDir(fs, file.path(), levels -1);\n            }\n        } else {\n            Serial.print("  FILE: ");\n            Serial.print(file.name());\n            Serial.print("  SIZE: ");\n            Serial.println(file.size());\n        }\n        file = root.openNextFile();\n    }\n}\n\nvoid wifiConnect(void *pvParameters){\n  isWIFIConnected = false;\n  char* ssid = "wifi-ssid";\n  char* password = "wifi-password";\n  Serial.print("Try to connect to ");\n  Serial.println(ssid);\n  WiFi.begin(ssid, password);\n  while(WiFi.status() != WL_CONNECTED){\n    vTaskDelay(500);\n    Serial.print(".");\n  }\n  Serial.println("Wi-Fi Connected!");\n  isWIFIConnected = true;\n  while(true){\n    vTaskDelay(1000);\n  }\n}\n\nvoid uploadFile(){\n  file = SD.open(filename, FILE_READ);\n  if(!file){\n    Serial.println("FILE IS NOT AVAILABLE!");\n    return;\n  }\n\n  Serial.println("===> Upload FILE to Node.js Server");\n\n  HTTPClient client;\n  client.begin("http://192.168.1.208:8888/uploadAudio");\n  client.addHeader("Content-Type", "audio/wav");\n  int httpResponseCode = client.sendRequest("POST", &file, file.size());\n  Serial.print("httpResponseCode : ");\n  Serial.println(httpResponseCode);\n\n  if(httpResponseCode == 200){\n    String response = client.getString();\n    Serial.println("==================== Transcription ====================");\n    Serial.println(response);\n    Serial.println("====================      End      ====================");\n  }else{\n    Serial.println("Error");\n  }\n  file.close();\n  client.end();\n}\n'))),(0,r.yg)("p",null,"\u5728\u7f16\u8bd1\u548c\u4e0a\u4f20\u793a\u4f8b\u7a0b\u5e8f\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u66f4\u6539\u4e00\u4e9b\u5185\u5bb9\u4ee5\u9002\u5e94\u60a8\u7684\u60c5\u51b5\u3002"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"\u5f55\u97f3\u65f6\u95f4")," - On ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/404007a16f42495576d729848d00c6bb6a8149fc/XIAOESP32S3-RECORD-UPLOAD/XIAOESP32S3-RECORD-UPLOAD.ino#LL13C2-L13C2"},"line 13")," of the code, the default recording time is set to 10 seconds, you can adjust this recording time to suit you, up to a maximum of 240 seconds."),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"\u4fdd\u5b58\u7684\u5f55\u97f3\u6587\u4ef6\u540d\u79f0")," - On ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/404007a16f42495576d729848d00c6bb6a8149fc/XIAOESP32S3-RECORD-UPLOAD/XIAOESP32S3-RECORD-UPLOAD.ino#L19"},"line 19")," of the code, you can change a name for your recording file."),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"WiFi \u7f51\u7edc\u540d\u79f0")," - Change the network name of the code ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/404007a16f42495576d729848d00c6bb6a8149fc/XIAOESP32S3-RECORD-UPLOAD/XIAOESP32S3-RECORD-UPLOAD.ino#L172"},"line 172")," to the name of the network under the same LAN as the host where you are deploying Google Cloud Services."),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"WiFi \u7f51\u7edc\u5bc6\u7801")," - On ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/404007a16f42495576d729848d00c6bb6a8149fc/XIAOESP32S3-RECORD-UPLOAD/XIAOESP32S3-RECORD-UPLOAD.ino#LL173C5-L173C5"},"line 172")," of the code, change the password corresponding to the network."),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"\u4e3b\u673aIP\u5730\u5740")," - \u5728\u4ee3\u7801\u7684",(0,r.yg)("a",{parentName:"li",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/404007a16f42495576d729848d00c6bb6a8149fc/XIAOESP32S3-RECORD-UPLOAD/XIAOESP32S3-RECORD-UPLOAD.ino#LL198C7-L198C7"},"\u7b2c198\u884c"),"\u4e2d\uff0c\u9700\u8981\u5c06\u8fd9\u91cc\u7684IP\u5730\u5740\u66f4\u6539\u4e3a\u60a8\u7684\u4e3b\u673aIP\u5730\u5740\uff0c\u5e76\u4fdd\u6301\u7aef\u53e3\u53f7\u4e3a8888\u3002")),(0,r.yg)("p",null,"\u4e00\u65e6\u4f60\u6539\u53d8\u4e86\u7a0b\u5e8f\uff0c\u4ee5\u9002\u5e94\u4f60\u7684\u9700\u8981\uff0c\u4e0a\u4f20\u5b83\uff0c\u4f60\u53ef\u4ee5\u6253\u5f00\u4e32\u884c\u76d1\u89c6\u5668\uff0c\u5e76\u5f00\u59cb\u51c6\u5907\u8bb0\u5f55\u4f60\u60f3\u8bf4\u7684\u3002\u5341\u79d2\u5f55\u97f3\u540e\uff0c\u8c37\u6b4c\u4e91\u5c06\u5bf9\u60a8\u7684\u5f55\u97f3\u6587\u4ef6\u8fdb\u884c\u5206\u6790\uff0c\u5e76\u5c06\u8bc6\u522b\u7ed3\u679c\u8fd4\u56de\u7ed9\u60a8\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"<https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/15.png>",style:{width:1e3,height:"auto"}})),(0,r.yg)("h2",{id:"\u5728xiao-esp32s3-sense\u4e0a\u90e8\u7f72chatgpt"},"\u5728XIAO ESP32S3 Sense\u4e0a\u90e8\u7f72ChatGPT"),(0,r.yg)("p",null,"\u63a5\u4e0b\u6765\u6211\u4eec\u589e\u52a0\u96be\u5ea6\u3002\u7ee7\u7eed\u5411\u4ee3\u7801\u4e2d\u6dfb\u52a0ChatGPT\u8c03\u7528\u3002"),(0,r.yg)("h3",{id:"\u6b65\u9aa4-12\u7528\u6807\u8bc6\u7684\u6587\u672c\u5411chatgpt\u63d0\u51fa\u4e00\u4e2a\u95ee\u9898"},"\u6b65\u9aa4 12.\u7528\u6807\u8bc6\u7684\u6587\u672c\u5411ChatGPT\u63d0\u51fa\u4e00\u4e2a\u95ee\u9898"),(0,r.yg)("p",null,"\u5728\u9879\u76ee\u6587\u4ef6\u5939 ",(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("a",{parentName:"strong",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/main/XIAOESP32S3-SPEECH-TO-CHATGPT/XIAOESP32S3-SPEECH-TO-CHATGPT.ino"},"XIAOESP32S3-SPEECH-TO-CHATGPT"))," \u6211\u4eec\u5df2\u7ecf\u4e3a\u672c\u8282\u4e2d\u7684\u793a\u4f8b\u51c6\u5907\u4e86\u7a0b\u5e8f\u3002"),(0,r.yg)("details",null,(0,r.yg)("summary",null,"\u5355\u51fb\u4ee5\u9884\u89c8\u5b8c\u6574\u7a0b\u5e8f"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <I2S.h>\n#include <WiFi.h>\n#include <HTTPClient.h>\n#include <WiFiClientSecure.h>\n#include <ArduinoJson.h>\n#include <ChatGPT.hpp>\n#include "FS.h"\n#include "SD.h"\n#include "SPI.h"\n\n// Variables to be used in the recording program, do not change for best\n#define SAMPLE_RATE 16000U\n#define SAMPLE_BITS 16\n#define WAV_HEADER_SIZE 44\n#define VOLUME_GAIN 2\n#define RECORD_TIME 5  // seconds, The maximum value is 240\n\nconst char* ssid = "wifi-ssid";\nconst char* password = "wifi-password";\n\n\n// Number of bytes required for the recording buffer\nuint32_t record_size = (SAMPLE_RATE * SAMPLE_BITS / 8) * RECORD_TIME;\n\nFile file;\nconst char filename[] = "/recording.wav";\nbool isWIFIConnected;\n\nString chatgpt_Q;\n\nTaskHandle_t chatgpt_handle;\nWiFiClientSecure client;\nChatGPT<WiFiClientSecure> chat_gpt(&client, "v1", "OpenAI-TOKEN");\n\n//*****************************************Arduino Base******************************************//\n\nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(115200);\n  while (!Serial) ;\n  \n  I2S.setAllPins(-1, 42, 41, -1, -1);\n  \n  // The transmission mode is PDM_MONO_MODE, which means that PDM (pulse density modulation) mono mode is used for transmission\n  if (!I2S.begin(PDM_MONO_MODE, SAMPLE_RATE, SAMPLE_BITS)) {\n    Serial.println("Failed to initialize I2S!");\n    while (1) ;\n  }\n\n  if(!SD.begin(D2)){\n    Serial.println("Failed to mount SD Card!");\n    while (1) ;\n  }\n\n  xTaskCreate(wifiConnect, "wifi_Connect", 4096, NULL, 0, NULL);\n  delay(500);\n  xTaskCreate(i2s_adc, "i2s_adc", 1024 * 8, NULL, 1, NULL);\n  xTaskCreate(chatgpt, "chatgpt", 1024 * 8, NULL, 2, &chatgpt_handle);\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n}\n\n//*****************************************RTOS TASK******************************************//\n\nvoid i2s_adc(void *arg)\n{\n  while(1){\n    uint32_t sample_size = 0;\n  \n    // This variable will be used to point to the actual recording buffer\n    uint8_t *rec_buffer = NULL;\n    Serial.printf("Ready to start recording ...\\n");\n  \n    File file = SD.open(filename, FILE_WRITE);\n  \n    // Write the header to the WAV file\n    uint8_t wav_header[WAV_HEADER_SIZE];\n  \n    // Write the WAV file header information to the wav_header array\n    generate_wav_header(wav_header, record_size, SAMPLE_RATE);\n  \n    // Call the file.write() function to write the data in the wav_header array to the newly created WAV file\n    file.write(wav_header, WAV_HEADER_SIZE);\n  \n    // This code uses the ESP32\'s PSRAM (external cache memory) to dynamically allocate a section of memory to store the recording data\n    rec_buffer = (uint8_t *)ps_malloc(record_size);\n    if (rec_buffer == NULL) {\n      Serial.printf("malloc failed!\\n");\n      while(1) ;\n    }\n    Serial.printf("Buffer: %d bytes\\n", ESP.getPsramSize() - ESP.getFreePsram());\n  \n    // Start recording\n    // I2S port number (in this case I2S_NUM_0), \n    // a pointer to the buffer to which the data is to be written (i.e. rec_buffer),\n    // the size of the data to be read (i.e. record_size),\n    // a pointer to a variable that points to the actual size of the data being read (i.e. &sample_size),\n    // and the maximum time to wait for the data to be read (in this case portMAX_DELAY, indicating an infinite wait time).\n    esp_i2s::i2s_read(esp_i2s::I2S_NUM_0, rec_buffer, record_size, &sample_size, portMAX_DELAY);\n    if (sample_size == 0) {\n      Serial.printf("Record Failed!\\n");\n    } else {\n      Serial.printf("Record %d bytes\\n", sample_size);\n    }\n  \n    // Increase volume\n    for (uint32_t i = 0; i < sample_size; i += SAMPLE_BITS/8) {\n      (*(uint16_t *)(rec_buffer+i)) <<= VOLUME_GAIN;\n    }\n  \n    // Write data to the WAV file\n    Serial.printf("Writing to the file ...\\n");\n    if (file.write(rec_buffer, record_size) != record_size)\n      Serial.printf("Write file Failed!\\n");\n  \n    free(rec_buffer);\n    rec_buffer = NULL;\n    file.close();\n    Serial.printf("The recording is over.\\n");\n      \n    listDir(SD, "/", 0);\n\n    bool uploadStatus = false;\n  \n    if(isWIFIConnected){\n      uploadStatus = uploadFile();\n    }\n    \n    if(uploadStatus)\n      xTaskNotifyGive(chatgpt_handle);\n    vTaskDelay(10000);       // Each recording is spaced 10s apart\n  }\n//  vTaskDelete(NULL);\n}\n\nvoid wifiConnect(void *pvParameters){\n  isWIFIConnected = false;\n  Serial.print("Try to connect to ");\n  Serial.println(ssid);\n  WiFi.begin(ssid, password);\n  while(WiFi.status() != WL_CONNECTED){\n    vTaskDelay(500);\n    Serial.print(".");\n  }\n  Serial.println("Wi-Fi Connected!");\n  isWIFIConnected = true;\n  // Ignore SSL certificate validation\n  client.setInsecure();\n  while(true){\n    vTaskDelay(1000);\n  }\n}\n\nvoid chatgpt(void *pvParameters){\n  while(1){\n    // Waiting for notification signal from Task 1\n    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);\n\n    String result;\n    if (chat_gpt.simple_message("gpt-3.5-turbo-0301", "user", chatgpt_Q, result)) {\n      Serial.println("===OK===");\n      Serial.println(result);\n    } else {\n      Serial.println("===ERROR===");\n      Serial.println(result);\n    }\n\n  }\n}\n\n//*****************************************Audio Process******************************************//\n\nvoid generate_wav_header(uint8_t *wav_header, uint32_t wav_size, uint32_t sample_rate)\n{\n  // See this for reference: http://soundfile.sapp.org/doc/WaveFormat/\n  uint32_t file_size = wav_size + WAV_HEADER_SIZE - 8;\n  uint32_t byte_rate = SAMPLE_RATE * SAMPLE_BITS / 8;\n  const uint8_t set_wav_header[] = {\n    \'R\', \'I\', \'F\', \'F\', // ChunkID\n    file_size, file_size >> 8, file_size >> 16, file_size >> 24, // ChunkSize\n    \'W\', \'A\', \'V\', \'E\', // Format\n    \'f\', \'m\', \'t\', \' \', // Subchunk1ID\n    0x10, 0x00, 0x00, 0x00, // Subchunk1Size (16 for PCM)\n    0x01, 0x00, // AudioFormat (1 for PCM)\n    0x01, 0x00, // NumChannels (1 channel)\n    sample_rate, sample_rate >> 8, sample_rate >> 16, sample_rate >> 24, // SampleRate\n    byte_rate, byte_rate >> 8, byte_rate >> 16, byte_rate >> 24, // ByteRate\n    0x02, 0x00, // BlockAlign\n    0x10, 0x00, // BitsPerSample (16 bits)\n    \'d\', \'a\', \'t\', \'a\', // Subchunk2ID\n    wav_size, wav_size >> 8, wav_size >> 16, wav_size >> 24, // Subchunk2Size\n  };\n  memcpy(wav_header, set_wav_header, sizeof(set_wav_header));\n}\n\n//*****************************************File Process******************************************//\n\nvoid listDir(fs::FS &fs, const char * dirname, uint8_t levels){\n    Serial.printf("Listing directory: %s\\n", dirname);\n\n    File root = fs.open(dirname);\n    if(!root){\n        Serial.println("Failed to open directory");\n        return;\n    }\n    if(!root.isDirectory()){\n        Serial.println("Not a directory");\n        return;\n    }\n\n    File file = root.openNextFile();\n    while(file){\n        if(file.isDirectory()){\n            Serial.print("  DIR : ");\n            Serial.println(file.name());\n            if(levels){\n                listDir(fs, file.path(), levels -1);\n            }\n        } else {\n            Serial.print("  FILE: ");\n            Serial.print(file.name());\n            Serial.print("  SIZE: ");\n            Serial.println(file.size());\n        }\n        file = root.openNextFile();\n    }\n}\n\nbool uploadFile(){\n  file = SD.open(filename, FILE_READ);\n  if(!file){\n    Serial.println("FILE IS NOT AVAILABLE!");\n    return false;\n  }\n\n  Serial.println("===> Upload FILE to Node.js Server");\n\n  HTTPClient client;\n  client.begin("http://192.168.1.208:8888/uploadAudio");\n  client.addHeader("Content-Type", "audio/wav");\n  int httpResponseCode = client.sendRequest("POST", &file, file.size());\n  Serial.print("httpResponseCode : ");\n  Serial.println(httpResponseCode);\n\n  if(httpResponseCode == 200){\n    String response = client.getString();\n    Serial.println("==================== Transcription ====================");\n    Serial.println(response);\n    chatgpt_Q = response;\n    Serial.println("====================      End      ====================");\n    file.close();\n    client.end();\n    return true;\n  }else{\n    Serial.println("Error");\n    return false;\n  }\n  \n}\n'))),(0,r.yg)("p",null,"\u540c\u6837\uff0c\u5728\u4f7f\u7528\u8fd9\u4e2a\u7a0b\u5e8f\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u6839\u636e\u9700\u8981\u5bf9\u4ee3\u7801\u8fdb\u884c\u4ee5\u4e0b\u66f4\u6539"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"WiFi\u7f51\u7edc\u540d\u79f0"),"\u2014\u5c06\u4ee3\u7801",(0,r.yg)("a",{parentName:"p",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/404007a16f42495576d729848d00c6bb6a8149fc/XIAOESP32S3-SPEECH-TO-CHATGPT/XIAOESP32S3-SPEECH-TO-CHATGPT.ino#L18"},"\u7b2c18\u884c"),"\u7684\u7f51\u7edc\u540d\u79f0\u66f4\u6539\u4e3a\u4e0e\u90e8\u7f72\u8c37\u6b4c\u4e91\u670d\u52a1\u7684\u4e3b\u673a\u5728\u540c\u4e00\u5c40\u57df\u7f51\u4e0b\u7684\u7f51\u7edc\u540d\u79f0\u3002")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"WiFi\u7f51\u7edc\u5bc6\u7801")," -\u5728",(0,r.yg)("a",{parentName:"p",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/404007a16f42495576d729848d00c6bb6a8149fc/XIAOESP32S3-SPEECH-TO-CHATGPT/XIAOESP32S3-SPEECH-TO-CHATGPT.ino#LL19C40-L19C40"},"\u7b2c19\u884c"),"\u7684\u4ee3\u7801\u4e2d\uff0c\u4fee\u6539\u5bf9\u5e94\u7684\u7f51\u7edc\u5bc6\u7801\u3002"))),(0,r.yg)("p",null,"3.",(0,r.yg)("strong",{parentName:"p"},"\u4e3b\u673aIP\u5730\u5740"),"\u2014\u5728\u4ee3\u7801\u7684",(0,r.yg)("a",{parentName:"p",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/404007a16f42495576d729848d00c6bb6a8149fc/XIAOESP32S3-SPEECH-TO-CHATGPT/XIAOESP32S3-SPEECH-TO-CHATGPT.ino#LL241C7-L241C7"},"\u7b2c241\u884c"),"\u4e2d\uff0c\u60a8\u9700\u8981\u5c06\u8fd9\u91cc\u7684IP\u5730\u5740\u66f4\u6539\u4e3a\u60a8\u7684\u4e3b\u673aIP\u5730\u5740\uff0c\u5e76\u4fdd\u6301\u7aef\u53e3\u53f7\u4e3a8888\u3002"),(0,r.yg)("ol",{start:4},(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"OpenAI API\u4ee4\u724c"),"\u2014\u7531\u4e8e\u9700\u8981\u8c03\u7528ChatGPT\u63a5\u53e3\uff0c\u56e0\u6b64\u9700\u8981\u51c6\u5907OpenAI\u4ee4\u724c\u5e76\u5c06\u5176\u586b\u5145\u5230\u4ee3\u7801",(0,r.yg)("a",{parentName:"li",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/404007a16f42495576d729848d00c6bb6a8149fc/XIAOESP32S3-SPEECH-TO-CHATGPT/XIAOESP32S3-SPEECH-TO-CHATGPT.ino#L33"},"\u7b2c33\u884c"),"\u4e2d\u3002\u5982\u679c\u8fd9\u662f\u60a8\u7b2c\u4e00\u6b21\u4f7f\u7528\u4ee4\u724c\uff0c\u60a8\u53ef\u4ee5\u9605\u8bfb",(0,r.yg)("a",{parentName:"li",href:"https://wiki.seeedstudio.com/xiaoesp32c3-chatgpt/#submit-questions-via-the-built-in-web-page"},"\u6b64Wiki\u7684\u5185\u5bb9"),"\u4ee5\u4e86\u89e3\u5982\u4f55\u83b7\u53d6\u5b83\u4eec\u3002")),(0,r.yg)("p",null,"\u4fee\u6539\u540e\uff0c\u4e0a\u4f20\u7a0b\u5e8f\u5e76\u6253\u5f00\u4e32\u884c\u76d1\u89c6\u5668\u3002\u5f55\u5236\u4e4b\u540e\uff0c\u4f60\u4f1a\u770b\u5230ChatGPT\u8fd4\u56de\u7684\u7b54\u6848\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"<https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/16.png>",style:{width:1e3,height:"auto"}})),(0,r.yg)("h2",{id:"\u5c4f\u5e55\u663e\u793a\u5185\u5bb9\u8bbe\u8ba1\u4e0e\u8282\u76ee\u6574\u5408"},"\u5c4f\u5e55\u663e\u793a\u5185\u5bb9\u8bbe\u8ba1\u4e0e\u8282\u76ee\u6574\u5408"),(0,r.yg)("p",null,"\u6700\u540e\uff0c\u6211\u4eec\u6dfb\u52a0\u4e00\u4e9b\u66f4\u82b1\u54e8\u7684\u4e1c\u897f\u3002\u6211\u4eec\u6ca1\u6709\u4f7f\u7528\u4e32\u884c\u663e\u793a\u5668\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e0d\u592a\u9002\u5408\u663e\u793a\u6548\u679c\u7684\u754c\u9762\uff0c\u800c\u662f\u4f7f\u7528\u89e6\u6478\u5c4f\u6765\u5b9e\u73b0\u89e6\u6478\u548c\u70b9\u51fb\u529f\u80fd\u3002"),(0,r.yg)("h3",{id:"\u6b65\u9aa4-13\u4f7f\u7528squareline-studio\u7ed8\u5236\u663e\u793a\u5c4f"},"\u6b65\u9aa4 13.\u4f7f\u7528SquareLine Studio\u7ed8\u5236\u663e\u793a\u5c4f"),(0,r.yg)("p",null,"SquareLine Studio\u662f\u7531\u5d4c\u5165\u5f0f\u7cfb\u7edf\u56fe\u5f62\u5e93LVGL\u5f00\u53d1\u7684GUI\u8bbe\u8ba1\u5de5\u5177\u3002SquareLine Studio\u65e8\u5728\u5e2e\u52a9\u5f00\u53d1\u4eba\u5458\u5feb\u901f\u6709\u6548\u5730\u4e3a\u4ed6\u4eec\u7684\u5d4c\u5165\u5f0f\u7cfb\u7edf\u521b\u5efa\u548c\u8bbe\u8ba1\u7528\u6237\u754c\u9762\u3002\u5b83\u4e3a\u8bbe\u8ba1ui\u63d0\u4f9b\u4e86\u62d6\u653e\u754c\u9762\uff0c\u5e76\u4e14\u652f\u6301\u5404\u79cd\u90e8\u4ef6\u548c\u4e3b\u9898\u3002"),(0,r.yg)("p",null,"\u6240\u4ee5\u6211\u4eec\u5efa\u8bae\u4f60\u4f7f\u7528\u8fd9\u4e2a\u5de5\u5177\u6765\u8bbe\u8ba1\u8fd9\u6837\u7b80\u5355\u7684\u754c\u9762\u3002\u5982\u679c\u4f60\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8eSquareLine Studio\u4e2d\u5706\u5f62\u663e\u793a\u7684\u4f7f\u7528\uff0c\u4f60\u53ef\u4ee5\u53bb\u6211\u4eec\u7684\u4f7f\u7528",(0,r.yg)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/using_lvgl_and_tft_on_round_display/#drawing-complex-ui-interfaces-with-squareline-studio"},"Wiki"),"\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"<https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/21.png>",style:{width:1e3,height:"auto"}})),(0,r.yg)("p",null,"\u7531\u4e8e\u7bc7\u5e45\u7684\u539f\u56e0\uff0c\u672c\u6587\u5c06\u4e0d\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4f55\u8bbe\u8ba1\u663e\u793a\u9875\u9762\uff0c\u4f46\u6211\u4eec\u5c06\u63d0\u4f9b\u5bfc\u51fa\u7684\u7a0b\u5e8f\u4ee3\u7801\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u3002\u5b83\u76ee\u524d\u4f4d\u4e8e",(0,r.yg)("a",{parentName:"p",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/tree/main/ui"},"\u9879\u76ee\u6587\u4ef6\u5939"),"\u4e0b\u7684",(0,r.yg)("strong",{parentName:"p"},"ui"),"\u6587\u4ef6\u5939\u4e2d\u3002"),(0,r.yg)("p",null,":::\u63d0\u9192\n\u6211\u4eec\u63a8\u8350\u4f60\u4f7f\u7528SquareLine Studio\u7684",(0,r.yg)("strong",{parentName:"p"},"v1.2.3"),"\u7248\u672c\u3002\u7ecf\u8fc7\u6d4b\u8bd5\uff0cv1.3.0\u7248\u672c\u53ef\u80fd\u5b58\u5728\u4e0etft_eSPI\u5e93\u7684\u517c\u5bb9\u6027\u95ee\u9898\u3002\n:::"),(0,r.yg)("h3",{id:"\u6b65\u9aa4-14-\u96c6\u6210\u8fc7\u7a0b"},"\u6b65\u9aa4 14. \u96c6\u6210\u8fc7\u7a0b"),(0,r.yg)("p",null,"\u6700\u7ec8\u7684\u5b8c\u6574\u9879\u76ee\u4ee3\u7801\u5728 ",(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("a",{parentName:"strong",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/main/XIAOESP32S3-SPEECH-CHATGPT-COMPLETE/XIAOESP32S3-SPEECH-CHATGPT-COMPLETE.ino"},"XIAOESP32S3-SPEECH-CHATGPT-COMPLETE"))," \u6587\u4ef6\u5939\u4e2d\u3002"),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Click to preview the full program"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <lvgl.h>\n#include <TFT_eSPI.h>\n#include "ui.h"\n#include <WiFi.h>\n#include <WiFiClientSecure.h>\n#include <ArduinoJson.h>\n#include <ChatGPT.hpp>\n#include <I2S.h>\n#include <HTTPClient.h>\n#include "FS.h"\n#include "SD.h"\n#include "SPI.h"\n\n\n// Import the library for the round display and define the frame used as the TFT display frame\n#define USE_TFT_ESPI_LIBRARY\n#include "lv_xiao_round_screen.h"\n\n\n/*Change to your screen resolution*/\nstatic const uint16_t screenWidth  = 240;\nstatic const uint16_t screenHeight = 240;\n\n\n// Variables to be used in the recording program, do not change for best\n#define SAMPLE_RATE 16000U\n#define SAMPLE_BITS 16\n#define WAV_HEADER_SIZE 44\n#define VOLUME_GAIN 2\n#define RECORD_TIME 5  // seconds, The maximum value is 240\n\n\n// Number of bytes required for the recording buffer\nuint32_t record_size = (SAMPLE_RATE * SAMPLE_BITS / 8) * RECORD_TIME;\n\n\n// Name of the file in which the recording is saved\nFile file;\nconst char filename[] = "/recording.wav";\n\n\n// Network connection status flag\nbool isWIFIConnected;\n\n\n// Answers to the questions chatgpt replied to\nString response;\n\n\n// Flags for different task starts\nbool recordTask = false;\nbool chatgptTask = false;\n\nWiFiClientSecure client;\nChatGPT<WiFiClientSecure> chat_gpt(&client, "v1", "OpenAI-TOKEN");   // Please fill in your OpenAI key\n\n\n// Please change to your network\nconst char* ssid = "wifi-ssid";\nconst char* password = "wifi-password";\n\nstatic lv_disp_draw_buf_t draw_buf;\nstatic lv_color_t buf[ screenWidth * screenHeight / 10 ];\n\n\n//****************************************LVGL****************************************************//\n\n#if LV_USE_LOG != 0\n/* Serial debugging */\nvoid my_print(const char * buf)\n{\n    Serial.printf(buf);\n    Serial.flush();\n}\n#endif\n\n/* Display flushing */\nvoid my_disp_flush( lv_disp_drv_t *disp, const lv_area_t *area, lv_color_t *color_p )\n{\n    uint32_t w = ( area->x2 - area->x1 + 1 );\n    uint32_t h = ( area->y2 - area->y1 + 1 );\n\n    tft.startWrite();\n    tft.setAddrWindow( area->x1, area->y1, w, h );\n    tft.pushColors( ( uint16_t * )&color_p->full, w * h, true );\n    tft.endWrite();\n\n    lv_disp_flush_ready( disp );\n}\n\n/*Read the touchpad*/\nvoid my_touchpad_read( lv_indev_drv_t * indev_driver, lv_indev_data_t * data )\n{\n    // uint16_t touchX = 0, touchY = 0;\n    // bool touched = false;//tft.getTouch( &touchX, &touchY, 600 );\n\n    lv_coord_t touchX, touchY;\n    chsc6x_get_xy(&touchX, &touchY);\n\n    // if( !touched )\n    if(!chsc6x_is_pressed())\n    {\n        data->state = LV_INDEV_STATE_REL;\n    }\n    else\n    {\n        data->state = LV_INDEV_STATE_PR;\n\n        /*Set the coordinates*/\n        data->point.x = touchX;\n        data->point.y = touchY;\n\n//        Serial.print( "Data x " );\n//        Serial.println( touchX );\n//\n//        Serial.print( "Data y " );\n//        Serial.println( touchY );\n\n        // You can also start recording by uncommenting and configuring by clicking on the logo\n//        if((touchX < 240 && touchX > 230) && (touchY < 120 && touchY > 100)){\n          recordTask = true;\n//        }\n    }\n}\n\n//****************************************Arduino Base****************************************************//\n\nvoid setup()\n{\n    Serial.begin( 115200 ); /* prepare for possible serial debug */\n//    while(!Serial);\n\n    pinMode(TOUCH_INT, INPUT_PULLUP);\n    Wire.begin();\n\n    String LVGL_Arduino = "Hello Arduino! ";\n    LVGL_Arduino += String(\'V\') + lv_version_major() + "." + lv_version_minor() + "." + lv_version_patch();\n\n    Serial.println( LVGL_Arduino );\n    Serial.println( "I am LVGL_Arduino" );\n\n    lv_init();\n\n#if LV_USE_LOG != 0\n    lv_log_register_print_cb( my_print ); /* register print function for debugging */\n#endif\n\n    tft.begin();          /* TFT init */\n    tft.setRotation( 0 ); /* Landscape orientation, flipped */\n\n    lv_disp_draw_buf_init( &draw_buf, buf, NULL, screenWidth * screenHeight / 10 );\n\n    /*Initialize the display*/\n    static lv_disp_drv_t disp_drv;\n    lv_disp_drv_init( &disp_drv );\n    /*Change the following line to your display resolution*/\n    disp_drv.hor_res = screenWidth;\n    disp_drv.ver_res = screenHeight;\n    disp_drv.flush_cb = my_disp_flush;\n    disp_drv.draw_buf = &draw_buf;\n    lv_disp_drv_register( &disp_drv );\n\n    /*Initialize the (dummy) input device driver*/\n    static lv_indev_drv_t indev_drv;\n    lv_indev_drv_init( &indev_drv );\n    indev_drv.type = LV_INDEV_TYPE_POINTER;\n    indev_drv.read_cb = my_touchpad_read;\n    lv_indev_drv_register( &indev_drv );\n\n    ui_init();\n\n    I2S.setAllPins(-1, 42, 41, -1, -1);\n  \n    //The transmission mode is PDM_MONO_MODE, which means that PDM (pulse density modulation) mono mode is used for transmission\n    if (!I2S.begin(PDM_MONO_MODE, SAMPLE_RATE, SAMPLE_BITS)) {\n        Serial.println("Failed to initialize I2S!");\n        while (1) ;\n    }\n\n    if(!SD.begin(D2)){\n        Serial.println("Failed to mount SD Card!");\n        while (1) ;\n    }\n\n    Serial.println( "Setup done" );\n\n    // Create a FreeRTOS task to check the connection status of the network at regular intervals.\n    xTaskCreate(wifiConnect, "wifi_Connect", 4096, NULL, 0, NULL);\n}\n\nvoid loop()\n{\n    lv_timer_handler(); /* let the GUI do its work */\n    record();\n    chatgpt();\n    delay(5);\n}\n\n//*****************************************Audio Process******************************************//\n\nvoid generate_wav_header(uint8_t *wav_header, uint32_t wav_size, uint32_t sample_rate)\n{\n  // See this for reference: http://soundfile.sapp.org/doc/WaveFormat/\n  uint32_t file_size = wav_size + WAV_HEADER_SIZE - 8;\n  uint32_t byte_rate = SAMPLE_RATE * SAMPLE_BITS / 8;\n  const uint8_t set_wav_header[] = {\n    \'R\', \'I\', \'F\', \'F\', // ChunkID\n    file_size, file_size >> 8, file_size >> 16, file_size >> 24, // ChunkSize\n    \'W\', \'A\', \'V\', \'E\', // Format\n    \'f\', \'m\', \'t\', \' \', // Subchunk1ID\n    0x10, 0x00, 0x00, 0x00, // Subchunk1Size (16 for PCM)\n    0x01, 0x00, // AudioFormat (1 for PCM)\n    0x01, 0x00, // NumChannels (1 channel)\n    sample_rate, sample_rate >> 8, sample_rate >> 16, sample_rate >> 24, // SampleRate\n    byte_rate, byte_rate >> 8, byte_rate >> 16, byte_rate >> 24, // ByteRate\n    0x02, 0x00, // BlockAlign\n    0x10, 0x00, // BitsPerSample (16 bits)\n    \'d\', \'a\', \'t\', \'a\', // Subchunk2ID\n    wav_size, wav_size >> 8, wav_size >> 16, wav_size >> 24, // Subchunk2Size\n  };\n  memcpy(wav_header, set_wav_header, sizeof(set_wav_header));\n}\n\n//*****************************************File Process******************************************//\n\nvoid listDir(fs::FS &fs, const char * dirname, uint8_t levels){\n    Serial.printf("Listing directory: %s\\n", dirname);\n\n    File root = fs.open(dirname);\n    if(!root){\n        Serial.println("Failed to open directory");\n        return;\n    }\n    if(!root.isDirectory()){\n        Serial.println("Not a directory");\n        return;\n    }\n\n    File file = root.openNextFile();\n    while(file){\n        if(file.isDirectory()){\n            Serial.print("  DIR : ");\n            Serial.println(file.name());\n            if(levels){\n                listDir(fs, file.path(), levels -1);\n            }\n        } else {\n            Serial.print("  FILE: ");\n            Serial.print(file.name());\n            Serial.print("  SIZE: ");\n            Serial.println(file.size());\n        }\n        file = root.openNextFile();\n    }\n}\n\nbool uploadFile(){\n  file = SD.open(filename, FILE_READ);\n  if(!file){\n    Serial.println("FILE IS NOT AVAILABLE!");\n    return false;\n  }\n\n  Serial.println("===> Upload FILE to Node.js Server");\n\n  HTTPClient client;\n  client.begin("http://192.168.1.208:8888/uploadAudio");\n  client.addHeader("Content-Type", "audio/wav");\n  int httpResponseCode = client.sendRequest("POST", &file, file.size());\n  Serial.print("httpResponseCode : ");\n  Serial.println(httpResponseCode);\n\n  if(httpResponseCode == 200){\n    response = client.getString();\n    Serial.println("==================== Transcription ====================");\n    Serial.println(response);\n    const char* chatgpt_Q = response.c_str();\n    lv_label_set_text(ui_question, chatgpt_Q);\n    Serial.println("====================      End      ====================");\n    file.close();\n    client.end();\n    recordTask = false;\n    chatgptTask = true;\n    return true;\n  }else{\n    Serial.println("Error");\n    lv_label_set_text(ui_question, "Error");\n    recordTask = false;\n    chatgptTask = false;\n    return false;\n  }\n}\n\n\n//*****************************************Main Functions******************************************//\n\nvoid record(){\n  if(recordTask){\n    Serial.println("Record Task Begin!!!");\n    lv_label_set_text(ui_question, "Recording ...");\n    lv_timer_handler();\n    uint32_t sample_size = 0;\n    \n    // This variable will be used to point to the actual recording buffer\n    uint8_t *rec_buffer = NULL;\n    Serial.printf("Ready to start recording ...\\n");\n  \n    File file = SD.open(filename, FILE_WRITE);\n  \n    // Write the header to the WAV file\n    uint8_t wav_header[WAV_HEADER_SIZE];\n  \n    // Write the WAV file header information to the wav_header array\n    generate_wav_header(wav_header, record_size, SAMPLE_RATE);\n  \n    // Call the file.write() function to write the data in the wav_header array to the newly created WAV file\n    file.write(wav_header, WAV_HEADER_SIZE);\n  \n    // This code uses the ESP32\'s PSRAM (external cache memory) to dynamically allocate a section of memory to store the recording data.\n    rec_buffer = (uint8_t *)ps_malloc(record_size);\n    if (rec_buffer == NULL) {\n      Serial.printf("malloc failed!\\n");\n      while(1) ;\n    }\n    Serial.printf("Buffer: %d bytes\\n", ESP.getPsramSize() - ESP.getFreePsram());\n  \n    // Start recording\n    // I2S port number (in this case I2S_NUM_0), \n    // a pointer to the buffer to which the data is to be written (i.e. rec_buffer),\n    // the size of the data to be read (i.e. record_size),\n    // a pointer to a variable that points to the actual size of the data being read (i.e. &sample_size),\n    // and the maximum time to wait for the data to be read (in this case portMAX_DELAY, indicating an infinite wait time).\n    esp_i2s::i2s_read(esp_i2s::I2S_NUM_0, rec_buffer, record_size, &sample_size, portMAX_DELAY);\n    if (sample_size == 0) {\n      Serial.printf("Record Failed!\\n");\n    } else {\n      Serial.printf("Record %d bytes\\n", sample_size);\n    }\n  \n    // Increase volume\n    for (uint32_t i = 0; i < sample_size; i += SAMPLE_BITS/8) {\n      (*(uint16_t *)(rec_buffer+i)) <<= VOLUME_GAIN;\n    }\n  \n    // Write data to the WAV file\n    Serial.printf("Writing to the file ...\\n");\n    if (file.write(rec_buffer, record_size) != record_size)\n      Serial.printf("Write file Failed!\\n");\n  \n    free(rec_buffer);\n    rec_buffer = NULL;\n    file.close();\n    Serial.printf("The recording is over.\\n");\n    lv_label_set_text(ui_question, "Identifying ...");\n    lv_timer_handler();\n    listDir(SD, "/", 0);\n  \n    bool uploadStatus = false;\n  \n    if(isWIFIConnected){\n      uploadStatus = uploadFile();\n    }\n  }\n}\n\nvoid chatgpt(){\n  if(chatgptTask){\n    Serial.println("ChatGPT Task Begin!!!");\n    lv_label_set_text(ui_answer,"Answering ...");\n    lv_timer_handler();\n    String result;\n    if (chat_gpt.simple_message("gpt-3.5-turbo-0301", "user", response, result)) {\n      Serial.println("===OK===");\n      Serial.println(result);\n      const char* chatgpt_A = result.c_str();\n      lv_label_set_text(ui_answer, chatgpt_A);\n    } else {\n      Serial.println("===ERROR===");\n      Serial.println(result);\n      lv_label_set_text(ui_answer, "ERROR");\n      lv_timer_handler();\n    }\n    recordTask = false;\n    chatgptTask = false;\n  }\n}\n\n//*****************************************RTOS******************************************//\n\nvoid wifiConnect(void *pvParameters){\n  isWIFIConnected = false;\n  Serial.print("Try to connect to ");\n  Serial.println(ssid);\n  WiFi.begin(ssid, password);\n  while(WiFi.status() != WL_CONNECTED){\n    vTaskDelay(500);\n    Serial.print(".");\n  }\n  Serial.println("Wi-Fi Connected!");\n  isWIFIConnected = true;\n  // Ignore SSL certificate validation\n  client.setInsecure();\n  while(true){\n    vTaskDelay(1000);\n  }\n}\n'))),(0,r.yg)("p",null,"\u5728\u7f16\u8bd1\u548c\u4e0a\u4f20\u793a\u4f8b\u7a0b\u5e8f\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u66f4\u6539\u4e00\u4e9b\u5185\u5bb9\u4ee5\u9002\u5e94\u60a8\u7684\u60c5\u51b5\u3002"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"\u7f51\u7edc\u7684WiFi\u540d\u79f0"),"\u2014\u5c06\u4ee3\u7801",(0,r.yg)("a",{parentName:"p",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/404007a16f42495576d729848d00c6bb6a8149fc/XIAOESP32S3-SPEECH-TO-CHATGPT/XIAOESP32S3-SPEECH-TO-CHATGPT.ino#L18"},"\u7b2c18\u884c"),"\u7684\u7f51\u7edc\u540d\u79f0\u66f4\u6539\u4e3a\u4e0e\u90e8\u7f72\u8c37\u6b4c\u4e91\u670d\u52a1\u7684\u4e3b\u673a\u76f8\u540c\u5c40\u57df\u7f51\u4e0b\u7684\u7f51\u7edc\u540d\u79f0\u3002")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"WiFi\u7684\u7f51\u7edc\u5bc6\u7801"),"\u2014\u2014\u5728",(0,r.yg)("a",{parentName:"p",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/404007a16f42495576d729848d00c6bb6a8149fc/XIAOESP32S3-SPEECH-TO-CHATGPT/XIAOESP32S3-SPEECH-TO-CHATGPT.ino#LL19C40-L19C40"},"\u7b2c19\u884c"),"\u7684\u4ee3\u7801\u4e0a\uff0c\u4fee\u6539\u5bf9\u5e94\u7684\u7f51\u7edc\u5bc6\u7801\u3002"))),(0,r.yg)("p",null,"3.",(0,r.yg)("strong",{parentName:"p"},"\u4e3b\u673aIP\u5730\u5740"),"\u2014\u5728\u4ee3\u7801\u7684",(0,r.yg)("a",{parentName:"p",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/404007a16f42495576d729848d00c6bb6a8149fc/XIAOESP32S3-SPEECH-TO-CHATGPT/XIAOESP32S3-SPEECH-TO-CHATGPT.ino#LL241C7-L241C7"},"\u7b2c241\u884c"),"\u4e2d\uff0c\u9700\u8981\u5c06\u8fd9\u91cc\u7684IP\u5730\u5740\u66f4\u6539\u4e3a\u4e3b\u673aIP\u5730\u5740\uff0c\u5e76\u4fdd\u6301\u7aef\u53e3\u53f7\u4e3a8888\u3002"),(0,r.yg)("ol",{start:4},(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"OpenAI API\u4ee4\u724c"),"\u2014\u7531\u4e8e\u9700\u8981\u8c03\u7528ChatGPT\u63a5\u53e3\uff0c\u56e0\u6b64\u9700\u8981\u51c6\u5907OpenAI\u4ee4\u724c\u5e76\u5c06\u5176\u586b\u5145\u5230\u4ee3\u7801",(0,r.yg)("a",{parentName:"li",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/404007a16f42495576d729848d00c6bb6a8149fc/XIAOESP32S3-SPEECH-TO-CHATGPT/XIAOESP32S3-SPEECH-TO-CHATGPT.ino#L33"},"\u7b2c33\u884c"),"\u4e2d\u3002\u5982\u679c\u8fd9\u662f\u60a8\u7b2c\u4e00\u6b21\u4f7f\u7528\u4ee4\u724c\uff0c\u60a8\u53ef\u4ee5\u9605\u8bfb",(0,r.yg)("a",{parentName:"li",href:"https://wiki.seeedstudio.com/xiaoesp32c3-chatgpt/#submit-questions-via-the-built-in-web-page"},"\u6b64Wiki\u7684\u5185\u5bb9"),"\u4ee5\u4e86\u89e3\u5982\u4f55\u83b7\u53d6\u5b83\u4eec\u3002")),(0,r.yg)("p",null,"\u4e00\u65e6\u4f60\u4e0a\u4f20\u4e86\u7a0b\u5e8f\u5e76\u70b9\u51fb\u5c4f\u5e55\uff0c\u5f55\u5236\u4efb\u52a1\u5c06\u5f00\u59cb\uff0c\u8fd9\u65f6\u4f60\u53ef\u4ee5\u5bf9\u7740\u9ea6\u514b\u98ce\u8bf4\u51fa\u4f60\u60f3\u95ee\u7684\u95ee\u9898\u3002\u4e00\u65e6\u8bc6\u522b\u51fa\u7ed3\u679c\uff0c\u95ee\u9898\u5c31\u4f1a\u663e\u793a\u5728\u5c4f\u5e55\u7684\u4e0a\u534a\u90e8\u5206\u3002\u4e4b\u540e\uff0c\u6211\u4eec\u5c06\u7acb\u5373\u5f97\u5230ChatGPT\u7684\u7b54\u6848\uff0c\u5b83\u5c06\u663e\u793a\u5728\u5c4f\u5e55\u5e95\u90e8\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"<https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/22.jpg>",style:{width:600,height:"auto"}})),(0,r.yg)("h2",{id:"\u6280\u672f\u652f\u6301\u548c\u4ea7\u54c1\u8ba8\u8bba"},"\u6280\u672f\u652f\u6301\u548c\u4ea7\u54c1\u8ba8\u8bba"),(0,r.yg)("p",null,"\u611f\u8c22\u60a8\u9009\u62e9\u6211\u4eec\u7684\u4ea7\u54c1\uff01\u6211\u4eec\u4f1a\u4e3a\u60a8\u63d0\u4f9b\u5404\u79cd\u652f\u6301\uff0c\u4ee5\u786e\u4fdd\u60a8\u5728\u4f7f\u7528\u6211\u4eec\u4ea7\u54c1\u7684\u8fc7\u7a0b\u4e2d\u83b7\u5f97\u6700\u987a\u7545\u7684\u4f53\u9a8c\u3002\u6211\u4eec\u63d0\u4f9b\u591a\u79cd\u6c9f\u901a\u6e20\u9053\uff0c\u4ee5\u6ee1\u8db3\u60a8\u7684\u4e0d\u540c\u9700\u6c42\u548c\u504f\u597d\u3002"),(0,r.yg)("div",{class:"button_tech_support_container"},(0,r.yg)("a",{href:"https://forum.seeedstudio.com/",class:"button_forum"}),(0,r.yg)("a",{href:"https://www.seeedstudio.com/contacts",class:"button_email"})),(0,r.yg)("div",{class:"button_tech_support_container"},(0,r.yg)("a",{href:"https://discord.gg/eWkprNDMU7",class:"button_discord"}),(0,r.yg)("a",{href:"https://github.com/Seeed-Studio/wiki-documents/discussions/69",class:"button_discussion"})))}S.isMDXComponent=!0}}]);