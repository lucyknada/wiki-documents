"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[22191],{15680:(e,t,a)=>{a.d(t,{xA:()=>d,yg:()=>y});var n=a(96540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),g=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=g(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=g(a),m=r,y=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return a?n.createElement(y,i(i({ref:t},d),{},{components:a})):n.createElement(y,i({ref:t},d))}));function y(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var g=2;g<o;g++)i[g]=a[g];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},62173:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>g});var n=a(58168),r=(a(96540),a(15680));const o={description:"Introduction of how to develop mmWave Sensor on XIAO.",title:"Development of 24GHz mmWave in XIAO and Arduino",keywords:["mmwave","radar"],image:"https://files.seeedstudio.com/wiki/seeed_logo/logo_2023.png",slug:"/mmwave_for_xiao_arduino",last_update:{date:"11/13/2023",author:"Citric"}},i="Development of 24GHz mmWave Sensor in XIAO and Arduino",s={unversionedId:"Sensor/mmWave_radar_sensor/mmwave-for-XIAO/mmwave-for-xiao_arduino",id:"Sensor/mmWave_radar_sensor/mmwave-for-XIAO/mmwave-for-xiao_arduino",title:"Development of 24GHz mmWave in XIAO and Arduino",description:"Introduction of how to develop mmWave Sensor on XIAO.",source:"@site/docs/Sensor/mmWave_radar_sensor/mmwave-for-XIAO/mmwave-for-xiao_arduino.md",sourceDirName:"Sensor/mmWave_radar_sensor/mmwave-for-XIAO",slug:"/mmwave_for_xiao_arduino",permalink:"/mmwave_for_xiao_arduino",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/Sensor/mmWave_radar_sensor/mmwave-for-XIAO/mmwave-for-xiao_arduino.md",tags:[],version:"current",lastUpdatedBy:"Citric",lastUpdatedAt:1699833600,formattedLastUpdatedAt:"Nov 13, 2023",frontMatter:{description:"Introduction of how to develop mmWave Sensor on XIAO.",title:"Development of 24GHz mmWave in XIAO and Arduino",keywords:["mmwave","radar"],image:"https://files.seeedstudio.com/wiki/seeed_logo/logo_2023.png",slug:"/mmwave_for_xiao_arduino",last_update:{date:"11/13/2023",author:"Citric"}},sidebar:"ProductSidebar",previous:{title:"24GHz mmWave for XIAO",permalink:"/mmwave_for_xiao"},next:{title:"mmWave for XIAO to Home Assistant via Bluetooth",permalink:"/mmwave_for_xiao_to_ha_bt"}},l={},g=[{value:"Getting Started",id:"getting-started",level:2},{value:"Hardware Preparations",id:"hardware-preparations",level:3},{value:"Software Preparations",id:"software-preparations",level:3},{value:"Arduino Library Overview",id:"arduino-library-overview",level:2},{value:"Function",id:"function",level:3},{value:"Default Variables",id:"default-variables",level:3},{value:"Installation",id:"installation",level:3},{value:"XIAO Example",id:"xiao-example",level:2},{value:"Demo 1. Basic mode output",id:"demo-1-basic-mode-output",level:3},{value:"Demo 2. Engineering mode output",id:"demo-2-engineering-mode-output",level:3},{value:"Demo 3. Other configuration inquiry and restore factory settings",id:"demo-3-other-configuration-inquiry-and-restore-factory-settings",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Q1: I am using XIAO nRF52840 (Sense), which development board version should I choose?",id:"q1-i-am-using-xiao-nrf52840-sense-which-development-board-version-should-i-choose",level:3},{value:"Q2: Why am I getting dropped frames and garbled sensor data streams?",id:"q2-why-am-i-getting-dropped-frames-and-garbled-sensor-data-streams",level:3},{value:"Q3: Why does the data stream lag for 1~2 seconds when using Demo2?",id:"q3-why-does-the-data-stream-lag-for-12-seconds-when-using-demo2",level:3},{value:"Tech Support &amp; Product Discussion",id:"tech-support--product-discussion",level:2}],d={toc:g},u="wrapper";function p(e){let{components:t,...a}=e;return(0,r.yg)(u,(0,n.A)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"development-of-24ghz-mmwave-sensor-in-xiao-and-arduino"},"Development of 24GHz mmWave Sensor in XIAO and Arduino"),(0,r.yg)("p",null,"This section describes how to use the library and secondary development of mmWave for XIAO."),(0,r.yg)("admonition",{type:"caution"},(0,r.yg)("p",{parentName:"admonition"},"All contents of this Wiki apply only to 24GHz mmWave for XIAO and may not be used on other millimetre wave sensors.")),(0,r.yg)("h2",{id:"getting-started"},"Getting Started"),(0,r.yg)("h3",{id:"hardware-preparations"},"Hardware Preparations"),(0,r.yg)("p",null,"Before we begin the tutorial content of this article, we recommend that you purchase any of the XIAOs we currently have for sale in order to use the millimetre wave sensor."),(0,r.yg)("table",{align:"center"},(0,r.yg)("tr",null,(0,r.yg)("th",null,"Seeed Studio XIAO SAMD21"),(0,r.yg)("th",null,"Seeed Studio XIAO RP2040"),(0,r.yg)("th",null,"Seeed Studio XIAO nRF52840 (Sense)"),(0,r.yg)("th",null,"Seeed Studio XIAO ESP32C3"),(0,r.yg)("th",null,"Seeed Studio XIAO ESP32S3")),(0,r.yg)("tr",null,(0,r.yg)("td",null,(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/Seeeduino-XIAO/img/Seeeduino-XIAO-preview-1.jpg",style:{width:400,height:"auto"}}))),(0,r.yg)("td",null,(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/XIAO-RP2040/img/102010428_Preview-07.jpg",style:{width:500,height:"auto"}}))),(0,r.yg)("td",null,(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/round_display_for_xiao/xiaoblesense.jpg",style:{width:500,height:"auto"}}))),(0,r.yg)("td",null,(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/round_display_for_xiao/xiaoesp32c3.jpg",style:{width:450,height:"auto"}}))),(0,r.yg)("td",null,(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SeeedStudio-XIAO-ESP32S3/img/xiaoesp32s3.jpg",style:{width:250,height:"auto"}})))),(0,r.yg)("tr",null,(0,r.yg)("td",null,(0,r.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,r.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Seeeduino-XIAO-Arduino-Microcontroller-SAMD21-Cortex-M0+-p-4426.html"},(0,r.yg)("strong",null,(0,r.yg)("span",null,(0,r.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))),(0,r.yg)("td",null,(0,r.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,r.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/XIAO-RP2040-v1-0-p-5026.html"},(0,r.yg)("strong",null,(0,r.yg)("span",null,(0,r.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))),(0,r.yg)("td",null,(0,r.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,r.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Seeed-XIAO-BLE-Sense-nRF52840-p-5253.html"},(0,r.yg)("strong",null,(0,r.yg)("span",null,(0,r.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))),(0,r.yg)("td",null,(0,r.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,r.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/seeed-xiao-esp32c3-p-5431.html"},(0,r.yg)("strong",null,(0,r.yg)("span",null,(0,r.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))),(0,r.yg)("td",null,(0,r.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,r.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/XIAO-ESP32S3-p-5627.html"},(0,r.yg)("strong",null,(0,r.yg)("span",null,(0,r.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))))),(0,r.yg)("p",null,"In the tutorials in this article, we will use the XIAO ESP32C3 and the mmWave Sensor as examples of use to guide you on how to use the sensor's Arduino libraries and related features."),(0,r.yg)("table",{align:"center"},(0,r.yg)("tr",null,(0,r.yg)("th",null,"Seeed Studio XIAO ESP32C3"),(0,r.yg)("th",null,"24GHz mmWave for XIAO")),(0,r.yg)("tr",null,(0,r.yg)("td",null,(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/round_display_for_xiao/xiaoesp32c3.jpg",style:{width:200,height:"auto"}}))),(0,r.yg)("td",null,(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/mmwave-for-xiao/1.png",style:{width:150,height:"auto"}})))),(0,r.yg)("tr",null,(0,r.yg)("td",null,(0,r.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,r.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/seeed-xiao-esp32c3-p-5431.html"},(0,r.yg)("strong",null,(0,r.yg)("span",null,(0,r.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))),(0,r.yg)("td",null,(0,r.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,r.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Seeed-Studio-24GHz-mmWave-for-XIAO-p-5830.html"},(0,r.yg)("strong",null,(0,r.yg)("span",null,(0,r.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))))),(0,r.yg)("p",null,"The sensor is designed for XIAO compatibility, so in general, if you want to use this sensor, you need to prepare an XIAO and install the female header row pin for the sensor. When connecting to the XIAO, please pay special attention to the installation direction of the sensor, please do not plug it in backwards, otherwise it is likely to burn the sensor or the XIAO."),(0,r.yg)("admonition",{type:"caution"},(0,r.yg)("p",{parentName:"admonition"},"The correct direction to follow is that the antenna of the sensor should face outwards.")),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/mmwave-for-xiao/5.png",style:{width:800,height:"auto"}})),(0,r.yg)("p",null,"After confirming that the connection direction is correct, you can connect the USB-C type cable to the computer or power supply, and the sensor will start to work."),(0,r.yg)("h3",{id:"software-preparations"},"Software Preparations"),(0,r.yg)("p",null,"Since the default baud rate used by the sensor is 256000, and the baud rate of the soft serial port designed by XIAO may not be able to satisfy such a high speed baud rate data transmission, we need to use software to adjust the baud rate of the sensor before using the sensor. Then, please download the corresponding APP according to the mobile phone system you are using."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("a",{parentName:"p",href:"https://play.google.com/store/apps/details?id=com.hlk.hlkradartool"},"Download HLKRadarTool from the Google Play"),".")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("a",{parentName:"p",href:"https://apps.apple.com/us/app/hlkradartool/id1638651152"},"Download HLKRadarTool from the App Store"),"."))),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/mmwave-for-xiao/3.png",style:{width:500,height:"auto"}})),(0,r.yg)("h2",{id:"arduino-library-overview"},"Arduino Library Overview"),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"If this is your first time using Arduino, we highly recommend you to refer to ",(0,r.yg)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/Getting_Started_with_Arduino/"},"Getting Started with Arduino"),".")),(0,r.yg)("div",{class:"github_container",style:{textAlign:"center"}},(0,r.yg)("a",{class:"github_item",href:"https://github.com/limengdu/mmwave_for_XIAO/tree/mydev"},(0,r.yg)("strong",null,(0,r.yg)("span",null,(0,r.yg)("font",{color:"FFFFFF",size:"4"}," Download the Library")))," ",(0,r.yg)("svg",{"aria-hidden":"true",focusable:"false",role:"img",className:"mr-2",viewBox:"-3 10 9 1",width:16,height:16,fill:"currentColor",style:{textAlign:"center",display:"inline-block",userSelect:"none",verticalAlign:"text-bottom",overflow:"visible"}},(0,r.yg)("path",{d:"M8 0c4.42 0 8 3.58 8 8a8.013 8.013 0 0 1-5.45 7.59c-.4.08-.55-.17-.55-.38 0-.27.01-1.13.01-2.2 0-.75-.25-1.23-.54-1.48 1.78-.2 3.65-.88 3.65-3.95 0-.88-.31-1.59-.82-2.15.08-.2.36-1.02-.08-2.12 0 0-.67-.22-2.2.82-.64-.18-1.32-.27-2-.27-.68 0-1.36.09-2 .27-1.53-1.03-2.2-.82-2.2-.82-.44 1.1-.16 1.92-.08 2.12-.51.56-.82 1.28-.82 2.15 0 3.06 1.86 3.75 3.64 3.95-.23.2-.44.55-.51 1.07-.46.21-1.61.55-2.33-.66-.15-.24-.6-.83-1.23-.82-.67.01-.27.38.01.53.34.19.73.9.82 1.13.16.45.68 1.31 2.69.94 0 .67.01 1.3.01 1.49 0 .21-.15.45-.55.38A7.995 7.995 0 0 1 0 8c0-4.42 3.58-8 8-8Z"})))),(0,r.yg)("br",null),(0,r.yg)("h3",{id:"function"},"Function"),(0,r.yg)("p",null,"Before we get started developing a sketch, let's look at the available functions of the library."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"Seeed_HSP24(Stream &serial)")," \u2014\u2014 Used to pass in the serial port that the sensor is connected to and start initialising the sensor."),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"Input Parameters"),":"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"serial"),": The serial port to which the sensor is connected."))))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"Seeed_HSP24(Stream &serial, Stream &debugSerial)")," \u2014\u2014 Used to pass in the serial port that the sensor is connected to, add the debug serial port and start initialising the sensor."),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"Input Parameters"),":"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"serial"),": The serial port to which the sensor is connected."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"debugSerial"),": Enable serial debugging and output in the incoming serial port."))))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"String getVersion()")," \u2014\u2014 Get the software version number of the sensor."),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Return"),": The software version number of the sensor."))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"RadarStatus getStatus()")," \u2014\u2014 Get the status information of the sensor, all the information reported by the sensor will be parsed by this function."),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Return"),": ",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"radarStatus.radarMode"),": Engineering Mode or Base Mode. 1 corresponds to Engineering Mode and 2 corresponds to Base Mode."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"radarStatus.targetStatus"),': Indicates the current situation of the monitoring object. There are four situations in total (NoTarget), the first is no person detected (MovingTarget), the second is someone detected as stationary (StaticTarget), the third is detected at the same time (BothTargets), and the fourth is an anomaly (ErrorFrame). Where BothTarget refers to someone\'s movement. Because the sensor monitors the current environment, the motion energy and stationary energy both exceed the set threshold, so we named "BothTarget", if only the motion energy exceeds the threshold, then it will output "MovingTarget".'),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"radarStatus.distance"),": This value refers to the distance that the sensor detects from the detected object."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"radarStatus.radarMovePower.moveGate")," (Effective in engineering mode): This array stores the moving energy values for different distance gates."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"radarStatus.radarStaticPower.staticGate")," (Effective in engineering mode): This array stores the static energy values for different distance gates."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"radarStatus.photosensitive")," (Effective in engineering mode): This value refers to the sensor photosensitivity value, range 0-255."))))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"DataResult sendCommand(const byte* sendData, int sendDataLength)")," \u2014\u2014 Commands are sent to the sensor through this function."),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Input Parameters"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"sendData"),": The array of command frames sent."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"sendDataLength"),": The length of the command frame sent."))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Return"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"resultBuffer"),": Points to a dynamically allocated array."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"length"),": Length of the array."))))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"AskStatus setDetectionDistance(int distance,int times)")," \u2014\u2014 Configure the maximum distance gate and unoccupied duration with this function."),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"Input Parameters"),":"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"distance"),": Configure the maximum distance gate."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"times"),": Unoccupied duration time."))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"Return"),":"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Success 0x00 or Error 0x01."))))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"AskStatus setGatePower(int gate,int movePower, int staticPower)")," \u2014\u2014 Different distance gates as well as sensitivities are configured with this function."),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"Input Parameters"),":"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"gate"),": Distance to door, range 0-8 m."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"movePower"),": The energy value that triggers the motion threshold."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"staticPower"),": The energy value that triggers the resting threshold."))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"Ruturn"),":"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Success 0x00 or Error 0x01."))))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"RadarStatus getConfig()")," \u2014\u2014 Reads the parameter values of the setting sensor."),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Return"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"radarStatus.detectionDistance"),": Number of motion detection distance gates for radar."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"radarStatus.moveSetDistance"),": Number of stationary detection distance gates for radar."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"radarStatus.staticSetDistance"),": Radar's longest detection range gate."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"radarStatus.noTargrtduration"),": Unmanned duration.")))))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"AskStatus setResolution(int resolution)")," \u2014\u2014 Set the distance to the door resolution, 1 is 0.25M, 0 is 0.75M. Default 0.75M."),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"Input Parameters"),":"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"resolution"),": 1 is 0.25M, 0 is 0.75M. Default 0.75M."))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"Ruturn"),":"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Success 0x00 or Error 0x01."))))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"RadarStatus getResolution()")," \u2014\u2014 Get distance to door resolution, 1 is 0.25M, 0 is 0.75M. Default 0.75M."),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Ruturn"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"radarStatus.resolution"),": 1 is 0.25M, 0 is 0.75M. Default 0.75M."))))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"AskStatus rebootRadar()")," \u2014\u2014 Reboot radar command."),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Ruturn"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Success 0x00 or Error 0x01."))))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"AskStatus refactoryRadar()")," \u2014\u2014 Restore the radar to factory settings."),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Ruturn"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Success 0x00 or Error 0x01."))))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"AskStatus enableEngineeringModel()")," \u2014\u2014 Enables sensor engineering mode output."),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Ruturn"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Success 0x00 or Error 0x01."))))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"AskStatus disableEngineeringModel()")," \u2014\u2014 Exit engineering mode output."),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Ruturn"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Success 0x00 or Error 0x01.")))))),(0,r.yg)("h3",{id:"default-variables"},"Default Variables"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"#define BUFFER_SIZE 256     // Serial Buffer Size\n\nclass Seeed_HSP24\n{\n    public:\n        static const int FRAME_START_SIZE = 4;\n        static const int FRAME_END_SIZE = 4;\n\n        static const byte frameStart[FRAME_START_SIZE];\n        static const byte frameEnd[FRAME_END_SIZE];\n        static const byte frameAskStart[FRAME_START_SIZE];\n        static const byte frameAskEnd[FRAME_END_SIZE];\n\n        struct RadarMovePower // Energy value per movement distance gate\n        {\n            int moveGate[9] = {-1, -1, -1, -1, -1, -1, -1, -1, -1};\n        };\n\n        struct RadarStaticPower // Energy value per stationary distance gate\n        {\n            int staticGate[9] = {-1, -1, -1, -1, -1, -1, -1, -1, -1};\n        };\n\n        //  Define the TargetStatus enum class\n        enum class AskStatus : byte\n        {\n            Success = 0x00, // Success\n            Error = 0x01,   // Failed\n        };\n\n        //  \u5b9a\u4e49TargetStatus\u679a\u4e3e\u7c7b\n        enum class TargetStatus : byte\n        {\n            NoTarget = 0x00,     // No target\n            MovingTarget = 0x01, // Moving target\n            StaticTarget = 0x02, // Static target\n            BothTargets = 0x03,  // It can be interpreted as motion, meaning that both the set motion and stationary thresholds are above the set value\n            ErrorFrame = 0x04    // Failed to get status\n        };\n\n        // Define the RadarStatus structure\n        struct RadarStatus\n        {\n            TargetStatus targetStatus = TargetStatus::ErrorFrame; // Target status of the radar\n            int distance = -1;                                    // Target distance of the radar in mm\n            int moveSetDistance = -1;                             // The number of motion detection distance gates of the radar, which generally do not have to be configured\n            int staticSetDistance = -1;                           // Number of static detection distance gates of the radar, which generally do not have to be configured\n            int detectionDistance = -1;                           // Radar's longest detection range gate\n            int resolution = -1;                                  // Distance gate resolution of radar\n            int noTargrtduration = -1;                            // Unmanned duration\n            int radarMode = -1;                                   // Used to distinguish whether the module is in basic reporting mode (2) or engineering reporting mode (1)\n            RadarMovePower radarMovePower;                        // Exercise Energy Value\n            RadarStaticPower radarStaticPower;                    // Stationary energy value\n            int photosensitive = -1;                              // Photosensitive 0-255\n        };\n\n        // Used to return the result of an issued command\n        struct DataResult\n        {\n            byte *resultBuffer; // Points to a dynamically allocated array\n            int length;         // Length of the array\n        };\n};\n")),(0,r.yg)("h3",{id:"installation"},"Installation"),(0,r.yg)("p",null,"Since you have downloaded the zip Library, open your Arduino IDE, click on ",(0,r.yg)("strong",{parentName:"p"},"Sketch > Include Library > Add .ZIP Library"),". Choose the zip file you just downloaded\uff0cand if the library install correct, you will see ",(0,r.yg)("strong",{parentName:"p"},"Library added to your libraries")," in the notice window. Which means the library is installed successfully."),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/Get_Started_With_Arduino/img/Add_Zip.png",style:{width:800,height:"auto"}})),(0,r.yg)("br",null),(0,r.yg)("h2",{id:"xiao-example"},"XIAO Example"),(0,r.yg)("p",null,"Now that we have our library installed and we understand the basic functions, let's run some examples for our 24GHz mmWave Sensor to see how it behaves."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Step 1.")," Launch the Arduino application."),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/seeed_logo/arduino.jpg",style:{width:800,height:"auto"}})),(0,r.yg)("div",{class:"download_arduino_container",style:{textAlign:"center"}},(0,r.yg)("a",{class:"download_arduino_item",href:"https://www.arduino.cc/en/software"},(0,r.yg)("strong",null,(0,r.yg)("span",null,(0,r.yg)("font",{color:"FFFFFF",size:"4"},"Download Arduino IDE"))))),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Step 2.")," Select your development board model and add it to the Arduino IDE."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"If you want to use ",(0,r.yg)("strong",{parentName:"p"},"Seeed Studio XIAO SAMD21")," for the later routines, please refer to ",(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("a",{parentName:"strong",href:"https://wiki.seeedstudio.com/Seeeduino-XIAO/#software"},"this tutorial"))," to finish adding.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"If you want to use ",(0,r.yg)("strong",{parentName:"p"},"Seeed Studio XIAO RP2040")," for the later routines, please refer to ",(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("a",{parentName:"strong",href:"https://wiki.seeedstudio.com/XIAO-RP2040-with-Arduino/#software-setup"},"this tutorial"))," to finish adding.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"If you want to use ",(0,r.yg)("strong",{parentName:"p"},"Seeed Studio XIAO nRF52840")," for the later routines, please refer to ",(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("a",{parentName:"strong",href:"https://wiki.seeedstudio.com/XIAO_BLE/#software-setup"},"this tutorial"))," to finish adding.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"If you want to use ",(0,r.yg)("strong",{parentName:"p"},"Seeed Studio XIAO ESP32C3")," for the later routines, please refer to ",(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("a",{parentName:"strong",href:"https://wiki.seeedstudio.com/XIAO_ESP32C3_Getting_Started#software-setup"},"this tutorial"))," to finish adding.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"If you want to use ",(0,r.yg)("strong",{parentName:"p"},"Seeed Studio XIAO ESP32S3")," for the later routines, please refer to ",(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("a",{parentName:"strong",href:"http://wiki.seeedstudio.com/xiao_esp32s3_getting_started#software-preparation"},"this tutorial"))," to finish adding."))),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"This tutorial will use the XIAO ESP32C3 as an example.")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Step 3.")," Connect the sensor to the XIAO and connect the XIAO to the PC via a USB-C type cable."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Step 4.")," Open the downloaded ",(0,r.yg)("strong",{parentName:"p"},"HLKRadarTool")," APP and configure the appropriate baud rate for the sensor."),(0,r.yg)("p",null,"Open the app, and the app searches for nearby radar devices. The broadcast name of the device is ",(0,r.yg)("strong",{parentName:"p"},"HLK-LD2410_xxxx")," (xxxx is the last four digits of the mac address)."),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/mmwave-for-xiao/6.png",style:{width:500,height:"auto"}})),(0,r.yg)("p",null,"In the More option in the top right corner of the software, you can access the settings menu to set custom parameters and features for the sensor. Please set the baud rate of the sensor to ",(0,r.yg)("strong",{parentName:"p"},"9600")," and save it."),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/mmwave-for-xiao/15.png",style:{width:400,height:"auto"}})),(0,r.yg)("p",null,"Afterwards, wait for the sensor to reboot."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Step 5.")," Add the necessary libraries."),(0,r.yg)("p",null,"In addition to the libraries for the sensors that you need to add to your Arduino environment, if you are using an ",(0,r.yg)("strong",{parentName:"p"},"ESP32 series XIAO")," then you may need to install the libraries for the soft-serial ports separately to be able to use the examples provided."),(0,r.yg)("div",{class:"github_container",style:{textAlign:"center"}},(0,r.yg)("a",{class:"github_item",href:"https://github.com/plerup/espsoftwareserial"},(0,r.yg)("strong",null,(0,r.yg)("span",null,(0,r.yg)("font",{color:"FFFFFF",size:"4"}," Download the Library")))," ",(0,r.yg)("svg",{"aria-hidden":"true",focusable:"false",role:"img",className:"mr-2",viewBox:"-3 10 9 1",width:16,height:16,fill:"currentColor",style:{textAlign:"center",display:"inline-block",userSelect:"none",verticalAlign:"text-bottom",overflow:"visible"}},(0,r.yg)("path",{d:"M8 0c4.42 0 8 3.58 8 8a8.013 8.013 0 0 1-5.45 7.59c-.4.08-.55-.17-.55-.38 0-.27.01-1.13.01-2.2 0-.75-.25-1.23-.54-1.48 1.78-.2 3.65-.88 3.65-3.95 0-.88-.31-1.59-.82-2.15.08-.2.36-1.02-.08-2.12 0 0-.67-.22-2.2.82-.64-.18-1.32-.27-2-.27-.68 0-1.36.09-2 .27-1.53-1.03-2.2-.82-2.2-.82-.44 1.1-.16 1.92-.08 2.12-.51.56-.82 1.28-.82 2.15 0 3.06 1.86 3.75 3.64 3.95-.23.2-.44.55-.51 1.07-.46.21-1.61.55-2.33-.66-.15-.24-.6-.83-1.23-.82-.67.01-.27.38.01.53.34.19.73.9.82 1.13.16.45.68 1.31 2.69.94 0 .67.01 1.3.01 1.49 0 .21-.15.45-.55.38A7.995 7.995 0 0 1 0 8c0-4.42 3.58-8 8-8Z"})))),(0,r.yg)("br",null),(0,r.yg)("h3",{id:"demo-1-basic-mode-output"},"Demo 1. Basic mode output"),(0,r.yg)("p",null,"For the first program example, we will parse the general information reported by the sensor. This will represent the main functional information output for this product. For example, data on human presence, motion, distance, etc."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#if defined(ARDUINO_SEEED_XIAO_NRF52840_SENSE) || defined(ARDUINO_SEEED_XIAO_NRF52840)\n#error "XIAO nRF52840 please use the non-mbed-enable version."\n#endif\n\n#include <SoftwareSerial.h>\n#include <mmwave_for_xiao.h>\n\n// Define the SoftwareSerial object, D2 as RX, D3 as TX, connect to the serial port of the mmwave sensor\nSoftwareSerial COMSerial(D2, D3);\n\n// Creates a global Serial object for printing debugging information\n#define ShowSerial Serial\n\n// Initialising the radar configuration\n// Seeed_HSP24 xiao_config(COMSerial, ShowSerial);\nSeeed_HSP24 xiao_config(COMSerial);\n\nSeeed_HSP24::RadarStatus radarStatus;\n\nvoid setup() {\n  COMSerial.begin(9600);\n  ShowSerial.begin(9600);\n  delay(500);\n\n  ShowSerial.println("Programme Starting!");\n\n  xiao_config.disableEngineeringModel();\n}\n\nvoid loop() {\n  int retryCount = 0;\n  const int MAX_RETRIES = 10;  // Maximum number of retries to prevent infinite loops\n\n  //Get radar status\n  do {\n    radarStatus = xiao_config.getStatus();\n    retryCount++;\n  } while (radarStatus.targetStatus == Seeed_HSP24::TargetStatus::ErrorFrame && retryCount < MAX_RETRIES);\n\n  //Parses radar status and prints results from debug serial port\n  if (radarStatus.targetStatus != Seeed_HSP24::TargetStatus::ErrorFrame) {\n    ShowSerial.print("Status: " + String(targetStatusToString(radarStatus.targetStatus)) + " ---- ");\n    ShowSerial.println("Distance: " + String(radarStatus.distance) + "  Mode: " + String(radarStatus.radarMode));\n  }\n  delay(200);\n}\n\n// Parsing the acquired radar status\nconst char* targetStatusToString(Seeed_HSP24::TargetStatus status) {\n  switch (status) {\n    case Seeed_HSP24::TargetStatus::NoTarget:\n      return "NoTarget";\n    case Seeed_HSP24::TargetStatus::MovingTarget:\n      return "MovingTarget";\n    case Seeed_HSP24::TargetStatus::StaticTarget:\n      return "StaticTarget";\n    case Seeed_HSP24::TargetStatus::BothTargets:\n      return "BothTargets";\n    default:\n      return "Unknown";\n  }\n}\n')),(0,r.yg)("p",null,"After compiling and uploading the program, open the serial monitor and set the baud rate to 9600. if all goes well, you should see the following result output."),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/mmwave-for-xiao/16.png",style:{width:700,height:"auto"}})),(0,r.yg)("h3",{id:"demo-2-engineering-mode-output"},"Demo 2. Engineering mode output"),(0,r.yg)("p",null,"For the second example program, we will turn on the engineering data upload for the sensor and parse this engineering information. Compared to the base mode, the engineering information has more motion energy values and static energy values for different distance gates. The display of these values allows you to visualise the dynamic and static energy changes in the current environment, making it easier for you to adjust the triggers for the sensors to determine if someone is present, stationary, or in motion according to the actual situation."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#if defined(ARDUINO_SEEED_XIAO_NRF52840_SENSE) || defined(ARDUINO_SEEED_XIAO_NRF52840)\n#error "XIAO nRF52840 please use the non-mbed-enable version."\n#endif\n\n#include <SoftwareSerial.h>\n#include <mmwave_for_xiao.h>\n\n// Define the SoftwareSerial object, D2 as RX, D3 as TX, connect to the serial port of the mmwave sensor\nSoftwareSerial COMSerial(D2, D3);\n\n// Creates a global Serial object for printing debugging information\n#define ShowSerial Serial\n\n// Initialising the radar configuration\n// Seeed_HSP24 xiao_config(COMSerial, ShowSerial);\nSeeed_HSP24 xiao_config(COMSerial);\n\nSeeed_HSP24::RadarStatus radarStatus;\n\nvoid setup() {\n  COMSerial.begin(9600);\n  ShowSerial.begin(9600);\n  delay(500);\n\n  ShowSerial.println("Programme Starting!");\n\n  xiao_config.enableEngineeringModel();\n}\n\nvoid loop() {\n  int retryCount = 0;\n  const int MAX_RETRIES = 10;  // Maximum number of retries to prevent infinite loops\n\n  //Get radar status\n  do {\n    radarStatus = xiao_config.getStatus();\n    retryCount++;\n  } while (radarStatus.targetStatus == Seeed_HSP24::TargetStatus::ErrorFrame && retryCount < MAX_RETRIES);\n\n  //Parses radar status and prints results from debug serial port\n  if (radarStatus.targetStatus != Seeed_HSP24::TargetStatus::ErrorFrame) {\n    ShowSerial.print("Status: " + String(targetStatusToString(radarStatus.targetStatus)) + "  ----   ");\n    ShowSerial.println("Distance: " + String(radarStatus.distance) + "  Mode: " + String(radarStatus.radarMode));\n    \n    if (radarStatus.radarMode == 1) {\n      ShowSerial.print("Move:");\n      for (int i = 0; i < 9; i++) {\n        ShowSerial.print(" " + String(radarStatus.radarMovePower.moveGate[i]) + ",");\n      }\n      ShowSerial.println("");\n      ShowSerial.print("Static:");\n      for (int i = 0; i < 9; i++) {\n        ShowSerial.print(" " + String(radarStatus.radarStaticPower.staticGate[i]) + ",");\n      }\n      ShowSerial.println("");\n      ShowSerial.println("Photosensitive: " + String(radarStatus.photosensitive));\n    }\n  }\n  delay(100);\n}\n\n// Parsing the acquired radar status\nconst char* targetStatusToString(Seeed_HSP24::TargetStatus status) {\n  switch (status) {\n    case Seeed_HSP24::TargetStatus::NoTarget:\n      return "NoTarget";\n    case Seeed_HSP24::TargetStatus::MovingTarget:\n      return "MovingTarget";\n    case Seeed_HSP24::TargetStatus::StaticTarget:\n      return "StaticTarget";\n    case Seeed_HSP24::TargetStatus::BothTargets:\n      return "BothTargets";\n    default:\n      return "Unknown";\n  }\n}\n')),(0,r.yg)("p",null,"After compiling and uploading the program, open the serial monitor and set the baud rate to 9600. if all goes well, you should see the following result output."),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/mmwave-for-xiao/17.png",style:{width:800,height:"auto"}})),(0,r.yg)("h3",{id:"demo-3-other-configuration-inquiry-and-restore-factory-settings"},"Demo 3. Other configuration inquiry and restore factory settings"),(0,r.yg)("p",null,"In the third example, we provide a method for restoring the sensor settings and some other examples of the use of parameter query functions."),(0,r.yg)("admonition",{type:"caution"},(0,r.yg)("p",{parentName:"admonition"},"Special attention should be paid to the fact that when the sensor is restored to the factory settings, it also means that the baud rate of the sensor will be restored to ",(0,r.yg)("strong",{parentName:"p"},"256000"),". You need to follow the previous steps to reset the baud rate to ",(0,r.yg)("strong",{parentName:"p"},"9600")," on your mobile phone APP before you can use other XIAO programmes.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#if defined(ARDUINO_SEEED_XIAO_NRF52840_SENSE) || defined(ARDUINO_SEEED_XIAO_NRF52840)\n#error "XIAO nRF52840 please use the non-mbed-enable version."\n#endif\n\n#include <SoftwareSerial.h>\n#include <mmwave_for_xiao.h>\n\n// Define the SoftwareSerial object, D2 as RX, D3 as TX, connect to the serial port of the mmwave sensor\nSoftwareSerial COMSerial(D2, D3);\n\n// Creates a global Serial object for printing debugging information\n#define ShowSerial Serial\n\n// Initialising the radar configuration\n// Seeed_HSP24 xiao_config(COMSerial, ShowSerial);\nSeeed_HSP24 xiao_config(COMSerial);\n\nSeeed_HSP24::RadarStatus radarStatus;\n\nvoid setup() {\n  COMSerial.begin(9600);\n  ShowSerial.begin(9600);\n  while(!ShowSerial);                   // Turn on the serial monitor and start executing\n  delay(500);\n  \n  ShowSerial.println("Programme Starting!");\n\n  ShowSerial.print("Sensor Software Version: ");\n  ShowSerial.println(xiao_config.getVersion());\n\n  radarStatus = xiao_config.getConfig();\n  if (radarStatus.detectionDistance != -1) {\n    ShowSerial.println("Detection Distance: " + String(radarStatus.detectionDistance) + " m ");\n    ShowSerial.println("Moveing Set Distance: " + String(radarStatus.moveSetDistance) + " m ");\n    ShowSerial.println("Static Set Distance: " + String(radarStatus.staticSetDistance) + " m ");\n    ShowSerial.println("No Target Duration Time: " + String(radarStatus.noTargrtduration) + " seconds ");\n  }\n  else ShowSerial.println("Failed to get configuration information, please retry.");\n\n  /*** Restore or reset the radar settings, please operate with caution.\n   * * After restoring or resetting the factory settings, please re-modify \n   * * the baud rate to 9600 before using XIAO!\n   * */\n  xiao_config.refactoryRadar();\n//   xiao_config.rebootRadar();                // Reboot the Sensor\n}\n\nvoid loop() {}\n')),(0,r.yg)("p",null,"This program will perform a reset after you turn on the serial monitor."),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/mmwave-for-xiao/18.png",style:{width:600,height:"auto"}})),(0,r.yg)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,r.yg)("h3",{id:"q1-i-am-using-xiao-nrf52840-sense-which-development-board-version-should-i-choose"},"Q1: I am using XIAO nRF52840 (Sense), which development board version should I choose?"),(0,r.yg)("p",null,"You should use the non-mbed version of the XIAO nRF52840 development board package as it contains the soft serial port libraries necessary for the programme."),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/mmwave-for-xiao/19.png",style:{width:800,height:"auto"}})),(0,r.yg)("h3",{id:"q2-why-am-i-getting-dropped-frames-and-garbled-sensor-data-streams"},"Q2: Why am I getting dropped frames and garbled sensor data streams?"),(0,r.yg)("p",null,"This is most likely because you did not modify the baud rate of the sensor. The default baud rate of the factory firmware of this product is 256000. XIAO's soft serial port may not be able to handle such a high speed data stream, then the programme may be abnormally stuck and unable to parse the data frames correctly, so please adjust the baud rate down and then use the programme again. We recommend using a baud rate of ",(0,r.yg)("strong",{parentName:"p"},"9600"),"."),(0,r.yg)("h3",{id:"q3-why-does-the-data-stream-lag-for-12-seconds-when-using-demo2"},"Q3: Why does the data stream lag for 1~2 seconds when using Demo2?"),(0,r.yg)("p",null,"This may be a normal phenomenon, the data flow in engineering mode is large, the soft serial port occupies the CPU to process the data is limited, so it will pause for a while every now and then."),(0,r.yg)("h2",{id:"tech-support--product-discussion"},"Tech Support & Product Discussion"),(0,r.yg)("p",null,"Thank you for choosing our products! We are here to provide you with different support to ensure that your experience with our products is as smooth as possible. We offer several communication channels to cater to different preferences and needs."),(0,r.yg)("div",{class:"table-center"},(0,r.yg)("div",{class:"button_tech_support_container"},(0,r.yg)("a",{href:"https://forum.seeedstudio.com/",class:"button_forum"}),(0,r.yg)("a",{href:"https://www.seeedstudio.com/contacts",class:"button_email"})),(0,r.yg)("div",{class:"button_tech_support_container"},(0,r.yg)("a",{href:"https://discord.gg/eWkprNDMU7",class:"button_discord"}),(0,r.yg)("a",{href:"https://github.com/Seeed-Studio/wiki-documents/discussions/69",class:"button_discussion"}))))}p.isMDXComponent=!0}}]);