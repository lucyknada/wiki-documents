"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[31576],{15680:(e,t,n)=>{n.d(t,{xA:()=>g,yg:()=>p});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},g=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,p=d["".concat(o,".").concat(m)]||d[m]||c[m]||i;return n?a.createElement(p,s(s({ref:t},g),{},{components:n})):a.createElement(p,s({ref:t},g))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[d]="string"==typeof e?e:r,s[1]=l;for(var u=2;u<i;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},92470:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var a=n(58168),r=(n(96540),n(15680));const i={description:"Connect SenseCAP T1000 Tracker to AWS",title:"AWS Cloud Services",keywords:["Tracker","AWS"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/SenseCAP_T1000_Tracker_AWS",last_update:{date:"8/31/2023",author:"Jessie"}},s=void 0,l={unversionedId:"Sensor/SenseCAP/SenseCAP_T1000_Tracker/Integrated_with_LoRaWAN_Network_Server/AWS_Service",id:"Sensor/SenseCAP/SenseCAP_T1000_Tracker/Integrated_with_LoRaWAN_Network_Server/AWS_Service",title:"AWS Cloud Services",description:"Connect SenseCAP T1000 Tracker to AWS",source:"@site/docs/Sensor/SenseCAP/SenseCAP_T1000_Tracker/Integrated_with_LoRaWAN_Network_Server/AWS_Service.md",sourceDirName:"Sensor/SenseCAP/SenseCAP_T1000_Tracker/Integrated_with_LoRaWAN_Network_Server",slug:"/SenseCAP_T1000_Tracker_AWS",permalink:"/SenseCAP_T1000_Tracker_AWS",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/Sensor/SenseCAP/SenseCAP_T1000_Tracker/Integrated_with_LoRaWAN_Network_Server/AWS_Service.md",tags:[],version:"current",lastUpdatedBy:"Jessie",lastUpdatedAt:169344e4,formattedLastUpdatedAt:"Aug 31, 2023",frontMatter:{description:"Connect SenseCAP T1000 Tracker to AWS",title:"AWS Cloud Services",keywords:["Tracker","AWS"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/SenseCAP_T1000_Tracker_AWS",last_update:{date:"8/31/2023",author:"Jessie"}},sidebar:"ProductSidebar",previous:{title:"Connect to Loriot",permalink:"/SenseCAP_T1000_Tracker_Loriot"},next:{title:"TTN Mapper Configuration",permalink:"/ttn_mapper_for_SenseCAP_T1000"}},o={},u=[{value:"Add Gateway",id:"add-gateway",level:2},{value:"Configure your gateway",id:"configure-your-gateway",level:2},{value:"Gateway Certificate",id:"gateway-certificate",level:3},{value:"Gateway Permission",id:"gateway-permission",level:3},{value:"Gateway Configuration",id:"gateway-configuration",level:3},{value:"Add Profiles",id:"add-profiles",level:2},{value:"Add devices profiles",id:"add-devices-profiles",level:3},{value:"Add service profiles",id:"add-service-profiles",level:3},{value:"Add Destination",id:"add-destination",level:3},{value:"Add LoRaWAN Devices",id:"add-lorawan-devices",level:2},{value:"Add wireless device",id:"add-wireless-device",level:3},{value:"Configure the decoder",id:"configure-the-decoder",level:2},{value:"Create Message Rules",id:"create-message-rules",level:3},{value:"Configure the Permission",id:"configure-the-permission",level:3},{value:"Resource",id:"resource",level:2}],g={toc:u},d="wrapper";function c(e){let{components:t,...n}=e;return(0,r.yg)(d,(0,a.A)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://docs.aws.amazon.com/iot/latest/developerguide/iot-gs.html"},"AWS IoT")," provides the cloud services that connect your IoT devices to other devices and AWS cloud services. AWS IoT provides device software that can help you integrate your IoT devices into AWS IoT-based solutions. If your devices can connect to AWS IoT, AWS IoT can connect them to the cloud services that AWS provides."),(0,r.yg)("p",null,"Login to ",(0,r.yg)("a",{parentName:"p",href:"https://console.aws.amazon.com/iot/home"},"AWS IoT console")),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"If you do not have an AWS account, click ",(0,r.yg)("a",{parentName:"p",href:"https://portal.aws.amazon.com/billing/signup"},"here")," to create one.")),(0,r.yg)("h2",{id:"add-gateway"},"Add Gateway"),(0,r.yg)("p",null,"Navigate to ",(0,r.yg)("inlineCode",{parentName:"p"},"Internet of Things"),", then click ",(0,r.yg)("inlineCode",{parentName:"p"},"IoT Core"),"."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/iot=core.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("p",null,"On the left menu,select ",(0,r.yg)("inlineCode",{parentName:"p"},"LPWAN devices")," \u2192 ",(0,r.yg)("inlineCode",{parentName:"p"},"Gateways"),", click ",(0,r.yg)("inlineCode",{parentName:"p"},"Add gateway")),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/add-gateway.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"Gateway's EUI"),": The EUI of your gateway, you can find it on the device label.",(0,r.yg)("br",null),"\n",(0,r.yg)("inlineCode",{parentName:"p"},"Frequency"),": The gateway's frequency band.",(0,r.yg)("br",null),"\n",(0,r.yg)("inlineCode",{parentName:"p"},"Name"),": Name your gateway(optional)",(0,r.yg)("br",null),"\n",(0,r.yg)("inlineCode",{parentName:"p"},"SubBand"),": Optionally, you can also specify LoRaWAN configuration data such as the subbands that you want to use and filters that can control the flow of traffic. For more information, see ",(0,r.yg)("a",{parentName:"p",href:"https://docs.aws.amazon.com/iot/latest/developerguide/connect-iot-lorawan-configure-location.html"},"Configure position of wireless resources with AWS IoT Core for LoRaWAN"),"."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/gateway-eui.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("h2",{id:"configure-your-gateway"},"Configure your gateway"),(0,r.yg)("h3",{id:"gateway-certificate"},"Gateway Certificate"),(0,r.yg)("p",null,"To authenticate your gateway so that it can securely communicate with AWS IoT, your LoRaWAN gateway must present a private key and certificate to AWS IoT Core for LoRaWAN."),(0,r.yg)("p",null,"Click ",(0,r.yg)("inlineCode",{parentName:"p"},"Create certificate"),"."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/create-cer.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("p",null,"Download and save the certificate files and the server trust certificates."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/M2_Multi-Platform/AWS6.PNG",alt:"pir",width:800,height:"auto"})),(0,r.yg)("p",null,"There shoule be four files inside, you'll use them later to configure the gateway."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/files.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("h3",{id:"gateway-permission"},"Gateway Permission"),(0,r.yg)("p",null,"If you haven't created the IoTWirelessGatewayCertManagerRole IAM role for your account, create the role before you continue adding the gateway.\nYour gateways won't be able to communicate with AWS IoT without this role."),(0,r.yg)("p",null,"Choose the Role: ",(0,r.yg)("inlineCode",{parentName:"p"},"IoT Wireless Gateway Cert Manager Role"),", then submit the configuration."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/permissions.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("p",null,"Copy the CUPS URL, we will use it in the next step."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/cups.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("h3",{id:"gateway-configuration"},"Gateway Configuration"),(0,r.yg)("p",null,"Login to the Luci configure page of the gateway, check ",(0,r.yg)("a",{parentName:"p",href:"https://files.seeedstudio.com/products/SenseCAP%20M2/Quick%20Start%20for%20SenseCAP%20M2%20Multi-Platfrom%20Gateway%20&%20Sensors.pdf"},"Get_Started")," for more details."),(0,r.yg)("p",null,"Navigate to ",(0,r.yg)("inlineCode",{parentName:"p"},"LoRa")," > ",(0,r.yg)("inlineCode",{parentName:"p"},"LoRa Network"),"."),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"Mode"),": Basic Station",(0,r.yg)("br",null),"\n",(0,r.yg)("inlineCode",{parentName:"p"},"Gateway EUI"),": Your gateway eui",(0,r.yg)("br",null),"\n",(0,r.yg)("inlineCode",{parentName:"p"},"Server"),": CUPS Server",(0,r.yg)("br",null),"\n",(0,r.yg)("inlineCode",{parentName:"p"},"URL"),": The CUPS URL we copied before",(0,r.yg)("br",null),"\n",(0,r.yg)("inlineCode",{parentName:"p"},"Authentication Mode"),": TLS Server and Client Authentication"),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/M2_Multi-Platform/AWS21.PNG",alt:"pir",width:800,height:"auto"})),(0,r.yg)("p",null,"Copy the content of the certificate file we downloaded before(the certificate can be opened in text form)."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/M2_Multi-Platform/AWS23.PNG",alt:"pir",width:800,height:"auto"})),(0,r.yg)("p",null,"Navigate to the Gateways page and choose the gateway you've added."),(0,r.yg)("p",null,"In the LoRaWAN specific details section of the Gateway details page, you'll see the connection status and the date and time the last uplink was received."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/gate-connected.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("h2",{id:"add-profiles"},"Add Profiles"),(0,r.yg)("p",null,"Device and service profiles can be defined to describe common device configurations. These profiles describe configuration parameters that are shared by devices to make it easier to add those devices. AWS IoT Core for LoRaWAN supports device profiles and service profiles."),(0,r.yg)("h3",{id:"add-devices-profiles"},"Add devices profiles"),(0,r.yg)("p",null,"Navigate to ",(0,r.yg)("inlineCode",{parentName:"p"},"Devices")," > ",(0,r.yg)("inlineCode",{parentName:"p"},"Profiles"),", click ",(0,r.yg)("inlineCode",{parentName:"p"},"Add device profile"),"."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/M2_Multi-Platform/AWS11.PNG",alt:"pir",width:800,height:"auto"})),(0,r.yg)("p",null,"Provide a Device profile name, select the Frequency band (RfRegion)that you're using for the device and gateway, and keep the other settings to the default values."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/proflie2.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("h3",{id:"add-service-profiles"},"Add service profiles"),(0,r.yg)("p",null,"Navigate to ",(0,r.yg)("inlineCode",{parentName:"p"},"Devices")," > ",(0,r.yg)("inlineCode",{parentName:"p"},"Profiles"),", click ",(0,r.yg)("inlineCode",{parentName:"p"},"Add service profile")),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/M2_Multi-Platform/AWS13.PNG",alt:"pir",width:800,height:"auto"})),(0,r.yg)("p",null,"It's recommend that you leave the setting ",(0,r.yg)("inlineCode",{parentName:"p"},"AddGWMetaData")," enabled so that you'll receive additional gateway metadata for each payload, such as RSSIand SNR for the data transmission."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/profile4.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("h3",{id:"add-destination"},"Add Destination"),(0,r.yg)("p",null,"Navigate to ",(0,r.yg)("inlineCode",{parentName:"p"},"Devices")," > ",(0,r.yg)("inlineCode",{parentName:"p"},"Destination"),", click ",(0,r.yg)("inlineCode",{parentName:"p"},"Add destination"),"."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/M2_Multi-Platform/AWS15.PNG",alt:"pir",width:800,height:"auto"})),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"Publish to AWS IoT Core message broker")),(0,r.yg)("p",null,"Permissions: Select an existing service role > ",(0,r.yg)("inlineCode",{parentName:"p"},"IoT Wireless Gateway Cert Manager Role")),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"Adestination name can only have alphanumeric, - (hyphen)and _ (underscore) characters and it can't have any spaces.")),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/M2_Multi-Platform/AWS14.PNG",alt:"pir",width:800,height:"auto"})),(0,r.yg)("h2",{id:"add-lorawan-devices"},"Add LoRaWAN Devices"),(0,r.yg)("h3",{id:"add-wireless-device"},"Add wireless device"),(0,r.yg)("p",null,"Navigate to ",(0,r.yg)("inlineCode",{parentName:"p"},"LPWAN devices")," > ",(0,r.yg)("inlineCode",{parentName:"p"},"Devices"),", click ",(0,r.yg)("inlineCode",{parentName:"p"},"Add wireless device"),"."),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"Wireless device specification"),": OTAAv1.0x"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"DevEUI/APP EUI/APP key"),": can be found in the SenseCAP Mate APP, check ",(0,r.yg)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/Get_Started_with_SenseCAP_T1000_tracker/#get-started"},"Get_Started")," for more details."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/M2_Multi-Platform/AWS17.PNG",alt:"pir",width:800,height:"auto"})),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/M2_Multi-Platform/AWS20.PNG",alt:"pir",width:800,height:"auto"})),(0,r.yg)("p",null,"Select the device profile and destination you created in the previous step. "),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/device-eui2.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("p",null,"Navigate to the Devices page and choose the device you added before."),(0,r.yg)("p",null,"In the Details section of the Wireless devices details page, you'll see the date received."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/M2_Multi-Platform/AWS19.PNG",alt:"pir",width:800,height:"auto"})),(0,r.yg)("h2",{id:"configure-the-decoder"},"Configure the decoder"),(0,r.yg)("p",null,"The SenseCAP Tracker will uplink the payload via LoRaWAN network\uff0cand the payload is under a specified format to save the bandwidth, which may make it challenging to read. To address this, we offer a dedicated decoder that users can employ to accurately decode the data."),(0,r.yg)("p",null,"Navigae to ",(0,r.yg)("inlineCode",{parentName:"p"},"Settings"),"."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/settings.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("p",null,"Record the \u201c",(0,r.yg)("inlineCode",{parentName:"p"},"Endpoint"),"\u201d address in the page, you will need it in the next step."),(0,r.yg)("p",null,"For example:",(0,r.yg)("a",{parentName:"p",href:"http://a39w0g3w5os1ti-ats.iot.us-east-1.amazonaws.com/"},"a39w0g3w5os1ti-ats.iot.us-east-1.amazonaws.com"),"."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/settings2.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("h3",{id:"create-message-rules"},"Create Message Rules"),(0,r.yg)("p",null,"Navigate to ",(0,r.yg)("inlineCode",{parentName:"p"},"Message routing")," tab \u2192 ",(0,r.yg)("inlineCode",{parentName:"p"},"Rules"),", and click ",(0,r.yg)("inlineCode",{parentName:"p"},"Create Rule")," button."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/rules.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("p",null,"Name your rule and submit it."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/rules2.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"SQL version"),":2016-03-23",(0,r.yg)("br",null),"\n",(0,r.yg)("inlineCode",{parentName:"p"},"SQL statement"),": "),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"SELECT * FROM \u201clorawan-device\u201d\n")),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/sql.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("p",null,"Scroll down to ",(0,r.yg)("inlineCode",{parentName:"p"},"Rule actions")," section, and select \u201c",(0,r.yg)("inlineCode",{parentName:"p"},"Lambda"),"\u201d from \u201cAction 1\u201d, then click ",(0,r.yg)("inlineCode",{parentName:"p"},"Create a Lambda function"),"."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/rule-action.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"Author from scratch"),(0,r.yg)("br",null),"\n",(0,r.yg)("inlineCode",{parentName:"p"},"Function name"),": Name your function.",(0,r.yg)("br",null),"\n",(0,r.yg)("inlineCode",{parentName:"p"},"Runtime"),": Node.js 14.x",(0,r.yg)("br",null),"\n",(0,r.yg)("inlineCode",{parentName:"p"},"Architexture"),": x86_64"),(0,r.yg)("p",null,"Click ",(0,r.yg)("inlineCode",{parentName:"p"},"Create function")," button to create a new function."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/cre-function.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("p",null,"On the following funcition config page, remove all the code and replace it with the following script,  then click ",(0,r.yg)("inlineCode",{parentName:"p"},"Deploy")," button."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/decod.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Lambda Function Script"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"const AWS = require('aws-sdk');\n    const iotdata = new AWS.IotData({\n        endpoint: 'a39w0g3w5os1ti-ats.iot.us-east-1.amazonaws.com'\n    });\n    \n    function decodeUplink (input) {\n        // var bytes = input['bytes']\n        var bytes = Buffer.from(input, 'base64');\n        var bytesString = bytes2HexString(bytes).toLocaleUpperCase()\n        var decoded = {\n            valid: true,\n            err: 0,\n            payload: bytesString,\n            messages: []\n        }\n        let measurement = messageAnalyzed(bytesString)\n        decoded.messages = measurement\n        return { data: decoded }\n    }\n    \n    function messageAnalyzed (messageValue) {\n        try {\n            let frames = unpack(messageValue)\n            let measurementResultArray = []\n            for (let i = 0; i < frames.length; i++) {\n                let item = frames[i]\n                let dataId = item.dataId\n                let dataValue = item.dataValue\n                let measurementArray = deserialize(dataId, dataValue)\n                measurementResultArray.push(measurementArray)\n            }\n            return measurementResultArray\n        } catch (e) {\n            return e.toString()\n        }\n    }\n    \n    function unpack (messageValue) {\n        let frameArray = []\n    \n        for (let i = 0; i < messageValue.length; i++) {\n            let remainMessage = messageValue\n            let dataId = remainMessage.substring(0, 2).toUpperCase()\n            let dataValue\n            let dataObj = {}\n            let packageLen\n            switch (dataId) {\n                case '01':\n                    packageLen = 94\n                    if (remainMessage.length < packageLen) {\n                        return frameArray\n                    }\n                    dataValue = remainMessage.substring(2, packageLen)\n                    messageValue = remainMessage.substring(packageLen)\n                    dataObj = {\n                        'dataId': dataId, 'dataValue': dataValue\n                    }\n                    break\n                case '02':\n                    packageLen = 32\n                    if (remainMessage.length < packageLen) {\n                        return frameArray\n                    }\n                    dataValue = remainMessage.substring(2, packageLen)\n                    messageValue = remainMessage.substring(packageLen)\n                    dataObj = {\n                        'dataId': dataId, 'dataValue': dataValue\n                    }\n                    break\n                case '03':\n                    packageLen = 64\n                    if (remainMessage.length < packageLen) {\n                        return frameArray\n                    }\n                    break\n                case '04':\n                    packageLen = 20\n                    if (remainMessage.length < packageLen) {\n                        return frameArray\n                    }\n                    dataValue = remainMessage.substring(2, packageLen)\n                    messageValue = remainMessage.substring(packageLen)\n                    dataObj = {\n                        'dataId': dataId, 'dataValue': dataValue\n                    }\n                    break\n                case '05':\n                    packageLen = 10\n                    if (remainMessage.length < packageLen) {\n                        return frameArray\n                    }\n                    dataValue = remainMessage.substring(2, packageLen)\n                    messageValue = remainMessage.substring(packageLen)\n                    dataObj = {\n                        'dataId': dataId, 'dataValue': dataValue\n                    }\n                    break\n                case '06':\n                    packageLen = 44\n                    if (remainMessage.length < packageLen) {\n                        return frameArray\n                    }\n                    dataValue = remainMessage.substring(2, packageLen)\n                    messageValue = remainMessage.substring(packageLen)\n                    dataObj = {\n                        'dataId': dataId, 'dataValue': dataValue\n                    }\n                    break\n                case '07':\n                    packageLen = 84\n                    if (remainMessage.length < packageLen) {\n                        return frameArray\n                    }\n                    dataValue = remainMessage.substring(2, packageLen)\n                    messageValue = remainMessage.substring(packageLen)\n                    dataObj = {\n                        'dataId': dataId, 'dataValue': dataValue\n                    }\n                    break\n                case '08':\n                    packageLen = 70\n                    if (remainMessage.length < packageLen) {\n                        return frameArray\n                    }\n                    dataValue = remainMessage.substring(2, packageLen)\n                    messageValue = remainMessage.substring(packageLen)\n                    dataObj = {\n                        'dataId': dataId, 'dataValue': dataValue\n                    }\n                    break\n                case '09':\n                    packageLen = 36\n                    if (remainMessage.length < packageLen) {\n                        return frameArray\n                    }\n                    dataValue = remainMessage.substring(2, packageLen)\n                    messageValue = remainMessage.substring(packageLen)\n                    dataObj = {\n                        'dataId': dataId, 'dataValue': dataValue\n                    }\n                    break\n                case '0A':\n                    packageLen = 76\n                    if (remainMessage.length < packageLen) {\n                        return frameArray\n                    }\n                    dataValue = remainMessage.substring(2, packageLen)\n                    messageValue = remainMessage.substring(packageLen)\n                    dataObj = {\n                        'dataId': dataId, 'dataValue': dataValue\n                    }\n                    break\n                case '0B':\n                    packageLen = 62\n                    if (remainMessage.length < packageLen) {\n                        return frameArray\n                    }\n                    dataValue = remainMessage.substring(2, packageLen)\n                    messageValue = remainMessage.substring(packageLen)\n                    dataObj = {\n                        'dataId': dataId, 'dataValue': dataValue\n                    }\n                    break\n                case '0C':\n                    packageLen = 2\n                    if (remainMessage.length < packageLen) {\n                        return frameArray\n                    }\n                    break\n                case '0D':\n                    packageLen = 10\n                    if (remainMessage.length < packageLen) {\n                        return frameArray\n                    }\n                    dataValue = remainMessage.substring(2, packageLen)\n                    messageValue = remainMessage.substring(packageLen)\n                    dataObj = {\n                        'dataId': dataId, 'dataValue': dataValue\n                    }\n                    break\n                default:\n                    return frameArray\n            }\n            if (dataValue.length < 2) {\n                break\n            }\n            frameArray.push(dataObj)\n        }\n        return frameArray\n    }\n    \n    function deserialize (dataId, dataValue) {\n        let measurementArray = []\n        let eventList = []\n        let collectTime = 0\n        switch (dataId) {\n            case '01':\n                measurementArray = getUpShortInfo(dataValue)\n                break\n            case '02':\n                measurementArray = getUpShortInfo(dataValue)\n                break\n            case '03':\n                break\n            case '04':\n                measurementArray = [\n                    {measurementId: '3940', type: 'Work Mode', measurementValue: getWorkingMode(dataValue.substring(0, 2))},\n                    {measurementId: '3942', type: 'Heartbeat Interval', measurementValue: getOneWeekInterval(dataValue.substring(4, 8))},\n                    {measurementId: '3943', type: 'Periodic Interval', measurementValue: getOneWeekInterval(dataValue.substring(8, 12))},\n                    {measurementId: '3944', type: 'Event Interval', measurementValue: getOneWeekInterval(dataValue.substring(12, 16))},\n                    {measurementId: '3941', type: 'SOS Mode', measurementValue: getSOSMode(dataValue.substring(16, 18))}\n                ]\n                break;\n            case '05':\n                measurementArray = [\n                    {measurementId: '3000', type: 'Battery', measurementValue: getBattery(dataValue.substring(0, 2))},\n                    {measurementId: '3940', type: 'Work Mode', measurementValue: getWorkingMode(dataValue.substring(2, 4))},\n                    {measurementId: '3941', type: 'SOS Mode', measurementValue: getSOSMode(dataValue.substring(6, 8))}\n                ]\n                break\n            case '06':\n                eventList = getEventStatus(dataValue.substring(0, 6))\n                collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n                measurementArray = [\n                    {measurementId: '4200', type: 'SOS Event', measurementValue: eventList[6]},\n                    {measurementId: '4197', type: 'Longitude', measurementValue: getSensorValue(dataValue.substring(16, 24), 1000000)},\n                    {measurementId: '4198', type: 'Latitude', measurementValue: getSensorValue(dataValue.substring(24, 32), 1000000)},\n                    {measurementId: '4097', type: 'Air Temperature', measurementValue: getSensorValue(dataValue.substring(32, 36), 10)},\n                    {measurementId: '4199', type: 'Light', measurementValue: getSensorValue(dataValue.substring(36, 40))},\n                    {measurementId: '3000', type: 'Battery', measurementValue: getBattery(dataValue.substring(40, 42))},\n                    {type: 'Timestamp', measurementValue: collectTime}\n                ]\n                break\n            case '07':\n                eventList = getEventStatus(dataValue.substring(0, 6))\n                collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n                measurementArray = [\n                    {measurementId: '4200', type: 'SOS Event', measurementValue: eventList[6]},\n                    {measurementId: '5001', type: 'Wi-Fi Scan', measurementValue: getMacAndRssiObj(dataValue.substring(16, 72))},\n                    {measurementId: '4097', type: 'Air Temperature', measurementValue: getSensorValue(dataValue.substring(72, 76), 10)},\n                    {measurementId: '4199', type: 'Light', measurementValue: getSensorValue(dataValue.substring(76, 80))},\n                    {measurementId: '3000', type: 'Battery', measurementValue: getBattery(dataValue.substring(80, 82))},\n                    {type: 'Timestamp', measurementValue: collectTime}\n                ]\n                break\n            case '08':\n                eventList = getEventStatus(dataValue.substring(0, 6))\n                collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n                measurementArray = [\n                    {measurementId: '4200', type: 'SOS Event', measurementValue: eventList[6]},\n                    {measurementId: '5002', type: 'BLE Scan', measurementValue: getMacAndRssiObj(dataValue.substring(16, 58))},\n                    {measurementId: '4097', type: 'Air Temperature', measurementValue: getSensorValue(dataValue.substring(58, 62), 10)},\n                    {measurementId: '4199', type: 'Light', measurementValue: getSensorValue(dataValue.substring(62, 66))},\n                    {measurementId: '3000', type: 'Battery', measurementValue: getBattery(dataValue.substring(66, 68))},\n                    {type: 'Timestamp', measurementValue: collectTime}\n                ]\n                break\n            case '09':\n                eventList = getEventStatus(dataValue.substring(0, 6))\n                collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n                measurementArray = [\n                    {measurementId: '4200', type: 'SOS Event', measurementValue: eventList[6]},\n                    {measurementId: '4197', type: 'Longitude', measurementValue: getSensorValue(dataValue.substring(16, 24), 1000000)},\n                    {measurementId: '4198', type: 'Latitude', measurementValue: getSensorValue(dataValue.substring(24, 32), 1000000)},\n                    {measurementId: '3000', type: 'Battery', measurementValue: getBattery(dataValue.substring(32, 34))},\n                    {type: 'Timestamp', measurementValue: collectTime}\n                ]\n                break\n            case '0A':\n                eventList = getEventStatus(dataValue.substring(0, 6))\n                collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n                measurementArray = [\n                    {measurementId: '4200', type: 'SOS Event', measurementValue: eventList[6]},\n                    {measurementId: '5001', type: 'Wi-Fi Scan', measurementValue: getMacAndRssiObj(dataValue.substring(16, 72))},\n                    {measurementId: '3000', type: 'Battery', measurementValue: getBattery(dataValue.substring(72, 74))},\n                    {type: 'Timestamp', measurementValue: collectTime}\n                ]\n                break\n            case '0B':\n                eventList = getEventStatus(dataValue.substring(0, 6))\n                collectTime = getUTCTimestamp(dataValue.substring(8, 16))\n                measurementArray = [\n                    {measurementId: '4200', type: 'SOS Event', measurementValue: eventList[6]},\n                    {measurementId: '5002', type: 'BLE Scan', measurementValue: getMacAndRssiObj(dataValue.substring(16, 58))},\n                    {measurementId: '3000', type: 'Battery', measurementValue: getBattery(dataValue.substring(58, 60))},\n                    {type: 'Timestamp', measurementValue: collectTime}\n                ]\n                break\n            case '0D':\n                let errorCode = getInt(dataValue)\n                let error = ''\n                switch (errorCode) {\n                    case 0:\n                        error = 'THE GNSS SCAN TIME OUT'\n                        break\n                    case 1:\n                        error = 'THE WI-FI SCAN TIME OUT'\n                        break\n                    case 2:\n                        error = 'THE WI-FI+GNSS SCAN TIME OUT'\n                        break\n                    case 3:\n                        error = 'THE GNSS+WI-FI SCAN TIME OUT'\n                        break\n                    case 4:\n                        error = 'THE BEACON SCAN TIME OUT'\n                        break\n                    case 5:\n                        error = 'THE BEACON+WI-FI SCAN TIME OUT'\n                        break\n                    case 6:\n                        error = 'THE BEACON+GNSS SCAN TIME OUT'\n                        break\n                    case 7:\n                        error = 'THE BEACON+WI-FI+GNSS SCAN TIME OUT'\n                        break\n                    case 8:\n                        error = 'FAILED TO OBTAIN THE UTC TIMESTAMP'\n                        break\n                }\n                measurementArray.push({errorCode, error})\n        }\n        return measurementArray\n    }\n    \n    function getUpShortInfo (messageValue) {\n        return [\n            {\n                measurementId: '3000', type: 'Battery', measurementValue: getBattery(messageValue.substring(0, 2))\n            }, {\n                measurementId: '3502', type: 'Firmware Version', measurementValue: getSoftVersion(messageValue.substring(2, 6))\n            }, {\n                measurementId: '3001', type: 'Hardware Version', measurementValue: getHardVersion(messageValue.substring(6, 10))\n            }, {\n                measurementId: '3940', type: 'Work Mode', measurementValue: getWorkingMode(messageValue.substring(10, 12))\n            }, {\n                measurementId: '3942', type: 'Heartbeat Interval', measurementValue: getOneWeekInterval(messageValue.substring(14, 18))\n            }, {\n                measurementId: '3943', type: 'Periodic Interval', measurementValue: getOneWeekInterval(messageValue.substring(18, 22))\n            }, {\n                measurementId: '3944', type: 'Event Interval', measurementValue: getOneWeekInterval(messageValue.substring(22, 26))\n            }, {\n                measurementId: '3941', type: 'SOS Mode', measurementValue: getSOSMode(messageValue.substring(28, 30))\n            }\n        ]\n    }\n    function getBattery (batteryStr) {\n        return loraWANV2DataFormat(batteryStr)\n    }\n    function getSoftVersion (softVersion) {\n        return `${loraWANV2DataFormat(softVersion.substring(0, 2))}.${loraWANV2DataFormat(softVersion.substring(2, 4))}`\n    }\n    function getHardVersion (hardVersion) {\n        return `${loraWANV2DataFormat(hardVersion.substring(0, 2))}.${loraWANV2DataFormat(hardVersion.substring(2, 4))}`\n    }\n    \n    function getOneWeekInterval (str) {\n        return loraWANV2DataFormat(str) * 60\n    }\n    function getSensorValue (str, dig) {\n        if (str === '8000') {\n            return null\n        } else {\n            return loraWANV2DataFormat(str, dig)\n        }\n    }\n    \n    function bytes2HexString (arrBytes) {\n        var str = ''\n        for (var i = 0; i < arrBytes.length; i++) {\n            var tmp\n            var num = arrBytes[i]\n            if (num < 0) {\n                tmp = (255 + num + 1).toString(16)\n            } else {\n                tmp = num.toString(16)\n            }\n            if (tmp.length === 1) {\n                tmp = '0' + tmp\n            }\n            str += tmp\n        }\n        return str\n    }\n    function loraWANV2DataFormat (str, divisor = 1) {\n        let strReverse = bigEndianTransform(str)\n        let str2 = toBinary(strReverse)\n        if (str2.substring(0, 1) === '1') {\n            let arr = str2.split('')\n            let reverseArr = arr.map((item) => {\n                if (parseInt(item) === 1) {\n                    return 0\n                } else {\n                    return 1\n                }\n            })\n            str2 = parseInt(reverseArr.join(''), 2) + 1\n            return '-' + str2 / divisor\n        }\n        return parseInt(str2, 2) / divisor\n    }\n    \n    function bigEndianTransform (data) {\n        let dataArray = []\n        for (let i = 0; i < data.length; i += 2) {\n            dataArray.push(data.substring(i, i + 2))\n        }\n        return dataArray\n    }\n    \n    function toBinary (arr) {\n        let binaryData = arr.map((item) => {\n            let data = parseInt(item, 16)\n                .toString(2)\n            let dataLength = data.length\n            if (data.length !== 8) {\n                for (let i = 0; i < 8 - dataLength; i++) {\n                    data = `0` + data\n                }\n            }\n            return data\n        })\n        return binaryData.toString().replace(/,/g, '')\n    }\n    \n    function getSOSMode (str) {\n        return loraWANV2DataFormat(str)\n    }\n    \n    function getMacAndRssiObj (pair) {\n        let pairs = []\n        if (pair.length % 14 === 0) {\n            for (let i = 0; i < pair.length; i += 14) {\n                let mac = getMacAddress(pair.substring(i, i + 12))\n                if (mac) {\n                    let rssi = getInt8RSSI(pair.substring(i + 12, i + 14))\n                    pairs.push({mac: mac, rssi: rssi})\n                } else {\n                    continue\n                }\n            }\n        }\n        return pairs\n    }\n    \n    function getMacAddress (str) {\n        if (str.toLowerCase() === 'ffffffffffff') {\n            return null\n        }\n        let macArr = []\n        for (let i = 1; i < str.length; i++) {\n            if (i % 2 === 1) {\n                macArr.push(str.substring(i - 1, i + 1))\n            }\n        }\n        let mac = ''\n        for (let i = 0; i < macArr.length; i++) {\n            mac = mac + macArr[i]\n            if (i < macArr.length - 1) {\n                mac = mac + ':'\n            }\n        }\n        return mac\n    }\n    \n    function getInt8RSSI (str) {\n        return loraWANV2DataFormat(str)\n    }\n    \n    function getInt (str) {\n        return parseInt(str)\n    }\n    \n    /**\n     *  1.MOVING_STARTING\n     *  2.MOVING_END\n     *  3.DEVICE_STATIC\n     *  4.SHOCK_EVENT\n     *  5.TEMP_EVENT\n     *  6.LIGHTING_EVENT\n     *  7.SOS_EVENT\n     *  8.CUSTOMER_EVENT\n     * */\n    function getEventStatus (str) {\n        let bitStr = getByteArray(str)\n        let event = []\n        for (let i = bitStr.length; i >= 0; i--) {\n            if (i === 0) {\n                event[i] = bitStr.substring(0)\n            } else {\n                event[i] = bitStr.substring(i - 1, i)\n            }\n        }\n        return event.reverse()\n    }\n    \n    function getByteArray (str) {\n        let bytes = []\n        for (let i = 0; i < str.length; i += 2) {\n            bytes.push(str.substring(i, i + 2))\n        }\n        return toBinary(bytes)\n    }\n    \n    function getWorkingMode (workingMode) {\n        return getInt(workingMode)\n    }\n    \n    function getUTCTimestamp(str){\n        return parseInt(loraWANV2PositiveDataFormat(str)) * 1000\n    }\n    \n    function loraWANV2PositiveDataFormat (str, divisor = 1) {\n        let strReverse = bigEndianTransform(str)\n        let str2 = toBinary(strReverse)\n        return parseInt(str2, 2) / divisor\n    }\n    \n    exports.handler = async (event) => {\n      try {\n        const lorawan_info = event[\"WirelessMetadata\"][\"LoRaWAN\"];\n        const lorawan_data = event[\"PayloadData\"];\n    \n        const params = {\n          topic: 'sensecap/t1000',\n          payload: JSON.stringify({\n            eui: lorawan_info[\"DevEui\"],\n            timestamp:  lorawan_info[\"Timestamp\"],\n            data: decodeUplink(lorawan_data)[\"data\"]\n          }),\n          qos: 0\n        };\n    \n        await iotdata.publish(params).promise();\n    \n        return {\n          statusCode: 200,\n          body: 'Message published successfully'+JSON.stringify(event)\n        };\n      } catch (error) {\n        console.error('Error publishing message:', error);\n    \n        return {\n          statusCode: 500,\n          body: 'Error publishing message'\n        };\n      }\n    };    \n"))),(0,r.yg)("p",null,"Replace the ",(0,r.yg)("inlineCode",{parentName:"p"},"region")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"device id")," according to your device."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/decod-per.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("h3",{id:"configure-the-permission"},"Configure the Permission"),(0,r.yg)("p",null,"Click ",(0,r.yg)("inlineCode",{parentName:"p"},"Configuration")," \u2192 ",(0,r.yg)("inlineCode",{parentName:"p"},"Permissions")," \u2192 ",(0,r.yg)("inlineCode",{parentName:"p"},"Edit"),"."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/decod-per.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("p",null,"Click ",(0,r.yg)("inlineCode",{parentName:"p"},"View the xxxxxxxxxxx")," role at the bottom."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/existing-role.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("p",null,"Click ",(0,r.yg)("inlineCode",{parentName:"p"},"Add permissions")," \u2192 ",(0,r.yg)("inlineCode",{parentName:"p"},"Attach policies"),"."),(0,r.yg)("p",null,"Search \u201c",(0,r.yg)("a",{parentName:"p",href:"https://us-east-1.console.aws.amazon.com/iamv2/home#/policies/details/arn%3Aaws%3Aiam%3A%3Aaws%3Apolicy%2FAdministratorAccess"},"AdministratorAccess"),"\u201d, check the box left it, and then click \u201cAdd Permissions\u201d."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/policies.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("p",null,"Go back to ",(0,r.yg)("inlineCode",{parentName:"p"},"Create rule")," page, click refresh button and select the lambda function you created."),(0,r.yg)("p",null,"Then, click ",(0,r.yg)("inlineCode",{parentName:"p"},"Create")," and complete the rule creation."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/policies2.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("p",null,"Check the data on page ",(0,r.yg)("inlineCode",{parentName:"p"},"MQTT test client"),", input ",(0,r.yg)("inlineCode",{parentName:"p"},"#")," and click ",(0,r.yg)("inlineCode",{parentName:"p"},"Subscribe")," button, you will see the data."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/Tracker/dataview.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("h2",{id:"resource"},"Resource"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://github.com/Seeed-Solution/SenseCAP-Decoder/blob/main/T1000/AWS/SenseCAP_T1000_AWS_Decoder.js"},"SenseCAP T1000 Tracker Decoder for AWS")))}c.isMDXComponent=!0}}]);