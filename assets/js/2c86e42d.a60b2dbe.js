"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[43917],{15680:(e,n,r)=>{r.d(n,{xA:()=>c,yg:()=>h});var i=r(96540);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function t(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,i)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?t(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):t(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,i,a=function(e,n){if(null==e)return{};var r,i,a={},t=Object.keys(e);for(i=0;i<t.length;i++)r=t[i],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(i=0;i<t.length;i++)r=t[i],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=i.createContext({}),p=function(e){var n=i.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},c=function(e){var n=p(e.components);return i.createElement(s.Provider,{value:n},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var r=e.components,a=e.mdxType,t=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(r),u=a,h=d["".concat(s,".").concat(u)]||d[u]||g[u]||t;return r?i.createElement(h,o(o({ref:n},c),{},{components:r})):i.createElement(h,o({ref:n},c))}));function h(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var t=r.length,o=new Array(t);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<t;p++)o[p]=r[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,r)}u.displayName="MDXCreateElement"},24928:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>g,frontMatter:()=>t,metadata:()=>l,toc:()=>p});var i=r(58168),a=(r(96540),r(15680));const t={description:"Wio Terminal Displaying Gyro",title:"Wio Terminal Displaying Gyro",keywords:["Wio_terminal Tutorial"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/Wio-Terminal-Displaying-Gyro",last_update:{date:"1/31/2023",author:"jianjing Huang"}},o="Wio Terminal Displaying Accelerator Readings",l={unversionedId:"Sensor/Wio_Terminal/Tutorial/Wio-Terminal-Displaying-Gyro",id:"Sensor/Wio_Terminal/Tutorial/Wio-Terminal-Displaying-Gyro",title:"Wio Terminal Displaying Gyro",description:"Wio Terminal Displaying Gyro",source:"@site/docs/Sensor/Wio_Terminal/Tutorial/Wio-Terminal-Displaying-Gyro.md",sourceDirName:"Sensor/Wio_Terminal/Tutorial",slug:"/Wio-Terminal-Displaying-Gyro",permalink:"/Wio-Terminal-Displaying-Gyro",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/Sensor/Wio_Terminal/Tutorial/Wio-Terminal-Displaying-Gyro.md",tags:[],version:"current",lastUpdatedBy:"jianjing Huang",lastUpdatedAt:1675123200,formattedLastUpdatedAt:"Jan 31, 2023",frontMatter:{description:"Wio Terminal Displaying Gyro",title:"Wio Terminal Displaying Gyro",keywords:["Wio_terminal Tutorial"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/Wio-Terminal-Displaying-Gyro",last_update:{date:"1/31/2023",author:"jianjing Huang"}},sidebar:"ProductSidebar",previous:{title:"Reading Raspberry Pi's Info using Wio Terminal",permalink:"/Wio-Terminal-Reading-Raspberry-Pi"},next:{title:"Wio Terminal Storing Data",permalink:"/Wio-Terminal-Storting-Analog-Data"}},s={},p=[{value:"Overview",id:"overview",level:2},{value:"Features",id:"features",level:3},{value:"Arduino libraries needed",id:"arduino-libraries-needed",level:2},{value:"Arduino Instructions",id:"arduino-instructions",level:2},{value:"Code",id:"code",level:2},{value:"Complete code",id:"complete-code",level:2}],c={toc:p},d="wrapper";function g(e){let{components:n,...r}=e;return(0,a.yg)(d,(0,i.A)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"wio-terminal-displaying-accelerator-readings"},"Wio Terminal Displaying Accelerator Readings"),(0,a.yg)("div",{align:"center"},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/Wio-Terminal/img/C0279.2019-11-28%2018_25_43.gif"})),(0,a.yg)("h2",{id:"overview"},"Overview"),(0,a.yg)("p",null,"This example demonstrates how to draw line graph on Wio Terminal. In this example, the 3-axis accelerator readings(3 sets of data) are plotted into one line graph to show the real-time positioning of the Wio Terminal!"),(0,a.yg)("h3",{id:"features"},"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"3-axis accelerator readings displaying in one Line graph")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Real time positioning of the Wio Terminal"))),(0,a.yg)("h2",{id:"arduino-libraries-needed"},"Arduino libraries needed"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Visit ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/Seeed-Studio/Seeed_Arduino_Linechart"},"Seeed_Arduino_Linechart")," and download the entire repo to your local drive.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Install the on-board accelerator library ",(0,a.yg)("inlineCode",{parentName:"p"},"Seeed_Arduino_LIS3DHTR"),", Please visit ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/Seeed-Studio/Seeed_Arduino_LIS3DHTR/tree/beta"},"Seeed_Arduino_LIS3DHTR")," for more information."))),(0,a.yg)("h2",{id:"arduino-instructions"},"Arduino Instructions"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Download the ",(0,a.yg)("a",{parentName:"p",href:"https://files.seeedstudio.com/wiki/Wio-Terminal/res/AcceleratorReadings.ino.zip"},(0,a.yg)("inlineCode",{parentName:"a"},"AcceratorReadings.ino"))," file and upload to your Wio Terminal through ",(0,a.yg)("inlineCode",{parentName:"p"},"Arduino IDE"),". Make sure you installed all the libraries.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Move Wio Terminal in different axis and see what it displays, and you could also open ",(0,a.yg)("inlineCode",{parentName:"p"},"Serial Plotter")," to check the effect!"))),(0,a.yg)("h2",{id:"code"},"Code"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"To initialize LCD and Accelerator"))),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},'#include"LIS3DHTR.h" //include the accelerator library\n#include"seeed_line_chart.h" //include the line chart library\n\nTFT_eSPI tft;\nLIS3DHTR<TwoWire>  lis;\n\n#define MAX_SIZE 50 //maximum size of data\ndoubles accelerator_readings[3];\nTFT_eSprite spr = TFT_eSprite(&tft);  // Sprite\n\nvoid setup() {\n    tft.begin();\n    tft.setRotation(3);\n    spr.createSprite(TFT_HEIGHT,TFT_WIDTH);\n    spr.setRotation(3);\n\n    lis.begin(Wire1);\n    lis.setOutputDataRate(LIS3DHTR_DATARATE_25HZ);\n    lis.setFullScaleRange(LIS3DHTR_RANGE_2G);\n\n    Serial.begin(115200);\n}\n')),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Reading Accelerator data and loading data"))),(0,a.yg)("p",null,"Please refer to ",(0,a.yg)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/Wio-Terminal-LCD-Linecharts/"},"Line Charts")," for more information."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"void loop() {\n    spr.fillSprite(TFT_WHITE);\n    float x_raw = lis.getAccelerationX();\n    float y_raw = lis.getAccelerationY();\n    float z_raw = lis.getAccelerationZ();\n    ...\n\n    if (accelerator_readings[0].size() == MAX_SIZE) {\n      for (uint8_t i = 0; i<3; i++){\n        accelerator_readings[i].pop(); //this is used to remove the first read variable\n      }\n    }\n\n    accelerator_readings[0].push(x_raw); //store x-axis readings\n    accelerator_readings[1].push(y_raw); //store y-axis readings\n    accelerator_readings[2].push(z_raw); //store z-axis readings\n    ...\n}\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Title configurations"))),(0,a.yg)("p",null,"Please refer to ",(0,a.yg)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/Wio-Terminal-LCD-Linecharts/"},"Line Charts")," for more information."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},'auto header =  text(0, 0)\n            .value("Accelerator Readings")\n            .align(center)\n            .valign(vcenter)\n            .width(spr.width())\n            .thickness(2);\n\nheader.height(header.font_height(&spr) * 2);\nheader.draw(&spr); // Header height is the twice the height of the font\n')),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Line Chart configurations"))),(0,a.yg)("p",null,"To draw multiple lines in one graph, you can pass doubles array into the line graph like ",(0,a.yg)("inlineCode",{parentName:"p"},"content.value({doubles[0],doubles[1],doubles[2]...})")," as shown below. Can also set the color for each line using ",(0,a.yg)("inlineCode",{parentName:"p"},".color()")," where the order of color will match the order of data passing."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"auto content = line_chart(20, header.height()); //(x,ywhere the line graph begins\n     content\n            .height(spr.height() - header.height() * 1.5) //actual height of the line chart\n            .width(spr.width() - content.x() * 2) //actual width of the line chart\n            .based_on(-2.0) //Starting point of y-axis, must be a float\n            .show_circle(false) //drawing a cirle at each point, default is on.\n            .value({accelerator_readings[0],accelerator_readings[1], accelerator_readings[2]}) //passing through the data to line graph\n            .max_size(MAX_SIZE)          \n            .color(TFT_BLUE, TFT_RED, TFT_GREEN)\n            .backgroud(TFT_WHITE)\n            .draw(&spr);\n")),(0,a.yg)("h2",{id:"complete-code"},"Complete code"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},'#include"LIS3DHTR.h" //include the accelerator library\n#include"seeed_line_chart.h" //include the line chart library\n\nTFT_eSPI tft;\nLIS3DHTR<TwoWire>  lis;\n\n#define MAX_SIZE 50 //maximum size of data\ndoubles accelerator_readings[3];\nTFT_eSprite spr = TFT_eSprite(&tft);  // Sprite\n\nvoid setup() {\n    tft.begin();\n    tft.setRotation(3);\n    spr.createSprite(TFT_HEIGHT,TFT_WIDTH);\n    spr.setRotation(3);\n\n    lis.begin(Wire1);\n    lis.setOutputDataRate(LIS3DHTR_DATARATE_25HZ);\n    lis.setFullScaleRange(LIS3DHTR_RANGE_2G);\n\n    Serial.begin(115200);\n}\n\nvoid loop() {\n    spr.fillSprite(TFT_WHITE);\n    float x_raw = lis.getAccelerationX();\n    float y_raw = lis.getAccelerationY();\n    float z_raw = lis.getAccelerationZ();\n\n    //This is used to print out on Serial Plotter, check Serial Plotter!\n    Serial.print(x_raw);\n    Serial.print(",");\n    Serial.print(y_raw);\n    Serial.print(",");\n    Serial.println(z_raw);\n\n    if (accelerator_readings[0].size() == MAX_SIZE) {\n      for (uint8_t i = 0; i<3; i++){\n        accelerator_readings[i].pop(); //this is used to remove the first read variable\n      }\n    }\n    accelerator_readings[0].push(x_raw); //read variables and store in data\n    accelerator_readings[1].push(y_raw);\n    accelerator_readings[2].push(z_raw);\n\n    //Settings for the line graph title\n    auto header =  text(0, 0)\n                .value("Accelerator Readings")\n                .align(center)\n                .valign(vcenter)\n                .width(spr.width())\n                .thickness(2);\n\n    header.height(header.font_height(&spr) * 2);\n    header.draw(&spr); // Header height is the twice the height of the font\n\n  //Settings for the line graph\n    auto content = line_chart(20, header.height()); //(x,y) where the line graph begins\n         content\n                .height(spr.height() - header.height() * 1.5) //actual height of the line chart\n                .width(spr.width() - content.x() * 2) //actual width of the line chart\n                .based_on(-2.0) //Starting point of y-axis, must be a float\n                .show_circle(false) //drawing a cirle at each point, default is on.\n                .value({accelerator_readings[0],accelerator_readings[1], accelerator_readings[2]}) //passing through the data to line graph\n                .max_size(MAX_SIZE)          \n                .color(TFT_BLUE, TFT_RED, TFT_GREEN)\n                .backgroud(TFT_WHITE)\n                .draw(&spr);\n\n    spr.pushSprite(0, 0);\n    delay(50);\n}\n')))}g.isMDXComponent=!0}}]);